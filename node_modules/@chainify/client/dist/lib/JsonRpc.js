"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@chainify/logger");
const Http_1 = __importDefault(require("./Http"));
const logger = new logger_1.Logger('JsonRpcProvider');
class JsonRpcProvider {
    constructor(url, username, password) {
        const config = {
            baseURL: url || JsonRpcProvider.defaultUrl(),
            responseType: 'text',
            transformResponse: undefined,
            validateStatus: () => true,
        };
        if (username || password) {
            config.auth = { username, password };
        }
        this._nextId = 42;
        this._httpClient = new Http_1.default(config);
    }
    static defaultUrl() {
        return 'http://localhost:8545';
    }
    send(method, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                method: method,
                params: params,
                id: this._nextId++,
                jsonrpc: '2.0',
            };
            const result = this._httpClient.nodePost('/', request).then((result) => {
                logger.debug({
                    action: 'response',
                    request: request,
                    response: result,
                    provider: this,
                });
                return this.getResult(result);
            }, (error) => {
                logger.debug({
                    action: 'response',
                    error: error,
                    request: request,
                    provider: this,
                });
                throw error;
            });
            return result;
        });
    }
    getResult(payload) {
        if (payload.error) {
            const error = new Error(payload.error.message);
            error.code = payload.error.code;
            error.data = payload.error.data;
            throw error;
        }
        return payload.result;
    }
}
exports.default = JsonRpcProvider;
//# sourceMappingURL=JsonRpc.js.map