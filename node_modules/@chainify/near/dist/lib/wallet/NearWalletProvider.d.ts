import { Chain, Wallet } from '@chainify/client';
import { Address, AddressType, Asset, BigNumber, Transaction } from '@chainify/types';
import { InMemorySigner, NearNetwork, NearTxLog, NearTxRequest, NearTxResponse, NearWalletOptions, providers } from '../types';
export declare class NearWalletProvider extends Wallet<providers.JsonRpcProvider, InMemorySigner> {
    private _derivationPath;
    private _wallet;
    private _keyStore;
    private _addressCache;
    private _helper;
    constructor(walletOptions: NearWalletOptions, chainProvider?: Chain<providers.JsonRpcProvider>);
    getSigner(): InMemorySigner;
    getAddress(): Promise<Address>;
    getUnusedAddress(): Promise<Address>;
    getUsedAddresses(): Promise<Address[]>;
    getAddresses(): Promise<Address[]>;
    signMessage(message: string): Promise<string>;
    sendTransaction(txRequest: NearTxRequest): Promise<Transaction<NearTxLog>>;
    sendBatchTransaction(txRequests: NearTxRequest[]): Promise<Transaction<NearTxLog>[]>;
    sendSweepTransaction(to: AddressType, _asset: Asset): Promise<Transaction<NearTxLog>>;
    getBalance(_assets: Asset[]): Promise<BigNumber[]>;
    exportPrivateKey(): Promise<string>;
    isWalletAvailable(): Promise<boolean>;
    canUpdateFee(): boolean;
    updateTransactionFee(_tx: string | Transaction<any>): Promise<Transaction<NearTxResponse>>;
    getConnectedNetwork(): Promise<NearNetwork>;
    private getAccount;
    protected onChainProviderUpdate(_chainProvider: Chain<providers.JsonRpcProvider, NearNetwork>): void;
    private getImplicitAccount;
}
