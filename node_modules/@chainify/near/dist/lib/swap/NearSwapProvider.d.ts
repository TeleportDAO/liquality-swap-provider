import { Swap, Wallet } from '@chainify/client';
import { FeeType, SwapParams, Transaction } from '@chainify/types';
import { InMemorySigner, NearTxLog, providers } from '../types';
export declare class NearSwapProvider extends Swap<providers.JsonRpcProvider, InMemorySigner> {
    private _httpClient;
    constructor(helperUrl: string, walletProvider?: Wallet<providers.JsonRpcProvider, InMemorySigner>);
    initiateSwap(swapParams: SwapParams): Promise<Transaction<NearTxLog>>;
    findInitiateSwapTransaction(swapParams: SwapParams, _blockNumber?: number): Promise<Transaction<NearTxLog>>;
    claimSwap(swapParams: SwapParams, initTxHash: string, secret: string): Promise<Transaction<NearTxLog>>;
    findClaimSwapTransaction(swapParams: SwapParams, initTxHash: string): Promise<Transaction<NearTxLog>>;
    refundSwap(swapParams: SwapParams, initTxHash: string): Promise<Transaction<NearTxLog>>;
    findRefundSwapTransaction(swapParams: SwapParams, initTxHash: string): Promise<Transaction<NearTxLog>>;
    getSwapSecret(claimTxHash: string): Promise<string>;
    protected onWalletProviderUpdate(_wallet: Wallet<providers.JsonRpcProvider, InMemorySigner>): void;
    protected doesTransactionMatchInitiation(swapParams: SwapParams, transaction: Transaction<NearTxLog>): boolean;
    private generateUniqueString;
    private findAddressTransaction;
    canUpdateFee(): boolean;
    updateTransactionFee(_tx: string | Transaction<any>, _newFee: FeeType): Promise<Transaction>;
}
