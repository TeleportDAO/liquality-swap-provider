import { Wallet } from '@chainify/client';
import { Address, Asset, BigNumber, FeeType, Transaction, TransactionRequest } from '@chainify/types';
import { LCDClient, MnemonicKey } from '@terra-money/terra.js';
import { TerraChainProvider } from '..';
import { TerraNetwork, TerraTxInfo, TerraTxRequest, TerraWalletProviderOptions } from '../types';
export declare class TerraWalletProvider extends Wallet<LCDClient, MnemonicKey> {
    protected signer: MnemonicKey;
    private _derivationPath;
    private _mnemonic;
    private _addressCache;
    private _wallet;
    private _gasAdjustment;
    constructor(walletOptions: TerraWalletProviderOptions, chainProvider?: TerraChainProvider);
    exportPrivateKey(): Promise<string>;
    isWalletAvailable(): Promise<boolean>;
    getAddress(): Promise<Address>;
    getAddresses(): Promise<Address[]>;
    getUsedAddresses(): Promise<Address[]>;
    getUnusedAddress(): Promise<Address>;
    signMessage(message: string): Promise<string>;
    getConnectedNetwork(): Promise<TerraNetwork>;
    sendTransaction(txRequest: TerraTxRequest): Promise<Transaction<TerraTxInfo>>;
    sendSweepTransaction(address: string | Address, asset: Asset): Promise<Transaction<TerraTxInfo>>;
    getSigner(): MnemonicKey;
    sendBatchTransaction(_txRequests: TransactionRequest[]): Promise<Transaction<any>[]>;
    updateTransactionFee(_tx: string | Transaction<any>, _newFee: FeeType): Promise<Transaction<any>>;
    getBalance(assets: Asset[]): Promise<BigNumber[]>;
    canUpdateFee(): boolean;
    protected onChainProviderUpdate(chainProvider: TerraChainProvider): void;
    private createSendMessage;
    private broadcastTx;
    private buildTransaction;
}
