import { Swap } from '@chainify/client';
import { FeeType, SwapParams, Transaction } from '@chainify/types';
import { LCDClient, MnemonicKey } from '@terra-money/terra.js';
import { TerraWalletProvider } from '..';
import { TerraTxInfo } from '../types';
export declare abstract class TerraSwapBaseProvider extends Swap<LCDClient, MnemonicKey, TerraWalletProvider> {
    initiateSwap(swapParams: SwapParams, fee?: FeeType): Promise<Transaction<TerraTxInfo>>;
    claimSwap(swapParams: SwapParams, initiationTxHash: string, secret: string, fee?: FeeType): Promise<Transaction<TerraTxInfo>>;
    refundSwap(swapParams: SwapParams, initTx: string, fee?: FeeType): Promise<Transaction<TerraTxInfo>>;
    getSwapSecret(claimTxHash: string, _initTxHash?: string): Promise<string>;
    protected doesTransactionMatchInitiation(swapParams: SwapParams, initTx: Transaction<TerraTxInfo>): Promise<boolean>;
    canUpdateFee(): boolean;
    updateTransactionFee(_tx: string | Transaction<TerraTxInfo>, _newFee: FeeType): Promise<Transaction<TerraTxInfo>>;
    abstract findInitiateSwapTransaction(_swapParams: SwapParams, _blockNumber?: number): Promise<Transaction<TerraTxInfo>>;
    abstract findClaimSwapTransaction(_swapParams: SwapParams, _initTxHash: string, _blockNumber?: number): Promise<Transaction<TerraTxInfo>>;
    abstract findRefundSwapTransaction(_swapParams: SwapParams, _initiationTxHash: string, _blockNumber?: number): Promise<Transaction<TerraTxInfo>>;
}
