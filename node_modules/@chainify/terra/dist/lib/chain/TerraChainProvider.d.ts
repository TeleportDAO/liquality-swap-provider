import { Chain, Fee, HttpClient } from '@chainify/client';
import { AddressType, Asset, BigNumber, Block, FeeDetails, TokenDetails, Transaction } from '@chainify/types';
import { BlockInfo, LCDClient } from '@terra-money/terra.js';
import { TerraNetwork, TerraTxInfo } from '../types';
export declare class TerraChainProvider extends Chain<LCDClient, TerraNetwork> {
    _httpClient: HttpClient;
    constructor(network: TerraNetwork, provider?: LCDClient, feeProvider?: Fee);
    getTokenDetails(asset: string): Promise<TokenDetails>;
    getBlockByNumber(blockNumber?: number, includeTx?: boolean): Promise<Block<BlockInfo, TerraTxInfo>>;
    getBlockHeight(): Promise<number>;
    getTransactionByHash(txHash: string): Promise<Transaction<TerraTxInfo>>;
    getBalance(addresses: AddressType[], assets: Asset[]): Promise<BigNumber[]>;
    getFees(feeAsset?: Asset): Promise<FeeDetails>;
    sendRpcRequest(method: keyof APIRequester, params: any[]): Promise<any>;
    getBlockByHash(_blockHash: string, _includeTx?: boolean): Promise<Block<BlockInfo, TerraTxInfo>>;
    sendRawTransaction(_rawTransaction: string): Promise<string>;
}
declare type APIParams = Record<string, string | number | null | undefined>;
declare class APIRequester {
    private axios;
    constructor(baseURL: string);
    getRaw<T>(endpoint: string, params?: URLSearchParams | APIParams): Promise<T>;
    get<T>(endpoint: string, params?: URLSearchParams | APIParams): Promise<T>;
    postRaw<T>(endpoint: string, data?: any): Promise<T>;
    post<T>(endpoint: string, data?: any): Promise<T>;
}
export {};
