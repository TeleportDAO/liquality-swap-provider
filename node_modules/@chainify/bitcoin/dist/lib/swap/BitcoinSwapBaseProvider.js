"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitcoinSwapBaseProvider = void 0;
const client_1 = require("@chainify/client");
const types_1 = require("@chainify/types");
const utils_1 = require("@chainify/utils");
const bitcoinjs_lib_1 = require("bitcoinjs-lib");
const types_2 = require("../types");
const utils_2 = require("../utils");
class BitcoinSwapBaseProvider extends client_1.Swap {
    constructor(options, walletProvider) {
        super(walletProvider);
        const { network, mode = types_2.SwapMode.P2WSH } = options;
        const swapModes = Object.values(types_2.SwapMode);
        if (!swapModes.includes(mode)) {
            throw new Error(`Mode must be one of ${swapModes.join(',')}`);
        }
        this._network = network;
        this._mode = mode;
    }
    validateSwapParams(swapParams) {
        (0, utils_1.validateValue)(swapParams.value);
        (0, utils_2.validateAddress)(swapParams.recipientAddress, this._network);
        (0, utils_2.validateAddress)(swapParams.refundAddress, this._network);
        (0, utils_1.validateSecretHash)(swapParams.secretHash);
        (0, utils_1.validateExpiration)(swapParams.expiration);
    }
    initiateSwap(swapParams, feePerByte) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateSwapParams(swapParams);
            const swapOutput = this.getSwapOutput(swapParams);
            const address = this.getSwapPaymentVariants(swapOutput)[this._mode].address;
            return this.walletProvider.sendTransaction({
                to: address,
                value: swapParams.value,
                fee: feePerByte,
            });
        });
    }
    claimSwap(swapParams, initiationTxHash, secret, feePerByte) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateSwapParams(swapParams);
            (0, utils_1.validateSecret)(secret);
            (0, utils_1.validateSecretAndHash)(secret, swapParams.secretHash);
            yield this.verifyInitiateSwapTransaction(swapParams, initiationTxHash);
            return this._redeemSwap(swapParams, initiationTxHash, true, secret, feePerByte);
        });
    }
    refundSwap(swapParams, initiationTxHash, feePerByte) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateSwapParams(swapParams);
            yield this.verifyInitiateSwapTransaction(swapParams, initiationTxHash);
            return this._redeemSwap(swapParams, initiationTxHash, false, undefined, feePerByte);
        });
    }
    findInitiateSwapTransaction(swapParams, blockNumber) {
        this.validateSwapParams(swapParams);
        return this.findSwapTransaction(swapParams, blockNumber, (tx) => this.doesTransactionMatchInitiation(swapParams, tx));
    }
    getSwapSecret(claimTxHash, initTxHash) {
        return __awaiter(this, void 0, void 0, function* () {
            const claimSwapTransaction = yield this.walletProvider
                .getChainProvider()
                .getTransactionByHash(claimTxHash);
            if (claimSwapTransaction) {
                const swapInput = claimSwapTransaction._raw.vin.find((vin) => vin.txid === initTxHash);
                if (!swapInput) {
                    throw new Error('Claim input missing');
                }
                const inputScript = this.getInputScript(swapInput);
                const secret = inputScript[2];
                return secret;
            }
        });
    }
    findClaimSwapTransaction(swapParams, initTxHash, blockNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateSwapParams(swapParams);
            const claimSwapTransaction = yield this.findSwapTransaction(swapParams, blockNumber, (tx) => this.doesTransactionMatchRedeem(initTxHash, tx, false));
            if (claimSwapTransaction) {
                const swapInput = claimSwapTransaction._raw.vin.find((vin) => vin.txid === initTxHash);
                if (!swapInput) {
                    throw new Error('Claim input missing');
                }
                const inputScript = this.getInputScript(swapInput);
                const secret = inputScript[2];
                (0, utils_1.validateSecretAndHash)(secret, swapParams.secretHash);
                return Object.assign(Object.assign({}, claimSwapTransaction), { secret, _raw: claimSwapTransaction });
            }
        });
    }
    findRefundSwapTransaction(swapParams, initiationTxHash, blockNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateSwapParams(swapParams);
            const refundSwapTransaction = yield this.findSwapTransaction(swapParams, blockNumber, (tx) => this.doesTransactionMatchRedeem(initiationTxHash, tx, true));
            return refundSwapTransaction;
        });
    }
    onWalletProviderUpdate(_wallet) {
        // do nothing
    }
    getSwapOutput(swapParams) {
        this.validateSwapParams(swapParams);
        const secretHashBuff = Buffer.from(swapParams.secretHash, 'hex');
        const recipientPubKeyHash = (0, utils_2.getPubKeyHash)(swapParams.recipientAddress.toString(), this._network);
        const refundPubKeyHash = (0, utils_2.getPubKeyHash)(swapParams.refundAddress.toString(), this._network);
        const OPS = bitcoinjs_lib_1.script.OPS;
        const script = bitcoinjs_lib_1.script.compile([
            OPS.OP_IF,
            OPS.OP_SIZE,
            bitcoinjs_lib_1.script.number.encode(32),
            OPS.OP_EQUALVERIFY,
            OPS.OP_SHA256,
            secretHashBuff,
            OPS.OP_EQUALVERIFY,
            OPS.OP_DUP,
            OPS.OP_HASH160,
            recipientPubKeyHash,
            OPS.OP_ELSE,
            bitcoinjs_lib_1.script.number.encode(swapParams.expiration),
            OPS.OP_CHECKLOCKTIMEVERIFY,
            OPS.OP_DROP,
            OPS.OP_DUP,
            OPS.OP_HASH160,
            refundPubKeyHash,
            OPS.OP_ENDIF,
            OPS.OP_EQUALVERIFY,
            OPS.OP_CHECKSIG,
        ]);
        if (![97, 98].includes(Buffer.byteLength(script))) {
            throw new Error('Invalid swap script');
        }
        return script;
    }
    getSwapInput(sig, pubKey, isClaim, secret) {
        const OPS = bitcoinjs_lib_1.script.OPS;
        const redeem = isClaim ? OPS.OP_TRUE : OPS.OP_FALSE;
        const secretParams = isClaim ? [Buffer.from(secret, 'hex')] : [];
        return bitcoinjs_lib_1.script.compile([sig, pubKey, ...secretParams, redeem]);
    }
    getSwapPaymentVariants(swapOutput) {
        const p2wsh = bitcoinjs_lib_1.payments.p2wsh({
            redeem: { output: swapOutput, network: this._network },
            network: this._network,
        });
        const p2shSegwit = bitcoinjs_lib_1.payments.p2sh({
            redeem: p2wsh,
            network: this._network,
        });
        const p2sh = bitcoinjs_lib_1.payments.p2sh({
            redeem: { output: swapOutput, network: this._network },
            network: this._network,
        });
        return {
            [types_2.SwapMode.P2WSH]: p2wsh,
            [types_2.SwapMode.P2SH_SEGWIT]: p2shSegwit,
            [types_2.SwapMode.P2SH]: p2sh,
        };
    }
    _redeemSwap(swapParams, initiationTxHash, isClaim, secret, feePerByte) {
        return __awaiter(this, void 0, void 0, function* () {
            const address = isClaim ? swapParams.recipientAddress : swapParams.refundAddress;
            const swapOutput = this.getSwapOutput(swapParams);
            return this._redeemSwapOutput(initiationTxHash, swapParams.value, address.toString(), swapOutput, swapParams.expiration, isClaim, secret, feePerByte);
        });
    }
    _redeemSwapOutput(initiationTxHash, value, address, swapOutput, expiration, isClaim, secret, _feePerByte) {
        return __awaiter(this, void 0, void 0, function* () {
            const network = this._network;
            const swapPaymentVariants = this.getSwapPaymentVariants(swapOutput);
            const initiationTxRaw = yield this.walletProvider.getChainProvider().getProvider().getRawTransactionByHash(initiationTxHash);
            const initiationTx = (0, utils_2.decodeRawTransaction)(initiationTxRaw, this._network);
            let swapVout;
            let paymentVariantName;
            let paymentVariant;
            for (const vout of initiationTx.vout) {
                const paymentVariantEntry = Object.entries(swapPaymentVariants).find(([, payment]) => payment.output.toString('hex') === vout.scriptPubKey.hex);
                const voutValue = new types_1.BigNumber(vout.value).times(1e8);
                if (paymentVariantEntry && voutValue.eq(new types_1.BigNumber(value))) {
                    paymentVariantName = paymentVariantEntry[0];
                    paymentVariant = paymentVariantEntry[1];
                    swapVout = vout;
                }
            }
            if (!swapVout) {
                throw new Error('Valid swap output not found');
            }
            const feePerByte = _feePerByte || (yield this.walletProvider.getChainProvider().getProvider().getFeePerByte());
            // TODO: Implement proper fee calculation that counts bytes in inputs and outputs
            const txfee = (0, utils_2.calculateFee)(1, 1, feePerByte);
            const swapValue = new types_1.BigNumber(swapVout.value).times(1e8).toNumber();
            if (swapValue - txfee < 0) {
                throw new Error('Transaction amount does not cover fee.');
            }
            const psbt = new bitcoinjs_lib_1.Psbt({ network });
            if (!isClaim) {
                psbt.setLocktime(expiration);
            }
            const isSegwit = paymentVariantName === types_2.SwapMode.P2WSH || paymentVariantName === types_2.SwapMode.P2SH_SEGWIT;
            const input = {
                hash: initiationTxHash,
                index: swapVout.n,
                sequence: 0,
            };
            if (isSegwit) {
                input.witnessUtxo = {
                    script: paymentVariant.output,
                    value: swapValue,
                };
                input.witnessScript = swapPaymentVariants.p2wsh.redeem.output; // Strip the push bytes (0020) off the script
            }
            else {
                input.nonWitnessUtxo = Buffer.from(initiationTxRaw, 'hex');
                input.redeemScript = paymentVariant.redeem.output;
            }
            const output = {
                address: address,
                value: swapValue - txfee,
            };
            psbt.addInput(input);
            psbt.addOutput(output);
            const walletAddress = yield this.walletProvider.getWalletAddress(address);
            const signedPSBTHex = yield this.walletProvider.signPSBT(psbt.toBase64(), [
                { index: 0, derivationPath: walletAddress.derivationPath },
            ]);
            const signedPSBT = bitcoinjs_lib_1.Psbt.fromBase64(signedPSBTHex, { network });
            const sig = signedPSBT.data.inputs[0].partialSig[0].signature;
            const swapInput = this.getSwapInput(sig, Buffer.from(walletAddress.publicKey, 'hex'), isClaim, secret);
            const paymentParams = { redeem: { output: swapOutput, input: swapInput, network }, network };
            const paymentWithInput = isSegwit ? bitcoinjs_lib_1.payments.p2wsh(paymentParams) : bitcoinjs_lib_1.payments.p2sh(paymentParams);
            const getFinalScripts = () => {
                let finalScriptSig;
                let finalScriptWitness;
                // create witness stack
                if (isSegwit) {
                    finalScriptWitness = (0, utils_2.witnessStackToScriptWitness)(paymentWithInput.witness);
                }
                if (paymentVariantName === types_2.SwapMode.P2SH_SEGWIT) {
                    // Adds the necessary push OP (PUSH34 (00 + witness script hash))
                    const inputScript = bitcoinjs_lib_1.script.compile([swapPaymentVariants.p2shSegwit.redeem.output]);
                    finalScriptSig = inputScript;
                }
                else if (paymentVariantName === types_2.SwapMode.P2SH) {
                    finalScriptSig = paymentWithInput.input;
                }
                return {
                    finalScriptSig,
                    finalScriptWitness,
                };
            };
            psbt.finalizeInput(0, getFinalScripts);
            const hex = psbt.extractTransaction().toHex();
            yield this.walletProvider.getChainProvider().sendRawTransaction(hex);
            return (0, utils_2.normalizeTransactionObject)((0, utils_2.decodeRawTransaction)(hex, this._network), txfee);
        });
    }
    extractSwapParams(outputScript) {
        const buffer = bitcoinjs_lib_1.script.decompile(Buffer.from(outputScript, 'hex'));
        if (buffer.length !== 20) {
            throw new Error('Invalid swap output script');
        }
        const secretHash = buffer[5].reverse().toString('hex');
        const recipientPublicKey = buffer[9].reverse().toString('hex');
        const expiration = parseInt(buffer[11].reverse().toString('hex'), 16);
        const refundPublicKey = buffer[16].reverse().toString('hex');
        return { recipientPublicKey, refundPublicKey, secretHash, expiration };
    }
    /**
     * Only to be used for situations where transaction is trusted. e.g to bump fee
     * DO NOT USE THIS TO VERIFY THE REDEEM
     */
    UNSAFE_isSwapRedeemTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-line
            if (transaction._raw.vin.length === 1 && transaction._raw.vout.length === 1) {
                const swapInput = transaction._raw.vin[0];
                const inputScript = this.getInputScript(swapInput);
                const initiationTransaction = yield this.walletProvider
                    .getChainProvider()
                    .getTransactionByHash(transaction._raw.vin[0].txid);
                const scriptType = initiationTransaction._raw.vout[transaction._raw.vin[0].vout].scriptPubKey.type;
                if (['scripthash', 'witness_v0_scripthash'].includes(scriptType) && [4, 5].includes(inputScript.length))
                    return true;
            }
            return false;
        });
    }
    canUpdateFee() {
        return true;
    }
    updateTransactionFee(tx, newFeePerByte) {
        return __awaiter(this, void 0, void 0, function* () {
            const txHash = typeof tx === 'string' ? tx : tx.hash;
            const transaction = yield this.walletProvider.getChainProvider().getTransactionByHash(txHash);
            if (yield this.UNSAFE_isSwapRedeemTransaction(transaction)) {
                const swapInput = transaction._raw.vin[0];
                const inputScript = this.getInputScript(swapInput);
                const initiationTxHash = swapInput.txid;
                const initiationTx = yield this.walletProvider
                    .getChainProvider()
                    .getTransactionByHash(initiationTxHash);
                const swapOutput = initiationTx._raw.vout[swapInput.vout];
                const value = new types_1.BigNumber(swapOutput.value).times(1e8);
                const address = transaction._raw.vout[0].scriptPubKey.addresses[0];
                const isClaim = inputScript.length === 5;
                const secret = isClaim ? inputScript[2] : undefined;
                const outputScript = isClaim ? inputScript[4] : inputScript[3];
                const { expiration } = this.extractSwapParams(outputScript);
                return this._redeemSwapOutput(initiationTxHash, value, address, Buffer.from(outputScript, 'hex'), expiration, isClaim, secret, newFeePerByte);
            }
            return this.walletProvider.updateTransactionFee(tx, newFeePerByte);
        });
    }
    getInputScript(vin) {
        const inputScript = vin.txinwitness
            ? vin.txinwitness
            : bitcoinjs_lib_1.script.decompile(Buffer.from(vin.scriptSig.hex, 'hex')).map((b) => (Buffer.isBuffer(b) ? b.toString('hex') : b));
        return inputScript;
    }
    doesTransactionMatchRedeem(initiationTxHash, tx, isRefund) {
        const swapInput = tx._raw.vin.find((vin) => vin.txid === initiationTxHash);
        if (!swapInput)
            return false;
        const inputScript = this.getInputScript(swapInput);
        if (!inputScript)
            return false;
        if (isRefund) {
            if (inputScript.length !== 4)
                return false;
        }
        else {
            if (inputScript.length !== 5)
                return false;
        }
        return true;
    }
    doesTransactionMatchInitiation(swapParams, transaction) {
        const swapOutput = this.getSwapOutput(swapParams);
        const swapPaymentVariants = this.getSwapPaymentVariants(swapOutput);
        const vout = transaction._raw.vout.find((vout) => Object.values(swapPaymentVariants).find((payment) => payment.output.toString('hex') === vout.scriptPubKey.hex &&
            new types_1.BigNumber(vout.value).times(1e8).eq(new types_1.BigNumber(swapParams.value))));
        return Boolean(vout);
    }
}
exports.BitcoinSwapBaseProvider = BitcoinSwapBaseProvider;
//# sourceMappingURL=BitcoinSwapBaseProvider.js.map