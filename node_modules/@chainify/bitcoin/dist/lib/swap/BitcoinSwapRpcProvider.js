"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitcoinSwapRpcProvider = void 0;
const BitcoinSwapBaseProvider_1 = require("./BitcoinSwapBaseProvider");
class BitcoinSwapRpcProvider extends BitcoinSwapBaseProvider_1.BitcoinSwapBaseProvider {
    constructor(options, walletProvider) {
        super(options, walletProvider);
    }
    findSwapTransaction(_swapParams, blockNumber, predicate) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Are mempool TXs possible?
            const block = yield this.walletProvider.getChainProvider().getBlockByNumber(blockNumber, true);
            const swapTransaction = block.transactions.find(predicate);
            return swapTransaction;
        });
    }
}
exports.BitcoinSwapRpcProvider = BitcoinSwapRpcProvider;
//# sourceMappingURL=BitcoinSwapRpcProvider.js.map