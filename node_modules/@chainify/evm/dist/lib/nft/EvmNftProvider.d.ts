import { Nft } from '@chainify/client';
import { AddressType, BigNumber, FeeType, NFTAsset, Transaction } from '@chainify/types';
import { Signer } from '@ethersproject/abstract-signer';
import { BaseProvider } from '@ethersproject/providers';
import { ERC1155, ERC721 } from '../typechain';
import { EthersTransactionResponse, NftTypes } from '../types';
import { EvmBaseWalletProvider } from '../wallet/EvmBaseWalletProvider';
declare type NftContract = ERC721 | ERC1155;
declare type NftInfo = {
    contract: NftContract;
    schema: NftTypes;
};
export declare abstract class EvmNftProvider extends Nft<BaseProvider, Signer> {
    private _erc721;
    private _erc1155;
    protected schemas: Record<string, NftContract>;
    protected cache: Record<string, NftInfo>;
    protected walletProvider: EvmBaseWalletProvider<BaseProvider>;
    constructor(walletProvider: EvmBaseWalletProvider<BaseProvider>);
    transfer(contractAddress: AddressType, receiver: AddressType, tokenIDs: string[], amounts?: number[], data?: string, fee?: FeeType): Promise<Transaction<EthersTransactionResponse>>;
    balanceOf(contractAddress: AddressType, owners: AddressType[], tokenIDs: number[]): Promise<BigNumber | BigNumber[]>;
    approve(contractAddress: AddressType, operator: AddressType, tokenID: number, fee?: FeeType): Promise<Transaction<EthersTransactionResponse>>;
    approveAll(contractAddress: AddressType, operator: AddressType, state: boolean, fee?: FeeType): Promise<Transaction<EthersTransactionResponse>>;
    isApprovedForAll(contractAddress: AddressType, operator: AddressType): Promise<boolean>;
    estimateTransfer(contractAddress: AddressType, receiver: AddressType, tokenIDs: string[], amounts?: number[], data?: string): Promise<BigNumber>;
    estimateApprove(contractAddress: AddressType, operator: AddressType, tokenID: number): Promise<BigNumber>;
    estimateApproveAll(contractAddress: AddressType, operator: AddressType, state: boolean): Promise<BigNumber>;
    fetch(): Promise<NFTAsset[]>;
    private _cacheGet;
    private populateApprove;
    private populateTrasnfer;
    private populateApproveAll;
}
export {};
