"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CovalentNftProvider = void 0;
const client_1 = require("@chainify/client");
const types_1 = require("@chainify/types");
const types_2 = require("../types");
const EvmNftProvider_1 = require("./EvmNftProvider");
class CovalentNftProvider extends EvmNftProvider_1.EvmNftProvider {
    constructor(walletProvider, config) {
        super(walletProvider);
        this._config = config;
        this._httpClient = new client_1.HttpClient({
            baseURL: config.url,
            responseType: 'text',
            transformResponse: undefined,
        });
    }
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const [userAddress, network] = yield Promise.all([this.walletProvider.getAddress(), this.walletProvider.getConnectedNetwork()]);
            const response = yield this._httpClient.nodeGet(`/${network.chainId}/address/${userAddress}/balances_v2/?format=JSON&nft=true&no-nft-fetch=false&key=${this._config.apiKey}`);
            return response.data.items.reduce((result, asset) => {
                var _a;
                if (asset.type === types_1.AssetTypes.nft) {
                    const { contract_name, contract_ticker_symbol, contract_address, supports_erc, nft_data } = asset;
                    const schema_type = (_a = supports_erc === null || supports_erc === void 0 ? void 0 : supports_erc.pop()) === null || _a === void 0 ? void 0 : _a.toUpperCase();
                    if (schema_type in types_2.NftTypes && contract_address) {
                        let nftAsset = {
                            token_id: null,
                            asset_contract: {
                                address: contract_address,
                                name: contract_name,
                                symbol: contract_ticker_symbol,
                            },
                            collection: {
                                name: contract_name,
                            },
                        };
                        this.cache[contract_address] = {
                            contract: this.schemas[schema_type].attach(contract_address),
                            schema: schema_type,
                        };
                        if (nft_data.length) {
                            nft_data.forEach((data) => {
                                const { external_data } = data;
                                nftAsset = Object.assign(Object.assign({}, nftAsset), { token_id: data === null || data === void 0 ? void 0 : data.token_id, name: external_data === null || external_data === void 0 ? void 0 : external_data.name, description: external_data === null || external_data === void 0 ? void 0 : external_data.description, external_link: external_data === null || external_data === void 0 ? void 0 : external_data.external_url, image_original_url: external_data === null || external_data === void 0 ? void 0 : external_data.image, image_preview_url: external_data === null || external_data === void 0 ? void 0 : external_data.image, image_thumbnail_url: external_data === null || external_data === void 0 ? void 0 : external_data.image });
                                result.push(nftAsset);
                            });
                        }
                    }
                }
                return result;
            }, []);
        });
    }
}
exports.CovalentNftProvider = CovalentNftProvider;
//# sourceMappingURL=CovalentNftProvider.js.map