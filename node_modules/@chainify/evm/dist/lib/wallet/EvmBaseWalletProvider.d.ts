import { Chain, Wallet } from '@chainify/client';
import { AddressType, Asset, BigNumber, FeeType, NamingProvider, Network, Transaction } from '@chainify/types';
import { Signer } from '@ethersproject/abstract-signer';
import { BaseProvider, TransactionRequest as EthersTxRequest } from '@ethersproject/providers';
import { EthereumTransactionRequest, EthersTransactionResponse } from '../types';
export declare abstract class EvmBaseWalletProvider<Provider extends BaseProvider, S extends Signer = Signer> extends Wallet<Provider, S> {
    protected signer: S;
    constructor(chainProvider?: Chain<Provider>, namingProvider?: NamingProvider);
    getSigner(): S;
    setSigner(signer: S): void;
    signMessage(message: string, _from: AddressType): Promise<string>;
    sendTransaction(txRequest: EthereumTransactionRequest): Promise<Transaction<EthersTransactionResponse>>;
    sendBatchTransaction(txRequests: EthereumTransactionRequest[]): Promise<Transaction<EthersTransactionResponse>[]>;
    sendSweepTransaction(address: AddressType, asset: Asset, fee?: FeeType): Promise<Transaction<any>>;
    updateTransactionFee(tx: string | Transaction<EthersTransactionResponse>, newFee: FeeType): Promise<Transaction<EthersTransactionResponse>>;
    getBalance(assets: Asset[]): Promise<BigNumber[]>;
    getConnectedNetwork(): Promise<Network>;
    estimateGas(txRequest: EthersTxRequest): Promise<import("ethers").BigNumber>;
}
