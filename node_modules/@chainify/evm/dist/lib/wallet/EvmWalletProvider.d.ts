import { Chain } from '@chainify/client';
import { Address, NamingProvider, Network, WalletOptions } from '@chainify/types';
import { StaticJsonRpcProvider } from '@ethersproject/providers';
import { Wallet as EthersWallet } from '@ethersproject/wallet';
import { SignTypedMessageType } from '../types';
import { EvmBaseWalletProvider } from './EvmBaseWalletProvider';
export declare class EvmWalletProvider extends EvmBaseWalletProvider<StaticJsonRpcProvider, EthersWallet> {
    private _wallet;
    private _walletOptions;
    constructor(walletOptions: WalletOptions, chainProvider?: Chain<StaticJsonRpcProvider>, namingProvider?: NamingProvider);
    getAddress(): Promise<Address>;
    signTypedData({ data, from, version }: SignTypedMessageType): Promise<string>;
    getUnusedAddress(): Promise<Address>;
    getUsedAddresses(): Promise<Address[]>;
    getAddresses(): Promise<Address[]>;
    exportPrivateKey(): Promise<string>;
    isWalletAvailable(): Promise<boolean>;
    canUpdateFee(): boolean;
    protected onChainProviderUpdate(chainProvider: Chain<StaticJsonRpcProvider, Network>): void;
}
