"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmWalletProvider = void 0;
const types_1 = require("@chainify/types");
const utils_1 = require("@chainify/utils");
const wallet_1 = require("@ethersproject/wallet");
const eth_sig_util_1 = require("@metamask/eth-sig-util");
const EvmBaseWalletProvider_1 = require("./EvmBaseWalletProvider");
class EvmWalletProvider extends EvmBaseWalletProvider_1.EvmBaseWalletProvider {
    constructor(walletOptions, chainProvider, namingProvider) {
        super(chainProvider, namingProvider);
        this._walletOptions = walletOptions;
        this._wallet = wallet_1.Wallet.fromMnemonic(walletOptions.mnemonic, walletOptions.derivationPath);
        if (chainProvider) {
            this._wallet = this._wallet.connect(chainProvider.getProvider());
        }
        this.signer = this._wallet;
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const name = this.getNamingProvider() ? yield this.getNamingProvider().lookupAddress(this._wallet.address) : null;
            return new types_1.Address({
                address: this._wallet.address,
                derivationPath: this._walletOptions.derivationPath,
                publicKey: this._wallet.publicKey,
                name,
            });
        });
    }
    signTypedData({ data, from, version }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!data) {
                throw new Error(`Undefined data - message required to sign typed data.`);
            }
            if (!from) {
                throw new Error(`Undefined address - from address required to sign typed data.`);
            }
            if (!(0, utils_1.compare)(from, this.signer.address)) {
                throw new Error(`Non-matching address - from address does not match the signer`);
            }
            return (0, eth_sig_util_1.signTypedData)({
                privateKey: Buffer.from((0, utils_1.remove0x)(this.signer.privateKey), 'hex'),
                data,
                version: version || eth_sig_util_1.SignTypedDataVersion.V1,
            });
        });
    }
    getUnusedAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getAddress();
        });
    }
    getUsedAddresses() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getAddresses();
        });
    }
    getAddresses() {
        return __awaiter(this, void 0, void 0, function* () {
            const address = yield this.getAddress();
            return [address];
        });
    }
    exportPrivateKey() {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, utils_1.remove0x)(this._wallet.privateKey);
        });
    }
    isWalletAvailable() {
        return __awaiter(this, void 0, void 0, function* () {
            return Boolean(this.getAddress());
        });
    }
    canUpdateFee() {
        return true;
    }
    onChainProviderUpdate(chainProvider) {
        this._wallet = this._wallet.connect(chainProvider.getProvider());
    }
}
exports.EvmWalletProvider = EvmWalletProvider;
//# sourceMappingURL=EvmWalletProvider.js.map