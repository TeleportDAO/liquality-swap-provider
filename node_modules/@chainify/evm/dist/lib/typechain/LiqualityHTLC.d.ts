import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";
export declare namespace ILiqualityHTLC {
    type HTLCDataStruct = {
        amount: BigNumberish;
        expiration: BigNumberish;
        secretHash: BytesLike;
        tokenAddress: string;
        refundAddress: string;
        recipientAddress: string;
    };
    type HTLCDataStructOutput = [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
    ] & {
        amount: BigNumber;
        expiration: BigNumber;
        secretHash: string;
        tokenAddress: string;
        refundAddress: string;
        recipientAddress: string;
    };
}
export interface LiqualityHTLCInterface extends utils.Interface {
    contractName: "LiqualityHTLC";
    functions: {
        "claim(bytes32,bytes32)": FunctionFragment;
        "htlcs(bytes32)": FunctionFragment;
        "initiate((uint256,uint256,bytes32,address,address,address))": FunctionFragment;
        "refund(bytes32)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "claim", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "htlcs", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "initiate", values: [ILiqualityHTLC.HTLCDataStruct]): string;
    encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "htlcs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initiate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
    events: {
        "Claim(bytes32,bytes32)": EventFragment;
        "Initiate(bytes32,tuple)": EventFragment;
        "Refund(bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initiate"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
}
export declare type ClaimEvent = TypedEvent<[
    string,
    string
], {
    id: string;
    secret: string;
}>;
export declare type ClaimEventFilter = TypedEventFilter<ClaimEvent>;
export declare type InitiateEvent = TypedEvent<[
    string,
    ILiqualityHTLC.HTLCDataStructOutput
], {
    id: string;
    htlc: ILiqualityHTLC.HTLCDataStructOutput;
}>;
export declare type InitiateEventFilter = TypedEventFilter<InitiateEvent>;
export declare type RefundEvent = TypedEvent<[string], {
    id: string;
}>;
export declare type RefundEventFilter = TypedEventFilter<RefundEvent>;
export interface LiqualityHTLC extends BaseContract {
    contractName: "LiqualityHTLC";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: LiqualityHTLCInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        claim(id: BytesLike, secret: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        htlcs(arg0: BytesLike, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            string,
            string,
            string,
            string
        ] & {
            amount: BigNumber;
            expiration: BigNumber;
            secretHash: string;
            tokenAddress: string;
            refundAddress: string;
            recipientAddress: string;
        }>;
        initiate(htlc: ILiqualityHTLC.HTLCDataStruct, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        refund(id: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    claim(id: BytesLike, secret: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    htlcs(arg0: BytesLike, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
    ] & {
        amount: BigNumber;
        expiration: BigNumber;
        secretHash: string;
        tokenAddress: string;
        refundAddress: string;
        recipientAddress: string;
    }>;
    initiate(htlc: ILiqualityHTLC.HTLCDataStruct, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    refund(id: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        claim(id: BytesLike, secret: BytesLike, overrides?: CallOverrides): Promise<void>;
        htlcs(arg0: BytesLike, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            string,
            string,
            string,
            string
        ] & {
            amount: BigNumber;
            expiration: BigNumber;
            secretHash: string;
            tokenAddress: string;
            refundAddress: string;
            recipientAddress: string;
        }>;
        initiate(htlc: ILiqualityHTLC.HTLCDataStruct, overrides?: CallOverrides): Promise<string>;
        refund(id: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Claim(bytes32,bytes32)"(id?: BytesLike | null, secret?: null): ClaimEventFilter;
        Claim(id?: BytesLike | null, secret?: null): ClaimEventFilter;
        "Initiate(bytes32,tuple)"(id?: null, htlc?: null): InitiateEventFilter;
        Initiate(id?: null, htlc?: null): InitiateEventFilter;
        "Refund(bytes32)"(id?: BytesLike | null): RefundEventFilter;
        Refund(id?: BytesLike | null): RefundEventFilter;
    };
    estimateGas: {
        claim(id: BytesLike, secret: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        htlcs(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        initiate(htlc: ILiqualityHTLC.HTLCDataStruct, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        refund(id: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        claim(id: BytesLike, secret: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        htlcs(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initiate(htlc: ILiqualityHTLC.HTLCDataStruct, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        refund(id: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
