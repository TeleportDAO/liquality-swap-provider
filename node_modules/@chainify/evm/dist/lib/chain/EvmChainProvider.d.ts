import { Chain, Fee } from '@chainify/client';
import { AddressType, Asset, BigNumber, Block, FeeDetails, Network, TokenDetails, Transaction } from '@chainify/types';
import { StaticJsonRpcProvider } from '@ethersproject/providers';
import { EthersBlock, EthersBlockWithTransactions, EthersTransactionResponse } from '../types';
import { EvmMulticallProvider } from './EvmMulticallProvider';
/**
 * Represents a connection to any EVM network.
 * Used to fetch chain specific data like blocks, transactions, balances and fees. It uses {@link https://docs.ethers.io/v5/api | ethersjs}
 *
 * Example:
 * ```typescript
 * import { providers } from 'ethers';
 * import { EvmNetworks, EvmChainProvider } from '@chainify/evm';
 *
 * const provider = new providers.StaticJsonRpcProvider(EvmNetworks.ganache.rpcUrl);
 * const chainProvider = new EvmChainProvider(EvmNetworks.ganache, provider, null);
 * ```
 * @public
 *
 */
export declare class EvmChainProvider extends Chain<StaticJsonRpcProvider> {
    multicall: EvmMulticallProvider;
    private _logger;
    /**
     * @param network - See {@link EvmNetworks}
     * @param provider - Instance of {@link https://docs.ethers.io/v5/api/providers/jsonrpc-provider/#StaticJsonRpcProvider | StaticJsonRpcProvider}
     * If not passed, it's created internally based on the `rpcUrl` from the network parameter.
     * @param feeProvider - Instance of {@link Fee}.
     * If not passed, it uses {@link https://docs.ethers.io/v5/api/providers/provider/#Provider-getFeeData | getFeeData} from the ethers provider.
     */
    constructor(network: Network, provider?: StaticJsonRpcProvider, feeProvider?: Fee, multicall?: boolean);
    /**
     * Used to fetch the name, decimals and symbols of an ERC20 token
     * @param asset - the address of the token contract
     * @returns
     */
    getTokenDetails(asset: string): Promise<TokenDetails>;
    /**
     * @param blockHash - the hash of the block
     * @returns
     * If `includeTx` is `false` the `_raw` object type is {@link https://docs.ethers.io/v5/api/providers/types/#providers-Block | EthersBlock}.
     *
     * If `includeTx` is `true`  the `_raw` object type {@link https://docs.ethers.io/v5/api/providers/types/#providers-BlockWithTransactions | BlockWithTransactions}
     * and `transactions` array with type {@link https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse | EthersTransactionResponse}
     */
    getBlockByHash(blockHash: string, includeTx?: boolean): Promise<Block<EthersBlock | EthersBlockWithTransactions, EthersTransactionResponse>>;
    /**
     * @param blockNumber - the number of the block. If not passed, it fetches the latest block
     * @returns
     * If `includeTx` is `false` the `_raw` object type is {@link https://docs.ethers.io/v5/api/providers/types/#providers-Block | EthersBlock}.
     *
     * If `includeTx` is `true`  the `_raw` object type {@link https://docs.ethers.io/v5/api/providers/types/#providers-BlockWithTransactions | BlockWithTransactions}
     * and `transactions` array with type {@link https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse | EthersTransactionResponse}
     */
    getBlockByNumber(blockNumber?: number, includeTx?: boolean): Promise<Block<EthersBlock | EthersBlockWithTransactions, EthersTransactionResponse>>;
    /**
     * @returns resolves with the latest block number
     */
    getBlockHeight(): Promise<number>;
    /**
     * @param txHash - the transaction hash prefixed with `0x`
     * @returns a transaction object with _raw object type
     * of {@link https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse | EthersTransactionResponse}
     */
    getTransactionByHash(txHash: string): Promise<Transaction<EthersTransactionResponse>>;
    /**
     * @param addresses - currently fetches the balances only for `addresses[0]`
     * @param assets - the list of assets
     * @returns - the balances of `assets` in the passed order
     */
    getBalance(addresses: AddressType[], assets: Asset[]): Promise<BigNumber[]>;
    /**
     * @param rawTransaction - the signed transaction
     * @returns the hash of the transaction
     */
    sendRawTransaction(rawTransaction: string): Promise<string>;
    /**
     * If the `feeProvider` is not defined, it fetches the fees from {@link https://docs.ethers.io/v5/api/providers/provider/#Provider-getFeeData | getFeeData}
     */
    getFees(): Promise<FeeDetails>;
    /**
     * @throws {@link UnsupportedMethodError} if the ethers provider doesn't support rpc calls
     */
    sendRpcRequest(method: string, params: any[]): Promise<any>;
    private _getBlock;
}
