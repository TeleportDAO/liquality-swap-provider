"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptimismChainProvider = void 0;
const types_1 = require("@chainify/types");
const utils_1 = require("../utils");
const EvmChainProvider_1 = require("./EvmChainProvider");
class OptimismChainProvider extends EvmChainProvider_1.EvmChainProvider {
    constructor(network, provider, feeOptions, multicall = true) {
        super(network, provider, null, multicall);
        this.feeOptions = {
            slowMultiplier: (feeOptions === null || feeOptions === void 0 ? void 0 : feeOptions.slowMultiplier) || 1,
            averageMultiplier: (feeOptions === null || feeOptions === void 0 ? void 0 : feeOptions.averageMultiplier) || 1.5,
            fastMultiplier: (feeOptions === null || feeOptions === void 0 ? void 0 : feeOptions.fastMultiplier) || 2,
        };
    }
    getProvider() {
        return this.provider;
    }
    setProvider(provider) {
        this.provider = provider;
    }
    getFees() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const l2FeeData = yield this.provider.getFeeData();
            const l2BaseGasPrice = new types_1.BigNumber((_a = l2FeeData.gasPrice) === null || _a === void 0 ? void 0 : _a.toString()).div(1e9).toNumber();
            const l2Fee = this.calculateFee(l2BaseGasPrice);
            const l1FeeData = yield this.provider.getL1GasPrice();
            const l1BaseGasPrice = new types_1.BigNumber(l1FeeData.toString()).div(1e9).toNumber();
            const l1Fee = this.calculateFee(l1BaseGasPrice);
            return {
                slow: { fee: l2Fee.slow, multilayerFee: { l1: l1Fee.slow, l2: l2Fee.slow } },
                average: { fee: l2Fee.average, multilayerFee: { l1: l1Fee.average, l2: l2Fee.average } },
                fast: { fee: l2Fee.fast, multilayerFee: { l1: l1Fee.fast, l2: l2Fee.fast } },
            };
        });
    }
    calculateFee(fee) {
        return {
            slow: (0, utils_1.calculateFee)(fee, this.feeOptions.slowMultiplier),
            average: (0, utils_1.calculateFee)(fee, this.feeOptions.averageMultiplier),
            fast: (0, utils_1.calculateFee)(fee, this.feeOptions.fastMultiplier),
        };
    }
}
exports.OptimismChainProvider = OptimismChainProvider;
//# sourceMappingURL=OptimismChainProvider.js.map