"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmMulticallProvider = void 0;
const types_1 = require("@chainify/types");
const abi_1 = require("@ethersproject/abi");
const typechain_1 = require("../typechain");
class EvmMulticallProvider {
    // https://github.com/mds1/multicall
    constructor(chainProvider, multicallAddress = '0xcA11bde05977b3631167028862bE2a173976CA11') {
        this._multicallAddress = multicallAddress;
        this._multicall = typechain_1.Multicall3__factory.connect(this._multicallAddress, chainProvider);
    }
    getMulticallAddress() {
        return this._multicallAddress;
    }
    buildBalanceCallData(asset, user) {
        if (asset.type === types_1.AssetTypes.native) {
            return {
                target: this._multicallAddress,
                abi: typechain_1.Multicall3__factory.abi,
                name: 'getEthBalance',
                params: [user],
            };
        }
        else {
            return {
                target: asset.contractAddress,
                abi: typechain_1.ERC20__factory.abi,
                name: 'balanceOf',
                params: [user],
            };
        }
    }
    setMulticallAddress(multicallAddress) {
        this._multicall = typechain_1.Multicall3__factory.connect(multicallAddress, this._multicall.provider);
        this._multicallAddress = multicallAddress;
    }
    getEthBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return new types_1.BigNumber((yield this._multicall.getEthBalance(address)).toString());
        });
    }
    getMultipleBalances(address, assets) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = address.toString();
            const result = yield this.multicall(assets.map((asset) => this.buildBalanceCallData(asset, user)));
            return result.map((r) => (r ? new types_1.BigNumber(r.toString()) : null));
        });
    }
    multicall(calls) {
        return __awaiter(this, void 0, void 0, function* () {
            const aggregatedCallData = calls.map((call) => {
                const callData = new abi_1.Interface(call.abi).encodeFunctionData(call.name, call.params);
                return { target: call.target, callData };
            });
            const result = yield this._multicall.callStatic.tryAggregate(false, aggregatedCallData);
            return calls.map((call, index) => {
                const [success, returnData] = result[index];
                if (success) {
                    const decodedResult = new abi_1.Interface(call.abi).decodeFunctionResult(call.name, returnData);
                    return decodedResult.length === 1 ? decodedResult[0] : decodedResult;
                }
                return null;
            });
        });
    }
}
exports.EvmMulticallProvider = EvmMulticallProvider;
//# sourceMappingURL=EvmMulticallProvider.js.map