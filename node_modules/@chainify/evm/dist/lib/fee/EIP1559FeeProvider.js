"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EIP1559FeeProvider = void 0;
const client_1 = require("@chainify/client");
const providers_1 = require("@ethersproject/providers");
const fee_suggestions_1 = require("@liquality/fee-suggestions");
const utils_1 = require("../utils");
class EIP1559FeeProvider extends client_1.Fee {
    constructor(provider, network) {
        super();
        if (typeof provider === 'string') {
            this.provider = new providers_1.StaticJsonRpcProvider(provider, network === null || network === void 0 ? void 0 : network.chainId);
        }
        else {
            this.provider = provider;
        }
    }
    getBaseFeeMultiplier(baseFeeTrend) {
        switch (baseFeeTrend) {
            case 2:
                return 1.6;
            case 1:
                return 1.4;
            case 0:
                return 1.2;
            default:
                return 1.1;
        }
    }
    calculateMaxFeePerGas(maxPriorityFeePerGas, potentialMaxFee) {
        return maxPriorityFeePerGas.gt(potentialMaxFee) ? potentialMaxFee.plus(maxPriorityFeePerGas) : potentialMaxFee;
    }
    getFees() {
        return __awaiter(this, void 0, void 0, function* () {
            const { maxPriorityFeeSuggestions, baseFeeSuggestion, currentBaseFee, baseFeeTrend, confirmationTimeByPriorityFee } = yield (0, fee_suggestions_1.suggestFees)(this.provider);
            const bigCurrentBaseFee = (0, utils_1.toGwei)(currentBaseFee);
            const bigBaseFeeSuggestion = (0, utils_1.toGwei)(baseFeeSuggestion);
            const slowMaxPriorityFeePerGas = (0, utils_1.toGwei)(confirmationTimeByPriorityFee[45]);
            const averageMaxPriorityFeePerGas = (0, utils_1.toGwei)(confirmationTimeByPriorityFee[30]);
            const fastMaxPriorityFeePerGas = (0, utils_1.toGwei)(baseFeeTrend === 2 ? maxPriorityFeeSuggestions.urgent : confirmationTimeByPriorityFee[15]);
            const multiplier = this.getBaseFeeMultiplier(baseFeeTrend);
            const potentialMaxFee = bigBaseFeeSuggestion.times(multiplier);
            const extra = {
                currentBaseFeePerGas: bigCurrentBaseFee.toNumber(),
                suggestedBaseFeePerGas: bigBaseFeeSuggestion.toNumber(),
                baseFeeTrend,
            };
            const fees = {
                slow: {
                    fee: Object.assign(Object.assign({}, extra), { maxFeePerGas: this.calculateMaxFeePerGas(slowMaxPriorityFeePerGas, potentialMaxFee).toNumber(), maxPriorityFeePerGas: slowMaxPriorityFeePerGas.toNumber() }),
                },
                average: {
                    fee: Object.assign(Object.assign({}, extra), { maxFeePerGas: this.calculateMaxFeePerGas(averageMaxPriorityFeePerGas, potentialMaxFee).toNumber(), maxPriorityFeePerGas: averageMaxPriorityFeePerGas.toNumber() }),
                },
                fast: {
                    fee: Object.assign(Object.assign({}, extra), { maxFeePerGas: this.calculateMaxFeePerGas(fastMaxPriorityFeePerGas, potentialMaxFee).toNumber(), maxPriorityFeePerGas: fastMaxPriorityFeePerGas.toNumber() }),
                },
            };
            return fees;
        });
    }
}
exports.EIP1559FeeProvider = EIP1559FeeProvider;
//# sourceMappingURL=EIP1559FeeProvider.js.map