"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcFeeProvider = void 0;
const client_1 = require("@chainify/client");
const types_1 = require("@chainify/types");
const providers_1 = require("@ethersproject/providers");
const utils_1 = require("../utils");
class RpcFeeProvider extends client_1.Fee {
    constructor(provider, feeOptions, network) {
        super();
        if (typeof provider === 'string') {
            this.provider = new providers_1.StaticJsonRpcProvider(provider, network === null || network === void 0 ? void 0 : network.chainId);
        }
        else {
            this.provider = provider;
        }
        this.feeOptions = {
            slowMultiplier: (feeOptions === null || feeOptions === void 0 ? void 0 : feeOptions.slowMultiplier) || 1,
            averageMultiplier: (feeOptions === null || feeOptions === void 0 ? void 0 : feeOptions.averageMultiplier) || 1.5,
            fastMultiplier: (feeOptions === null || feeOptions === void 0 ? void 0 : feeOptions.fastMultiplier) || 2,
        };
    }
    getFees() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const feeData = yield this.provider.getFeeData();
            const baseGasPrice = new types_1.BigNumber((_a = feeData.gasPrice) === null || _a === void 0 ? void 0 : _a.toString()).div(1e9).toNumber();
            return {
                slow: { fee: (0, utils_1.calculateFee)(baseGasPrice, this.feeOptions.slowMultiplier) },
                average: { fee: (0, utils_1.calculateFee)(baseGasPrice, this.feeOptions.averageMultiplier) },
                fast: { fee: (0, utils_1.calculateFee)(baseGasPrice, this.feeOptions.fastMultiplier) },
            };
        });
    }
}
exports.RpcFeeProvider = RpcFeeProvider;
//# sourceMappingURL=RpcFeeProvider.js.map