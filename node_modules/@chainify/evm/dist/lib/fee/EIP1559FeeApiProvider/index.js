"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EIP1559FeeApiProvider = void 0;
const client_1 = require("@chainify/client");
const errors_1 = require("@chainify/errors");
const networks_1 = require("../../networks");
const ethereum_1 = require("./ethereum");
const polygon_1 = require("./polygon");
class EIP1559FeeApiProvider extends client_1.Fee {
    constructor(url, chainId) {
        super();
        this._httpClient = new client_1.HttpClient({ baseURL: url });
        this._chainId = chainId;
    }
    getFees() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._httpClient.nodeGet('/');
            const fee = this.parseFeeResponse(result);
            return fee;
        });
    }
    parseFeeResponse(response) {
        switch (this._chainId) {
            case networks_1.EvmNetworks.ethereum_mainnet.chainId: {
                return new ethereum_1.EthereumFeeParser().parse(response);
            }
            case networks_1.EvmNetworks.polygon_mainnet.chainId: {
                return new polygon_1.PolygonFeeParser().parse(response);
            }
            default: {
                throw new errors_1.UnsupportedMethodError(`EIP1559 not supported for ${this._chainId}`);
            }
        }
    }
}
exports.EIP1559FeeApiProvider = EIP1559FeeApiProvider;
//# sourceMappingURL=index.js.map