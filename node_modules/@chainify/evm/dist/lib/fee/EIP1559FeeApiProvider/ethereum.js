"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumFeeParser = void 0;
const errors_1 = require("@chainify/errors");
const utils_1 = require("@chainify/utils");
class EthereumFeeParser {
    parse(response) {
        if (response.code === 200) {
            const suggestedBaseFeePerGas = Number(response.raw.etherscan.suggestBaseFee);
            return {
                slow: {
                    fee: {
                        maxFeePerGas: Number(response.raw.etherscan.SafeGasPrice),
                        maxPriorityFeePerGas: utils_1.Math.sub(response.raw.etherscan.SafeGasPrice, suggestedBaseFeePerGas).toNumber(),
                        suggestedBaseFeePerGas,
                    },
                },
                average: {
                    fee: {
                        maxFeePerGas: Number(response.raw.etherscan.ProposeGasPrice),
                        maxPriorityFeePerGas: utils_1.Math.sub(response.raw.etherscan.ProposeGasPrice, suggestedBaseFeePerGas).toNumber(),
                        suggestedBaseFeePerGas,
                    },
                },
                fast: {
                    fee: {
                        maxFeePerGas: Number(response.raw.etherscan.FastGasPrice),
                        maxPriorityFeePerGas: utils_1.Math.sub(response.raw.etherscan.FastGasPrice, suggestedBaseFeePerGas).toNumber(),
                        suggestedBaseFeePerGas,
                    },
                },
            };
        }
        else {
            throw new errors_1.NodeError('Could not fetch Ethereum fee data', response);
        }
    }
}
exports.EthereumFeeParser = EthereumFeeParser;
//# sourceMappingURL=ethereum.js.map