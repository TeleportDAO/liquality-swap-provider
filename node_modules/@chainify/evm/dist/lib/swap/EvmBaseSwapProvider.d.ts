import { Swap } from '@chainify/client';
import { FeeType, SwapParams, Transaction } from '@chainify/types';
import { Signer } from '@ethersproject/abstract-signer';
import { BaseProvider, Log } from '@ethersproject/providers';
import { LiqualityHTLC } from '../typechain';
import { ClaimEvent, InitiateEvent, RefundEvent } from '../typechain/LiqualityHTLC';
import { EthersTransactionResponse, EvmSwapOptions } from '../types';
import { EvmBaseWalletProvider } from '../wallet/EvmBaseWalletProvider';
export declare abstract class EvmBaseSwapProvider extends Swap<BaseProvider, Signer, EvmBaseWalletProvider<BaseProvider>> {
    protected walletProvider: EvmBaseWalletProvider<BaseProvider>;
    protected contract: LiqualityHTLC;
    protected swapOptions: EvmSwapOptions;
    constructor(swapOptions?: EvmSwapOptions, walletProvider?: EvmBaseWalletProvider<BaseProvider>);
    initiateSwap(swapParams: SwapParams, fee: FeeType): Promise<Transaction<EthersTransactionResponse>>;
    claimSwap(swapParams: SwapParams, initTxHash: string, secret: string, fee: FeeType): Promise<Transaction<EthersTransactionResponse>>;
    refundSwap(swapParams: SwapParams, initTxHash: string, fee: FeeType): Promise<Transaction<EthersTransactionResponse>>;
    getSwapSecret(claimTx: string): Promise<string>;
    canUpdateFee(): boolean;
    updateTransactionFee(_tx: string | Transaction<any>, _newFee: FeeType): Promise<Transaction>;
    protected onWalletProviderUpdate(wallet: EvmBaseWalletProvider<BaseProvider, Signer>): void;
    protected doesTransactionMatchInitiation(swapParams: SwapParams, transaction: Transaction<InitiateEvent>): boolean;
    protected tryParseLog(log: Log): import("@ethersproject/abi").LogDescription;
    abstract findInitiateSwapTransaction(swapParams: SwapParams, _blockNumber?: number): Promise<Transaction<InitiateEvent>>;
    abstract findRefundSwapTransaction(swapParams: SwapParams, initTxHash: string, blockNumber?: number): Promise<Transaction<RefundEvent>>;
    abstract findClaimSwapTransaction(swapParams: SwapParams, initTxHash: string, _blockNumber?: number): Promise<Transaction<ClaimEvent>>;
}
