import { BigNumber, BigNumberish, Block, FeeType, SwapParams, Transaction } from '@chainify/types';
import { BigNumber as EthersBigNumber } from '@ethersproject/bignumber';
import { TransactionReceipt, TransactionRequest } from '@ethersproject/providers';
import { ILiqualityHTLC } from './typechain';
import { EthereumTransactionRequest, EthersBlock, EthersBlockWithTransactions, EthersPopulatedTransaction, EthersTransactionResponse } from './types';
export declare function toEthereumTxRequest(tx: EthersPopulatedTransaction, fee: FeeType): EthereumTransactionRequest;
export declare function parseSwapParams(tx: SwapParams): ILiqualityHTLC.HTLCDataStruct;
export declare function parseTxRequest(request: EthereumTransactionRequest | TransactionRequest): TransactionRequest;
export declare function parseTxResponse(response: EthersTransactionResponse, receipt?: TransactionReceipt): Transaction<EthersTransactionResponse>;
export declare function parseBlockResponse(block: EthersBlock | EthersBlockWithTransactions, transactions?: EthersTransactionResponse[]): Block<EthersBlock | EthersBlockWithTransactions, EthersTransactionResponse>;
export declare function generateId(htlcData: ILiqualityHTLC.HTLCDataStruct, blockTimestamp: number): string;
export declare function extractFeeData(fee: FeeType): {
    gasPrice: number;
} | {
    maxFeePerGas: number;
    maxPriorityFeePerGas: number;
    baseFeeTrend?: number;
    currentBaseFeePerGas?: number;
    suggestedBaseFeePerGas?: number;
    gasPrice?: undefined;
};
export declare function toGwei(wei: BigNumber | number | string): BigNumber;
export declare function fromGwei(gwei: BigNumber | number | string): BigNumber;
export declare function calculateFee(base: BigNumber | number | string, multiplier: number): number;
export declare function calculateGasMargin(value: BigNumberish, margin?: number): EthersBigNumber;
