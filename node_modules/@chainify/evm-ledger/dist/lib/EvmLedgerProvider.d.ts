import { Chain } from '@chainify/client';
import { EvmBaseWalletProvider } from '@chainify/evm';
import { Address, Network } from '@chainify/types';
import { StaticJsonRpcProvider } from '@ethersproject/providers';
import { EvmLedgerSigner } from './EvmLedgerSigner';
import { EvmLedgerCreateOptions } from './types';
export declare class EvmLedgerProvider extends EvmBaseWalletProvider<StaticJsonRpcProvider, EvmLedgerSigner> {
    private _ledgerSigner;
    private _ledgerProvider;
    private _derivationPath;
    private _addressCache;
    constructor(options: EvmLedgerCreateOptions, chainProvider?: Chain<StaticJsonRpcProvider>);
    protected onChainProviderUpdate(chainProvider: Chain<StaticJsonRpcProvider, Network>): void;
    getAddress(): Promise<Address>;
    getUnusedAddress(): Promise<Address>;
    getUsedAddresses(): Promise<Address[]>;
    getAddresses(): Promise<Address[]>;
    getLedgerAddress(): Promise<{
        publicKey: string;
        address: string;
        chainCode?: string;
    }>;
    exportPrivateKey(): Promise<string>;
    isWalletAvailable(): Promise<boolean>;
    getConnectedNetwork(): Promise<Network>;
    canUpdateFee(): boolean;
}
