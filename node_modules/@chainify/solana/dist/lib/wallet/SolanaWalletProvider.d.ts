import { Wallet } from '@chainify/client';
import { Address, AddressType, Asset, BigNumber, FeeType, Network, Transaction, TransactionRequest, WalletOptions } from '@chainify/types';
import { Connection, Keypair } from '@solana/web3.js';
import { SolanaChainProvider } from '../';
import { SolanaTxRequest } from '../types';
export declare class SolanaWalletProvider extends Wallet<Connection, Promise<Keypair>> {
    private _signer;
    private _mnemonic;
    private _derivationPath;
    private _addressCache;
    constructor(walletOptions: WalletOptions, chainProvider?: SolanaChainProvider);
    getConnectedNetwork(): Promise<Network>;
    getSigner(): Promise<Keypair>;
    getAddress(): Promise<Address>;
    getUnusedAddress(): Promise<Address>;
    getUsedAddresses(): Promise<Address[]>;
    getAddresses(): Promise<Address[]>;
    signMessage(message: string, _from: AddressType): Promise<string>;
    sendTransaction(txRequest: SolanaTxRequest): Promise<Transaction>;
    sendBatchTransaction(txRequests: TransactionRequest[]): Promise<Transaction[]>;
    sendSweepTransaction(address: AddressType, asset: Asset): Promise<Transaction>;
    updateTransactionFee(_tx: string | Transaction<any>, _newFee: FeeType): Promise<Transaction<any>>;
    getBalance(assets: Asset[]): Promise<BigNumber[]>;
    exportPrivateKey(): Promise<string>;
    isWalletAvailable(): Promise<boolean>;
    canUpdateFee(): boolean;
    protected onChainProviderUpdate(_chainProvider: SolanaChainProvider): void;
    private mnemonicToSeed;
    private setSigner;
}
