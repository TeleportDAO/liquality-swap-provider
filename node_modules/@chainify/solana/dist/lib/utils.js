"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTransactionResponse = exports.parseBlockResponse = void 0;
const types_1 = require("@chainify/types");
const utils_1 = require("@chainify/utils");
function parseBlockResponse(data) {
    return {
        hash: data.blockhash,
        timestamp: data.blockTime,
        number: data.parentSlot + 1,
        parentHash: data.previousBlockhash,
        _raw: data,
    };
}
exports.parseBlockResponse = parseBlockResponse;
function parseTransactionResponse(data, signatures) {
    var _a, _b;
    const txInstructions = data.transaction.message.instructions;
    const result = {
        hash: data.transaction.signatures[0],
        value: 0,
        _raw: data,
        fee: (_a = data.meta) === null || _a === void 0 ? void 0 : _a.fee,
    };
    if (signatures) {
        // If the confirmations are null then the tx is rooted i.e. finalized by a supermajority of the cluster
        result.confirmations = signatures.value.confirmations === null ? 10 : signatures.value.confirmations;
        // Error if transaction failed, null if transaction succeeded.
        result.status = signatures.value.err === null ? types_1.TxStatus.Success : types_1.TxStatus.Failed;
    }
    for (const instruction of txInstructions) {
        switch (instruction.program) {
            case 'system': {
                // SOL transfers
                if (((_b = instruction.parsed) === null || _b === void 0 ? void 0 : _b.type) === 'transfer') {
                    const parsedInfo = instruction.parsed.info;
                    if (parsedInfo) {
                        result.value = utils_1.Math.add(parsedInfo.lamports || 0, result.value).toNumber();
                        result.from = parsedInfo.source;
                        result.to = parsedInfo.destination;
                        result.fee;
                    }
                }
                break;
            }
            // SPL transfers
            case 'spl-token': {
                break;
            }
        }
    }
    return result;
}
exports.parseTransactionResponse = parseTransactionResponse;
//# sourceMappingURL=utils.js.map