"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupByChain = exports.getAllowanceViaMulticall = exports.setApproval = exports.getApproved = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var ethers_1 = require("ethers");
var ChainsService_1 = __importDefault(require("../services/ChainsService"));
var types_1 = require("../types");
var errors_1 = require("../utils/errors");
var multicall_1 = require("../utils/multicall");
var getApproved = function (signer, tokenAddress, contractAddress) { return __awaiter(void 0, void 0, void 0, function () {
    var signerAddress, erc20, approved, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, signer.getAddress()];
            case 1:
                signerAddress = _a.sent();
                erc20 = new ethers_1.Contract(tokenAddress, types_1.ERC20_ABI, signer);
                _a.label = 2;
            case 2:
                _a.trys.push([2, 4, , 5]);
                return [4 /*yield*/, erc20.allowance(signerAddress, contractAddress)];
            case 3:
                approved = _a.sent();
                return [2 /*return*/, new bignumber_js_1.default(approved.toString())];
            case 4:
                e_1 = _a.sent();
                return [2 /*return*/, new bignumber_js_1.default(0)];
            case 5: return [2 /*return*/];
        }
    });
}); };
exports.getApproved = getApproved;
var setApproval = function (signer, tokenAddress, contractAddress, amount) {
    var erc20 = new ethers_1.Contract(tokenAddress, types_1.ERC20_ABI, signer);
    return erc20.approve(contractAddress, amount);
};
exports.setApproval = setApproval;
var getAllowanceViaMulticall = function (signer, chainId, tokenData) { return __awaiter(void 0, void 0, void 0, function () {
    var chainsService, chain, ownerAddress, calls, result, parsedResult;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                chainsService = ChainsService_1.default.getInstance();
                return [4 /*yield*/, chainsService.getChainById(chainId)];
            case 1:
                chain = _a.sent();
                if (!chain.multicallAddress) {
                    throw new errors_1.ServerError("No multicall address configured for chainId ".concat(chainId, "."));
                }
                return [4 /*yield*/, signer.getAddress()];
            case 2:
                ownerAddress = _a.sent();
                calls = [];
                tokenData.map(function (_a) {
                    var token = _a.token, approvalAddress = _a.approvalAddress;
                    calls.push({
                        address: token.address,
                        name: 'allowance',
                        params: [ownerAddress, approvalAddress],
                    });
                });
                return [4 /*yield*/, (0, multicall_1.fetchDataUsingMulticall)(calls, types_1.ERC20_ABI, chainId, chain.multicallAddress)];
            case 3:
                result = _a.sent();
                if (!result.length) {
                    throw new errors_1.ServerError("Couldn't load allowance from chainId ".concat(chainId, " using multicall."));
                }
                parsedResult = result.map(function (_a) {
                    var _b;
                    var data = _a.data;
                    return ({
                        approvalAmount: (_b = data) !== null && _b !== void 0 ? _b : new bignumber_js_1.default(0),
                    });
                });
                return [2 /*return*/, tokenData.map(function (_a, i) {
                        var token = _a.token, approvalAddress = _a.approvalAddress;
                        return ({
                            token: token,
                            approvalAddress: approvalAddress,
                            approvedAmount: parsedResult[i].approvalAmount,
                        });
                    })];
        }
    });
}); };
exports.getAllowanceViaMulticall = getAllowanceViaMulticall;
var groupByChain = function (tokenDataList) {
    // group by chain
    var tokenDataByChain = {};
    tokenDataList.forEach(function (tokenData) {
        if (!tokenDataByChain[tokenData.token.chainId]) {
            tokenDataByChain[tokenData.token.chainId] = [];
        }
        tokenDataByChain[tokenData.token.chainId].push(tokenData);
    });
    return tokenDataByChain;
};
exports.groupByChain = groupByChain;
