"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.revokeTokenApproval = exports.approveToken = exports.bulkGetTokenApproval = exports.getTokenApproval = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var ethers_1 = require("ethers");
var helpers_1 = require("../helpers");
var utils_1 = require("../utils/utils");
var utils_2 = require("./utils");
var getTokenApproval = function (signer, token, approvalAddress) { return __awaiter(void 0, void 0, void 0, function () {
    var approved;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                // native token don't need approval
                if ((0, utils_1.isNativeTokenAddress)(token.address)) {
                    return [2 /*return*/];
                }
                return [4 /*yield*/, (0, utils_2.getApproved)(signer, token.address, approvalAddress)];
            case 1:
                approved = _a.sent();
                return [2 /*return*/, approved.toString()];
        }
    });
}); };
exports.getTokenApproval = getTokenApproval;
var bulkGetTokenApproval = function (signer, tokenData) { return __awaiter(void 0, void 0, void 0, function () {
    var filteredTokenData, tokenDataByChain, approvalPromises, approvalsByChain, approvals;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                filteredTokenData = tokenData.filter(function (_a) {
                    var token = _a.token;
                    return !(0, utils_1.isNativeTokenAddress)(token.address);
                });
                tokenDataByChain = (0, utils_2.groupByChain)(filteredTokenData);
                approvalPromises = Object.keys(tokenDataByChain).map(function (chainId) { return __awaiter(void 0, void 0, void 0, function () {
                    var parsedChainId;
                    return __generator(this, function (_a) {
                        parsedChainId = Number.parseInt(chainId);
                        // get allowances for current chain and token list
                        return [2 /*return*/, (0, utils_2.getAllowanceViaMulticall)(signer, parsedChainId, tokenDataByChain[parsedChainId])];
                    });
                }); });
                return [4 /*yield*/, Promise.all(approvalPromises)];
            case 1:
                approvalsByChain = _a.sent();
                approvals = approvalsByChain.flat();
                return [2 /*return*/, tokenData.map(function (_a) {
                        var token = _a.token;
                        // native token don't need approval
                        if ((0, utils_1.isNativeTokenAddress)(token.address)) {
                            return { token: token, approval: undefined };
                        }
                        var approved = approvals.find(function (approval) {
                            return (0, helpers_1.isSameToken)(approval.token, token);
                        });
                        return { token: token, approval: approved === null || approved === void 0 ? void 0 : approved.approvedAmount.toString() };
                    })];
        }
    });
}); };
exports.bulkGetTokenApproval = bulkGetTokenApproval;
var approveToken = function (_a) {
    var signer = _a.signer, token = _a.token, approvalAddress = _a.approvalAddress, amount = _a.amount, _b = _a.infiniteApproval, infiniteApproval = _b === void 0 ? false : _b;
    return __awaiter(void 0, void 0, void 0, function () {
        var approvedAmount, approvalAmount, approveTx;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    // native token don't need approval
                    if ((0, utils_1.isNativeTokenAddress)(token.address)) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, (0, utils_2.getApproved)(signer, token.address, approvalAddress)];
                case 1:
                    approvedAmount = _c.sent();
                    if (!new bignumber_js_1.default(amount).gt(approvedAmount)) return [3 /*break*/, 4];
                    approvalAmount = infiniteApproval
                        ? ethers_1.constants.MaxUint256.toString()
                        : amount;
                    return [4 /*yield*/, (0, utils_2.setApproval)(signer, token.address, approvalAddress, approvalAmount)];
                case 2:
                    approveTx = _c.sent();
                    return [4 /*yield*/, approveTx.wait()];
                case 3:
                    _c.sent();
                    _c.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    });
};
exports.approveToken = approveToken;
var revokeTokenApproval = function (_a) {
    var signer = _a.signer, token = _a.token, approvalAddress = _a.approvalAddress;
    return __awaiter(void 0, void 0, void 0, function () {
        var approvedAmount, approveTx;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    // native token don't need approval
                    if ((0, utils_1.isNativeTokenAddress)(token.address)) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, (0, utils_2.getApproved)(signer, token.address, approvalAddress)];
                case 1:
                    approvedAmount = _b.sent();
                    if (!!approvedAmount.isZero()) return [3 /*break*/, 4];
                    return [4 /*yield*/, (0, utils_2.setApproval)(signer, token.address, approvalAddress, '0')];
                case 2:
                    approveTx = _b.sent();
                    return [4 /*yield*/, approveTx.wait()];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    });
};
exports.revokeTokenApproval = revokeTokenApproval;
