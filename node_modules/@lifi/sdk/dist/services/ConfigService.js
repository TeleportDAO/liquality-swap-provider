"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var DefaultExecutionSettings = {
    /* eslint-disable-next-line @typescript-eslint/no-empty-function */
    updateCallback: function () { },
    switchChainHook: function () { return Promise.resolve(undefined); },
    infiniteApproval: false,
};
var ConfigService = /** @class */ (function () {
    function ConfigService() {
        var _this = this;
        this.resolveSetupPromise = undefined;
        /**
         * This call immediately returns the current config. It does not make sure that all chain data is already loaded
         * Use this if you need access to basic information like API urls or settings
         */
        this.getConfig = function () {
            return _this.config;
        };
        /**
         * This call waits for all setup promises to be done.
         * Use this if you need access to chain data (RPCs or multicalls)
         */
        this.getConfigAsync = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setupPromise];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.config];
                }
            });
        }); };
        this.updateConfig = function (configUpdate) {
            // API
            _this.config.apiUrl = configUpdate.apiUrl || _this.config.apiUrl;
            // RPCS
            _this.config.rpcs = Object.assign(_this.config.rpcs, configUpdate.rpcs);
            // MULTICALL
            _this.config.multicallAddresses = Object.assign(_this.config.multicallAddresses, configUpdate.multicallAddresses);
            // SETTINGS
            _this.config.defaultExecutionSettings = Object.assign(_this.config.defaultExecutionSettings, configUpdate.defaultExecutionSettings);
            // OPTIONS
            _this.config.defaultRouteOptions = Object.assign(_this.config.defaultRouteOptions, configUpdate.defaultRouteOptions);
            return _this.config;
        };
        this.updateChains = function (chains) {
            var _a;
            for (var _i = 0, chains_1 = chains; _i < chains_1.length; _i++) {
                var chain = chains_1[_i];
                var chainId = chain.id;
                // set RPCs if they were not configured by the user before
                if (!_this.config.rpcs[chainId].length) {
                    _this.config.rpcs[chainId] = chain.metamask.rpcUrls;
                }
                // set multicall addresses if they exist and were not configured by the user before
                if (chain.multicallAddress && !_this.config.multicallAddresses[chainId]) {
                    _this.config.multicallAddresses[chainId] = chain.multicallAddress;
                }
            }
            (_a = _this.resolveSetupPromise) === null || _a === void 0 ? void 0 : _a.call(_this);
            return _this.config;
        };
        this.config = ConfigService.getDefaultConfig();
        this.setupPromise = new Promise(function (resolve) {
            _this.resolveSetupPromise = resolve;
        });
    }
    ConfigService.chainIdToObject = function (val) {
        var result = {};
        var values = Object.values(types_1.ChainId);
        values.forEach(function (chainId) {
            if (typeof chainId !== 'string') {
                result[chainId] = val ? JSON.parse(JSON.stringify(val)) : val;
            }
        });
        return result;
    };
    ConfigService.getInstance = function () {
        if (!this.instance) {
            this.instance = new ConfigService();
        }
        return this.instance;
    };
    ConfigService.getDefaultConfig = function () {
        return {
            apiUrl: 'https://li.quest/v1/',
            rpcs: ConfigService.chainIdToObject([]),
            multicallAddresses: ConfigService.chainIdToObject(undefined),
            defaultExecutionSettings: DefaultExecutionSettings,
            defaultRouteOptions: {},
        };
    };
    return ConfigService;
}());
exports.default = ConfigService;
