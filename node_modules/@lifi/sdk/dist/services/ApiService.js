"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var typeguards_1 = require("../typeguards");
var errors_1 = require("../utils/errors");
var parseError_1 = require("../utils/parseError");
var ConfigService_1 = __importDefault(require("./ConfigService"));
var getPossibilities = function (request, options) { return __awaiter(void 0, void 0, void 0, function () {
    var configService, config, result, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!request) {
                    request = {};
                }
                configService = ConfigService_1.default.getInstance();
                config = configService.getConfig();
                // apply defaults
                request.bridges = request.bridges || config.defaultRouteOptions.bridges;
                request.exchanges = request.exchanges || config.defaultRouteOptions.exchanges;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, axios_1.default.post(config.apiUrl + 'advanced/possibilities', request, {
                        signal: options === null || options === void 0 ? void 0 : options.signal,
                    })];
            case 2:
                result = _a.sent();
                return [2 /*return*/, result.data];
            case 3:
                e_1 = _a.sent();
                throw (0, parseError_1.parseBackendError)(e_1);
            case 4: return [2 /*return*/];
        }
    });
}); };
var getToken = function (chain, token, options) { return __awaiter(void 0, void 0, void 0, function () {
    var configService, config, result, e_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!chain) {
                    throw new errors_1.ValidationError('Required parameter "chain" is missing.');
                }
                if (!token) {
                    throw new errors_1.ValidationError('Required parameter "token" is missing.');
                }
                configService = ConfigService_1.default.getInstance();
                config = configService.getConfig();
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, axios_1.default.get(config.apiUrl + 'token', {
                        params: {
                            chain: chain,
                            token: token,
                        },
                        signal: options === null || options === void 0 ? void 0 : options.signal,
                    })];
            case 2:
                result = _a.sent();
                return [2 /*return*/, result.data];
            case 3:
                e_2 = _a.sent();
                throw (0, parseError_1.parseBackendError)(e_2);
            case 4: return [2 /*return*/];
        }
    });
}); };
var getQuote = function (_a, options) {
    var fromChain = _a.fromChain, fromToken = _a.fromToken, fromAddress = _a.fromAddress, fromAmount = _a.fromAmount, toChain = _a.toChain, toToken = _a.toToken, toAddress = _a.toAddress, order = _a.order, slippage = _a.slippage, integrator = _a.integrator, referrer = _a.referrer, allowBridges = _a.allowBridges, denyBridges = _a.denyBridges, preferBridges = _a.preferBridges, allowExchanges = _a.allowExchanges, denyExchanges = _a.denyExchanges, preferExchanges = _a.preferExchanges;
    return __awaiter(void 0, void 0, void 0, function () {
        var configService, config, result, e_3;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!fromChain) {
                        throw new errors_1.ValidationError('Required parameter "fromChain" is missing.');
                    }
                    if (!fromToken) {
                        throw new errors_1.ValidationError('Required parameter "fromToken" is missing.');
                    }
                    if (!fromAddress) {
                        throw new errors_1.ValidationError('Required parameter "fromAddress" is missing.');
                    }
                    if (!fromAmount) {
                        throw new errors_1.ValidationError('Required parameter "fromAmount" is missing.');
                    }
                    if (!toChain) {
                        throw new errors_1.ValidationError('Required parameter "toChain" is missing.');
                    }
                    if (!toToken) {
                        throw new errors_1.ValidationError('Required parameter "toToken" is missing.');
                    }
                    configService = ConfigService_1.default.getInstance();
                    config = configService.getConfig();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, axios_1.default.get(config.apiUrl + 'quote', {
                            params: {
                                fromChain: fromChain,
                                toChain: toChain,
                                fromToken: fromToken,
                                toToken: toToken,
                                fromAddress: fromAddress,
                                toAddress: toAddress,
                                fromAmount: fromAmount,
                                order: order,
                                slippage: slippage,
                                integrator: integrator,
                                referrer: referrer,
                                allowBridges: allowBridges,
                                denyBridges: denyBridges,
                                preferBridges: preferBridges,
                                allowExchanges: allowExchanges,
                                denyExchanges: denyExchanges,
                                preferExchanges: preferExchanges,
                            },
                            signal: options === null || options === void 0 ? void 0 : options.signal,
                        })];
                case 2:
                    result = _b.sent();
                    return [2 /*return*/, result.data];
                case 3:
                    e_3 = _b.sent();
                    throw (0, parseError_1.parseBackendError)(e_3);
                case 4: return [2 /*return*/];
            }
        });
    });
};
var getStatus = function (_a, options) {
    var bridge = _a.bridge, fromChain = _a.fromChain, toChain = _a.toChain, txHash = _a.txHash;
    return __awaiter(void 0, void 0, void 0, function () {
        var configService, config, result, e_4;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (fromChain !== toChain && !bridge) {
                        throw new errors_1.ValidationError('Parameter "bridge" is required for cross chain transfers.');
                    }
                    if (!fromChain) {
                        throw new errors_1.ValidationError('Required parameter "fromChain" is missing.');
                    }
                    if (!toChain) {
                        throw new errors_1.ValidationError('Required parameter "toChain" is missing.');
                    }
                    if (!txHash) {
                        throw new errors_1.ValidationError('Required parameter "txHash" is missing.');
                    }
                    configService = ConfigService_1.default.getInstance();
                    config = configService.getConfig();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, axios_1.default.get(config.apiUrl + 'status', {
                            params: {
                                bridge: bridge,
                                fromChain: fromChain,
                                toChain: toChain,
                                txHash: txHash,
                            },
                            signal: options === null || options === void 0 ? void 0 : options.signal,
                        })];
                case 2:
                    result = _b.sent();
                    return [2 /*return*/, result.data];
                case 3:
                    e_4 = _b.sent();
                    throw (0, parseError_1.parseBackendError)(e_4);
                case 4: return [2 /*return*/];
            }
        });
    });
};
var getChains = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var configService, config, result, e_5;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                configService = ConfigService_1.default.getInstance();
                config = configService.getConfig();
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, axios_1.default.get(config.apiUrl + 'chains', {
                        signal: options === null || options === void 0 ? void 0 : options.signal,
                    })];
            case 2:
                result = _a.sent();
                return [2 /*return*/, result.data.chains];
            case 3:
                e_5 = _a.sent();
                throw (0, parseError_1.parseBackendError)(e_5);
            case 4: return [2 /*return*/];
        }
    });
}); };
var getRoutes = function (request, options) { return __awaiter(void 0, void 0, void 0, function () {
    var configService, config, result, e_6;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(0, typeguards_1.isRoutesRequest)(request)) {
                    throw new errors_1.ValidationError('Invalid routes request.');
                }
                configService = ConfigService_1.default.getInstance();
                config = configService.getConfig();
                // apply defaults
                request.options = __assign(__assign({}, config.defaultRouteOptions), request.options);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, axios_1.default.post(config.apiUrl + 'advanced/routes', request, {
                        signal: options === null || options === void 0 ? void 0 : options.signal,
                    })];
            case 2:
                result = _a.sent();
                return [2 /*return*/, result.data];
            case 3:
                e_6 = _a.sent();
                throw (0, parseError_1.parseBackendError)(e_6);
            case 4: return [2 /*return*/];
        }
    });
}); };
var getStepTransaction = function (step, options) { return __awaiter(void 0, void 0, void 0, function () {
    var configService, config, result, e_7;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(0, typeguards_1.isStep)(step)) {
                    // While the validation fails for some users we should not enforce it
                    // eslint-disable-next-line no-console
                    console.warn('SDK Validation: Invalid Step', step);
                }
                configService = ConfigService_1.default.getInstance();
                config = configService.getConfig();
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, axios_1.default.post(config.apiUrl + 'advanced/stepTransaction', step, {
                        signal: options === null || options === void 0 ? void 0 : options.signal,
                    })];
            case 2:
                result = _a.sent();
                return [2 /*return*/, result.data];
            case 3:
                e_7 = _a.sent();
                throw (0, parseError_1.parseBackendError)(e_7);
            case 4: return [2 /*return*/];
        }
    });
}); };
var getTools = function (request, options) { return __awaiter(void 0, void 0, void 0, function () {
    var configService, config, r;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                configService = ConfigService_1.default.getInstance();
                config = configService.getConfig();
                return [4 /*yield*/, axios_1.default.get(config.apiUrl + 'tools', {
                        params: request,
                        signal: options === null || options === void 0 ? void 0 : options.signal,
                    })];
            case 1:
                r = _a.sent();
                return [2 /*return*/, r.data];
        }
    });
}); };
var getTokens = function (request, options) { return __awaiter(void 0, void 0, void 0, function () {
    var configService, config, r;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                configService = ConfigService_1.default.getInstance();
                config = configService.getConfig();
                return [4 /*yield*/, axios_1.default.get(config.apiUrl + 'tokens', {
                        params: request,
                        signal: options === null || options === void 0 ? void 0 : options.signal,
                    })];
            case 1:
                r = _a.sent();
                return [2 /*return*/, r.data];
        }
    });
}); };
exports.default = {
    getPossibilities: getPossibilities,
    getToken: getToken,
    getQuote: getQuote,
    getStatus: getStatus,
    getChains: getChains,
    getRoutes: getRoutes,
    getStepTransaction: getStepTransaction,
    getTools: getTools,
    getTokens: getTokens,
};
