"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMulticallAddress = exports.getRpcProvider = exports.getRpcUrls = exports.getRpcUrl = void 0;
var ethers_1 = require("ethers");
var _1 = require(".");
var types_1 = require("./types");
var ConfigService_1 = __importDefault(require("./services/ConfigService"));
// cached providers
var chainProviders = {};
// Archive RPC Provider
var archiveRpcs = (_a = {},
    _a[types_1.ChainId.ETH] = 'https://speedy-nodes-nyc.moralis.io/5ed6053dc39eba789ff466c9/eth/mainnet/archive',
    _a[types_1.ChainId.BSC] = 'https://speedy-nodes-nyc.moralis.io/5ed6053dc39eba789ff466c9/bsc/mainnet/archive',
    _a[types_1.ChainId.POL] = 'https://speedy-nodes-nyc.moralis.io/5ed6053dc39eba789ff466c9/polygon/mainnet/archive',
    _a[types_1.ChainId.FTM] = 'https://speedy-nodes-nyc.moralis.io/5ed6053dc39eba789ff466c9/fantom/mainnet',
    _a);
// RPC Urls
var getRpcUrl = function (chainId, archive) {
    if (archive === void 0) { archive = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var rpcUrls;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, exports.getRpcUrls)(chainId, archive)];
                case 1:
                    rpcUrls = _a.sent();
                    return [2 /*return*/, rpcUrls[0]];
            }
        });
    });
};
exports.getRpcUrl = getRpcUrl;
var getRpcUrls = function (chainId, archive) {
    if (archive === void 0) { archive = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var configService, config;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (archive && archiveRpcs[chainId]) {
                        return [2 /*return*/, [archiveRpcs[chainId]]];
                    }
                    configService = ConfigService_1.default.getInstance();
                    return [4 /*yield*/, configService.getConfigAsync()];
                case 1:
                    config = _a.sent();
                    return [2 /*return*/, config.rpcs[chainId]];
            }
        });
    });
};
exports.getRpcUrls = getRpcUrls;
var getRandomProvider = function (providerList) {
    var index = (0, _1.getRandomNumber)(0, providerList.length - 1);
    return providerList[index];
};
// Provider
var getRpcProvider = function (chainId, archive) {
    if (archive === void 0) { archive = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var _a, _b, _c, _d, urls;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    if (!(archive && archiveRpcs[chainId])) return [3 /*break*/, 2];
                    _b = (_a = ethers_1.providers.FallbackProvider).bind;
                    _d = (_c = ethers_1.providers.StaticJsonRpcProvider).bind;
                    return [4 /*yield*/, (0, exports.getRpcUrl)(chainId, archive)];
                case 1: 
                // return archive PRC, but don't cache it
                return [2 /*return*/, new (_b.apply(_a, [void 0, [
                            new (_d.apply(_c, [void 0, _e.sent(), chainId]))()
                        ]]))()];
                case 2:
                    if (!!chainProviders[chainId]) return [3 /*break*/, 4];
                    chainProviders[chainId] = [];
                    return [4 /*yield*/, (0, exports.getRpcUrls)(chainId, archive)];
                case 3:
                    urls = _e.sent();
                    urls.forEach(function (url) {
                        chainProviders[chainId].push(new ethers_1.providers.FallbackProvider([
                            new ethers_1.providers.StaticJsonRpcProvider(url, chainId),
                        ]));
                    });
                    _e.label = 4;
                case 4:
                    if (!chainProviders[chainId].length) {
                        throw new _1.ServerError("Unable to configure provider for chain ".concat(chainId));
                    }
                    return [2 /*return*/, getRandomProvider(chainProviders[chainId])];
            }
        });
    });
};
exports.getRpcProvider = getRpcProvider;
// Multicall
var getMulticallAddress = function (chainId) { return __awaiter(void 0, void 0, void 0, function () {
    var configService, config;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                configService = ConfigService_1.default.getInstance();
                return [4 /*yield*/, configService.getConfigAsync()];
            case 1:
                config = _a.sent();
                return [2 /*return*/, config.multicallAddresses[chainId]];
        }
    });
}); };
exports.getMulticallAddress = getMulticallAddress;
