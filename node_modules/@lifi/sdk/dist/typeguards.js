"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isToken = exports.isStep = exports.isRoutesRequest = void 0;
var isRoutesRequest = function (routesRequest) {
    var fromChainId = routesRequest.fromChainId, fromAmount = routesRequest.fromAmount, fromTokenAddress = routesRequest.fromTokenAddress, toChainId = routesRequest.toChainId, toTokenAddress = routesRequest.toTokenAddress, options = routesRequest.options;
    return (typeof fromChainId === 'number' &&
        typeof fromAmount === 'string' &&
        fromAmount !== '' &&
        typeof fromTokenAddress === 'string' &&
        fromTokenAddress !== '' &&
        typeof toChainId === 'number' &&
        typeof toTokenAddress === 'string' &&
        toTokenAddress !== '' &&
        (!options || isRoutesOptions(options)));
};
exports.isRoutesRequest = isRoutesRequest;
var isRoutesOptions = function (routeOptions) {
    return !(routeOptions === null || routeOptions === void 0 ? void 0 : routeOptions.slippage) || typeof routeOptions.slippage === 'number';
};
var isStep = function (step) {
    var id = step.id, type = step.type, tool = step.tool, action = step.action, estimate = step.estimate;
    return (typeof id === 'string' &&
        ['swap', 'cross', 'lifi'].includes(type) &&
        typeof tool === 'string' &&
        isAction(action) &&
        isEstimate(estimate));
};
exports.isStep = isStep;
var isAction = function (action) {
    var fromChainId = action.fromChainId, fromAmount = action.fromAmount, fromToken = action.fromToken, toChainId = action.toChainId, toToken = action.toToken, slippage = action.slippage;
    return (typeof fromChainId === 'number' &&
        typeof fromAmount === 'string' &&
        fromAmount !== '' &&
        (0, exports.isToken)(fromToken) &&
        typeof toChainId === 'number' &&
        (0, exports.isToken)(toToken) &&
        typeof slippage === 'number');
};
var isEstimate = function (estimate) {
    var fromAmount = estimate.fromAmount, toAmount = estimate.toAmount, toAmountMin = estimate.toAmountMin, approvalAddress = estimate.approvalAddress;
    return (typeof fromAmount === 'string' &&
        fromAmount !== '' &&
        typeof toAmount === 'string' &&
        toAmount !== '' &&
        typeof toAmountMin === 'string' &&
        toAmountMin !== '' &&
        typeof approvalAddress === 'string');
};
var isToken = function (token) {
    var address = token.address, decimals = token.decimals, chainId = token.chainId;
    return (typeof address === 'string' &&
        typeof decimals === 'number' &&
        typeof chainId === 'number');
};
exports.isToken = isToken;
