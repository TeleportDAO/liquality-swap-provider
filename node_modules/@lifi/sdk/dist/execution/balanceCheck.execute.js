"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.balanceCheck = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var balances_1 = __importDefault(require("../balances"));
var errors_1 = require("../utils/errors");
var balanceCheck = function (signer, step) { return __awaiter(void 0, void 0, void 0, function () {
    var tokenAmount, _a, _b, currentBalance, neededBalance, neeeded, current, errorMessage;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _b = (_a = balances_1.default).getTokenBalance;
                return [4 /*yield*/, signer.getAddress()];
            case 1: return [4 /*yield*/, _b.apply(_a, [_c.sent(), step.action.fromToken])];
            case 2:
                tokenAmount = _c.sent();
                if (tokenAmount) {
                    currentBalance = new bignumber_js_1.default(tokenAmount.amount).shiftedBy(tokenAmount.decimals);
                    neededBalance = new bignumber_js_1.default(step.action.fromAmount);
                    if (currentBalance.lt(neededBalance)) {
                        if (neededBalance.multipliedBy(1 - step.action.slippage).lte(currentBalance)) {
                            // adjust amount in slippage limits
                            step.action.fromAmount = currentBalance.toFixed(0);
                        }
                        else {
                            neeeded = neededBalance.shiftedBy(-tokenAmount.decimals).toFixed();
                            current = currentBalance
                                .shiftedBy(-tokenAmount.decimals)
                                .toFixed();
                            errorMessage = "Your ".concat(tokenAmount.symbol, " balance is too low, ") +
                                "you try to transfer ".concat(neeeded, " ").concat(tokenAmount.symbol, ", ") +
                                "but your wallet only holds ".concat(current, " ").concat(tokenAmount.symbol, ". ") +
                                "No funds have been sent. ";
                            if (!currentBalance.isZero()) {
                                errorMessage +=
                                    "If the problem consists, please delete this transfer and " +
                                        "start a new one with a maximum of ".concat(current, " ").concat(tokenAmount.symbol, ".");
                            }
                            throw new errors_1.ValidationError('The balance is too low.', errorMessage);
                        }
                    }
                }
                return [2 /*return*/];
        }
    });
}); };
exports.balanceCheck = balanceCheck;
