"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAllowance = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var ethers_1 = require("ethers");
var utils_1 = require("../allowance/utils");
var getProvider_1 = require("../utils/getProvider");
var parseError_1 = require("../utils/parseError");
var checkAllowance = function (signer, step, chain, token, amount, spenderAddress, statusManager, infiniteApproval, allowUserInteraction
// eslint-disable-next-line max-params
) {
    if (infiniteApproval === void 0) { infiniteApproval = false; }
    if (allowUserInteraction === void 0) { allowUserInteraction = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var allowanceProcess, approved, approvalAmount, approveTx, e_1, error;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    allowanceProcess = statusManager.findOrCreateProcess('TOKEN_ALLOWANCE', step);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 10, , 15]);
                    if (!allowanceProcess.txHash) return [3 /*break*/, 3];
                    statusManager.updateProcess(step, allowanceProcess.type, 'PENDING');
                    return [4 /*yield*/, (0, getProvider_1.getProvider)(signer).waitForTransaction(allowanceProcess.txHash)];
                case 2:
                    _a.sent();
                    statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
                    return [3 /*break*/, 9];
                case 3:
                    if (!(allowanceProcess.status === 'DONE')) return [3 /*break*/, 4];
                    statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
                    return [3 /*break*/, 9];
                case 4: return [4 /*yield*/, (0, utils_1.getApproved)(signer, token.address, spenderAddress)];
                case 5:
                    approved = _a.sent();
                    if (!new bignumber_js_1.default(amount).gt(approved)) return [3 /*break*/, 8];
                    if (!allowUserInteraction) {
                        return [2 /*return*/];
                    }
                    approvalAmount = infiniteApproval
                        ? ethers_1.constants.MaxUint256.toString()
                        : amount;
                    return [4 /*yield*/, (0, utils_1.setApproval)(signer, token.address, spenderAddress, approvalAmount)
                        // update currentExecution
                    ];
                case 6:
                    approveTx = _a.sent();
                    // update currentExecution
                    statusManager.updateProcess(step, allowanceProcess.type, 'PENDING', {
                        txHash: approveTx.hash,
                        txLink: chain.metamask.blockExplorerUrls[0] + 'tx/' + approveTx.hash,
                    });
                    // wait for transcation
                    return [4 /*yield*/, approveTx.wait()];
                case 7:
                    // wait for transcation
                    _a.sent();
                    statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
                    return [3 /*break*/, 9];
                case 8:
                    statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
                    _a.label = 9;
                case 9: return [3 /*break*/, 15];
                case 10:
                    e_1 = _a.sent();
                    if (!(e_1.code === 'TRANSACTION_REPLACED' && e_1.replacement)) return [3 /*break*/, 12];
                    return [4 /*yield*/, transactionReplaced(e_1.replacement, allowanceProcess, step, chain, statusManager)];
                case 11:
                    _a.sent();
                    return [3 /*break*/, 14];
                case 12: return [4 /*yield*/, (0, parseError_1.parseError)(e_1, step, allowanceProcess)];
                case 13:
                    error = _a.sent();
                    statusManager.updateProcess(step, allowanceProcess.type, 'FAILED', {
                        error: {
                            message: error.message,
                            htmlMessage: error.htmlMessage,
                            code: error.code,
                        },
                    });
                    statusManager.updateExecution(step, 'FAILED');
                    throw error;
                case 14: return [3 /*break*/, 15];
                case 15: return [2 /*return*/];
            }
        });
    });
};
exports.checkAllowance = checkAllowance;
var transactionReplaced = function (replacementTx, allowanceProcess, step, chain, statusManager) { return __awaiter(void 0, void 0, void 0, function () {
    var e_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 5]);
                statusManager.updateProcess(step, allowanceProcess.type, 'PENDING', {
                    txHash: replacementTx.hash,
                    txLink: chain.metamask.blockExplorerUrls[0] + 'tx/' + replacementTx.hash,
                });
                return [4 /*yield*/, replacementTx.wait()];
            case 1:
                _a.sent();
                statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
                return [3 /*break*/, 5];
            case 2:
                e_2 = _a.sent();
                if (!(e_2.code === 'TRANSACTION_REPLACED' && e_2.replacement)) return [3 /*break*/, 4];
                return [4 /*yield*/, transactionReplaced(e_2.replacement, allowanceProcess, step, chain, statusManager)];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4: throw e_2;
            case 5: return [2 /*return*/];
        }
    });
}); };
