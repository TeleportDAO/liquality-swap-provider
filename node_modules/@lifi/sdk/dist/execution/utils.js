"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSubstatusMessage = exports.getProcessMessage = exports.waitForReceivingTransaction = void 0;
var ApiService_1 = __importDefault(require("../services/ApiService"));
var errors_1 = require("../utils/errors");
var utils_1 = require("../utils/utils");
var TRANSACTION_HASH_OBSERVERS = {};
function waitForReceivingTransaction(txHash, statusManager, processType, step) {
    return __awaiter(this, void 0, void 0, function () {
        var getStatus, status;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    getStatus = function () {
                        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                            var statusResponse, e_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, ApiService_1.default.getStatus({
                                                bridge: step.tool,
                                                fromChain: step.action.fromChainId,
                                                toChain: step.action.toChainId,
                                                txHash: txHash,
                                            })];
                                    case 1:
                                        statusResponse = _a.sent();
                                        return [3 /*break*/, 3];
                                    case 2:
                                        e_1 = _a.sent();
                                        console.debug('Fetching status from backend failed.', e_1);
                                        return [2 /*return*/, resolve(undefined)];
                                    case 3:
                                        switch (statusResponse.status) {
                                            case 'DONE':
                                                return [2 /*return*/, resolve(statusResponse)];
                                            case 'PENDING':
                                                statusManager === null || statusManager === void 0 ? void 0 : statusManager.updateProcess(step, processType, 'PENDING', {
                                                    substatus: statusResponse.substatus,
                                                    substatusMessage: statusResponse.substatusMessage ||
                                                        getSubstatusMessage(statusResponse.status, statusResponse.substatus),
                                                });
                                                return [2 /*return*/, resolve(undefined)];
                                            case 'NOT_FOUND':
                                                return [2 /*return*/, resolve(undefined)];
                                            case 'FAILED':
                                            default:
                                                return [2 /*return*/, reject()];
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    };
                    if (!(txHash in TRANSACTION_HASH_OBSERVERS)) return [3 /*break*/, 2];
                    return [4 /*yield*/, TRANSACTION_HASH_OBSERVERS[txHash]];
                case 1:
                    status = _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    TRANSACTION_HASH_OBSERVERS[txHash] = (0, utils_1.repeatUntilDone)(getStatus, 5000);
                    return [4 /*yield*/, TRANSACTION_HASH_OBSERVERS[txHash]];
                case 3:
                    status = _a.sent();
                    _a.label = 4;
                case 4:
                    if (!status.receiving) {
                        throw new errors_1.ServerError("Status doesn't contain receiving information.");
                    }
                    return [2 /*return*/, status];
            }
        });
    });
}
exports.waitForReceivingTransaction = waitForReceivingTransaction;
var processMessages = {
    TOKEN_ALLOWANCE: {
        STARTED: 'Setting token allowance.',
        PENDING: 'Waiting for token allowance.',
        DONE: 'Token allowance set.',
    },
    SWITCH_CHAIN: {
        PENDING: 'Chain switch required.',
        DONE: 'Chain switched successfully.',
    },
    SWAP: {
        STARTED: 'Preparing swap.',
        ACTION_REQUIRED: 'Please sign the transaction.',
        PENDING: 'Swapping.',
        DONE: 'Swap completed.',
    },
    CROSS_CHAIN: {
        STARTED: 'Preparing transaction.',
        ACTION_REQUIRED: 'Please sign the transaction.',
        PENDING: 'Waiting for transaction.',
        DONE: 'Transaction approved.',
    },
    RECEIVING_CHAIN: {
        PENDING: 'Waiting for receiving chain.',
        DONE: 'Funds received.',
    },
    TRANSACTION: {},
};
var substatusMessages = {
    PENDING: {
        BRIDGE_NOT_AVAILABLE: 'Bridge communication is temporarily unavailable.',
        CHAIN_NOT_AVAILABLE: 'RPC communication is temporarily unavailable.',
        NOT_PROCESSABLE_REFUND_NEEDED: 'The transfer cannot be completed successfully. A refund operation is required.',
        UNKNOWN_ERROR: 'An unexpected error occurred. Please seek assistance in the LI.FI discord server.',
        WAIT_SOURCE_CONFIRMATIONS: 'The bridge deposit has been received. The bridge is waiting for more confirmations to start the off-chain logic.',
        WAIT_DESTINATION_TRANSACTION: 'The bridge off-chain logic is being executed. Wait for the transaction to appear on the destination chain.',
    },
    DONE: {
        PARTIAL: 'Some of the received tokens are not the requested destination tokens.',
        REFUNDED: 'The tokens were refunded to the sender address.',
        COMPLETED: 'The transfer is complete.',
    },
    FAILED: {},
    INVALID: {},
    NOT_FOUND: {},
};
function getProcessMessage(type, status) {
    var processMessage = processMessages[type][status];
    return processMessage;
}
exports.getProcessMessage = getProcessMessage;
function getSubstatusMessage(status, substatus) {
    if (!substatus) {
        return;
    }
    var message = substatusMessages[status][substatus];
    return message;
}
exports.getSubstatusMessage = getSubstatusMessage;
