"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapExecutionManager = void 0;
var ethers_1 = require("ethers");
var ApiService_1 = __importDefault(require("../../services/ApiService"));
var ChainsService_1 = __importDefault(require("../../services/ChainsService"));
var errors_1 = require("../../utils/errors");
var getProvider_1 = require("../../utils/getProvider");
var parseError_1 = require("../../utils/parseError");
var utils_1 = require("../../utils/utils");
var allowance_execute_1 = require("../allowance.execute");
var balanceCheck_execute_1 = require("../balanceCheck.execute");
var switchChain_1 = require("../switchChain");
var utils_2 = require("../utils");
var SwapExecutionManager = /** @class */ (function () {
    function SwapExecutionManager() {
        var _this = this;
        this.shouldContinue = true;
        this.setShouldContinue = function (val) {
            _this.shouldContinue = val;
        };
        this.execute = function (_a) {
            var signer = _a.signer, step = _a.step, statusManager = _a.statusManager, settings = _a.settings;
            return __awaiter(_this, void 0, void 0, function () {
                var action, estimate, chainsService, fromChain, swapProcess, tx, personalizedStep, transactionRequest, updatedSigner, e_1, error, receipt, e_2, error, statusResponse, e_3;
                var _b, _c, _d, _e;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            action = step.action, estimate = step.estimate;
                            step.execution = statusManager.initExecutionObject(step);
                            chainsService = ChainsService_1.default.getInstance();
                            return [4 /*yield*/, chainsService.getChainById(action.fromChainId)
                                // Approval
                            ];
                        case 1:
                            fromChain = _f.sent();
                            if (!(action.fromToken.address !== ethers_1.constants.AddressZero)) return [3 /*break*/, 3];
                            return [4 /*yield*/, (0, allowance_execute_1.checkAllowance)(signer, step, fromChain, action.fromToken, action.fromAmount, estimate.approvalAddress, statusManager, settings.infiniteApproval, this.shouldContinue)];
                        case 2:
                            _f.sent();
                            _f.label = 3;
                        case 3:
                            swapProcess = statusManager.findOrCreateProcess('SWAP', step);
                            _f.label = 4;
                        case 4:
                            _f.trys.push([4, 13, , 15]);
                            if (!swapProcess.txHash) return [3 /*break*/, 6];
                            return [4 /*yield*/, (0, getProvider_1.getProvider)(signer).getTransaction(swapProcess.txHash)];
                        case 5:
                            // -> restore existing tx
                            tx = _f.sent();
                            return [3 /*break*/, 12];
                        case 6: 
                        // -> check balance
                        return [4 /*yield*/, (0, balanceCheck_execute_1.balanceCheck)(signer, step)
                            // -> get tx from backend
                        ];
                        case 7:
                            // -> check balance
                            _f.sent();
                            return [4 /*yield*/, (0, utils_1.personalizeStep)(signer, step)];
                        case 8:
                            personalizedStep = _f.sent();
                            return [4 /*yield*/, ApiService_1.default.getStepTransaction(personalizedStep)];
                        case 9:
                            transactionRequest = (_f.sent()).transactionRequest;
                            if (!transactionRequest) {
                                throw new errors_1.TransactionError(errors_1.LifiErrorCode.TransactionUnprepared, 'Unable to prepare transaction.');
                            }
                            return [4 /*yield*/, (0, switchChain_1.switchChain)(signer, statusManager, step, settings.switchChainHook, this.shouldContinue)];
                        case 10:
                            updatedSigner = _f.sent();
                            if (!updatedSigner) {
                                // chain switch was not successful, stop execution here
                                return [2 /*return*/, step.execution];
                            }
                            signer = updatedSigner;
                            // -> set step.execution
                            statusManager.updateProcess(step, swapProcess.type, 'ACTION_REQUIRED');
                            if (!this.shouldContinue) {
                                return [2 /*return*/, step.execution]; // stop before user interaction is needed
                            }
                            return [4 /*yield*/, signer.sendTransaction(transactionRequest)];
                        case 11:
                            // -> submit tx
                            tx = _f.sent();
                            _f.label = 12;
                        case 12: return [3 /*break*/, 15];
                        case 13:
                            e_1 = _f.sent();
                            return [4 /*yield*/, (0, parseError_1.parseError)(e_1, step, swapProcess)];
                        case 14:
                            error = _f.sent();
                            statusManager.updateProcess(step, swapProcess.type, 'FAILED', {
                                error: {
                                    message: error.message,
                                    htmlMessage: error.htmlMessage,
                                    code: error.code,
                                },
                            });
                            statusManager.updateExecution(step, 'FAILED');
                            throw error;
                        case 15:
                            // Wait for Transaction
                            statusManager.updateProcess(step, swapProcess.type, 'PENDING', {
                                txLink: fromChain.metamask.blockExplorerUrls[0] + 'tx/' + tx.hash,
                                txHash: tx.hash,
                            });
                            _f.label = 16;
                        case 16:
                            _f.trys.push([16, 18, , 22]);
                            return [4 /*yield*/, tx.wait()];
                        case 17:
                            receipt = _f.sent();
                            return [3 /*break*/, 22];
                        case 18:
                            e_2 = _f.sent();
                            if (!(e_2.code === 'TRANSACTION_REPLACED' && e_2.replacement)) return [3 /*break*/, 19];
                            receipt = e_2.replacement;
                            statusManager.updateProcess(step, swapProcess.type, 'PENDING', {
                                txHash: e_2.replacement.hash,
                                txLink: fromChain.metamask.blockExplorerUrls[0] +
                                    'tx/' +
                                    e_2.replacement.hash,
                            });
                            return [3 /*break*/, 21];
                        case 19: return [4 /*yield*/, (0, parseError_1.parseError)(e_2)];
                        case 20:
                            error = _f.sent();
                            statusManager.updateProcess(step, swapProcess.type, 'FAILED', {
                                error: {
                                    message: error.message,
                                    htmlMessage: error.htmlMessage,
                                    code: error.code,
                                },
                            });
                            statusManager.updateExecution(step, 'FAILED');
                            throw error;
                        case 21: return [3 /*break*/, 22];
                        case 22:
                            _f.trys.push([22, 24, , 25]);
                            if (!swapProcess.txHash) {
                                throw new Error('Transaction hash is undefined.');
                            }
                            return [4 /*yield*/, (0, utils_2.waitForReceivingTransaction)(swapProcess.txHash, statusManager, swapProcess.type, step)];
                        case 23:
                            statusResponse = _f.sent();
                            return [3 /*break*/, 25];
                        case 24:
                            e_3 = _f.sent();
                            statusManager.updateProcess(step, swapProcess.type, 'FAILED', {
                                error: {
                                    code: errors_1.LifiErrorCode.TransactionFailed,
                                    message: 'Failed while waiting for receiving chain.',
                                    htmlMessage: (0, parseError_1.getTransactionFailedMessage)(step, swapProcess.txLink),
                                },
                            });
                            statusManager.updateExecution(step, 'FAILED');
                            throw e_3;
                        case 25:
                            statusManager.updateProcess(step, swapProcess.type, 'DONE', {
                                txHash: (_b = statusResponse.receiving) === null || _b === void 0 ? void 0 : _b.txHash,
                                txLink: fromChain.metamask.blockExplorerUrls[0] +
                                    'tx/' +
                                    ((_c = statusResponse.receiving) === null || _c === void 0 ? void 0 : _c.txHash),
                            });
                            statusManager.updateExecution(step, 'DONE', {
                                fromAmount: statusResponse.sending.amount,
                                toAmount: (_d = statusResponse.receiving) === null || _d === void 0 ? void 0 : _d.amount,
                                toToken: (_e = statusResponse.receiving) === null || _e === void 0 ? void 0 : _e.token,
                                // gasUsed: statusResponse.gasUsed,
                            });
                            // DONE
                            return [2 /*return*/, step.execution];
                    }
                });
            });
        };
    }
    return SwapExecutionManager;
}());
exports.SwapExecutionManager = SwapExecutionManager;
