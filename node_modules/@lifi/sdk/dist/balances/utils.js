"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var ethers_1 = require("ethers");
var connectors_1 = require("../connectors");
var multicall_1 = require("../utils/multicall");
var utils_1 = require("../utils/utils");
var balanceAbi = [
    {
        constant: true,
        inputs: [{ name: 'who', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: true,
        inputs: [{ name: 'addr', type: 'address' }],
        name: 'getEthBalance',
        outputs: [{ name: 'balance', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
];
var getBalances = function (walletAddress, tokens) { return __awaiter(void 0, void 0, void 0, function () {
    var chainId;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (tokens.length === 0) {
                    return [2 /*return*/, []];
                }
                chainId = tokens[0].chainId;
                tokens.forEach(function (token) {
                    if (token.chainId !== chainId) {
                        // eslint-disable-next-line no-console
                        console.warn("Requested tokens have to be on same chain.");
                        return [];
                    }
                });
                return [4 /*yield*/, (0, connectors_1.getMulticallAddress)(chainId)];
            case 1:
                if ((_a.sent()) && tokens.length > 1) {
                    return [2 /*return*/, getBalancesFromProviderUsingMulticall(walletAddress, tokens)];
                }
                else {
                    return [2 /*return*/, getBalancesFromProvider(walletAddress, tokens)];
                }
                return [2 /*return*/];
        }
    });
}); };
var getBalancesFromProviderUsingMulticall = function (walletAddress, tokens) { return __awaiter(void 0, void 0, void 0, function () {
    var chainId, multicallAddress;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                chainId = tokens[0].chainId;
                return [4 /*yield*/, (0, connectors_1.getMulticallAddress)(chainId)];
            case 1:
                multicallAddress = _a.sent();
                if (!multicallAddress) {
                    throw new Error('No multicallAddress found for the given chain.');
                }
                return [2 /*return*/, executeMulticall(walletAddress, tokens, multicallAddress, chainId)];
        }
    });
}); };
var executeMulticall = function (walletAddress, tokens, multicallAddress, chainId) { return __awaiter(void 0, void 0, void 0, function () {
    var calls, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                calls = [];
                tokens.map(function (token) {
                    if ((0, utils_1.isZeroAddress)(token.address)) {
                        calls.push({
                            address: multicallAddress,
                            name: 'getEthBalance',
                            params: [walletAddress],
                        });
                    }
                    else {
                        calls.push({
                            address: token.address,
                            name: 'balanceOf',
                            params: [walletAddress],
                        });
                    }
                });
                return [4 /*yield*/, fetchViaMulticall(calls, balanceAbi, chainId, multicallAddress)];
            case 1:
                res = _a.sent();
                if (!res.length) {
                    return [2 /*return*/, []];
                }
                return [2 /*return*/, tokens.map(function (token, i) {
                        var amount = new bignumber_js_1.default(res[i].amount.toString() || '0')
                            .shiftedBy(-token.decimals)
                            .toFixed();
                        return __assign(__assign({}, token), { amount: amount || '0', blockNumber: res[i].blockNumber });
                    })];
        }
    });
}); };
var fetchViaMulticall = function (calls, abi, chainId, multicallAddress) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, multicall_1.fetchDataUsingMulticall)(calls, abi, chainId, multicallAddress)];
            case 1:
                result = _a.sent();
                return [2 /*return*/, result.map(function (_a) {
                        var data = _a.data, blockNumber = _a.blockNumber;
                        return ({
                            amount: data ? data : new bignumber_js_1.default(0),
                            blockNumber: blockNumber,
                        });
                    })];
        }
    });
}); };
var getBalancesFromProvider = function (walletAddress, tokens) { return __awaiter(void 0, void 0, void 0, function () {
    var chainId, rpc, tokenAmountPromises;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                chainId = tokens[0].chainId;
                return [4 /*yield*/, (0, connectors_1.getRpcProvider)(chainId)];
            case 1:
                rpc = _a.sent();
                tokenAmountPromises = tokens.map(function (token) { return __awaiter(void 0, void 0, void 0, function () {
                    var amount, blockNumber, balance, e_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                amount = '0';
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, getBalanceFromProvider(walletAddress, token.address, chainId, rpc)];
                            case 2:
                                balance = _a.sent();
                                amount = new bignumber_js_1.default(balance.amount.toString())
                                    .shiftedBy(-token.decimals)
                                    .toString();
                                blockNumber = balance.blockNumber;
                                return [3 /*break*/, 4];
                            case 3:
                                e_1 = _a.sent();
                                // eslint-disable-next-line no-console
                                console.warn(e_1);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/, __assign(__assign({}, token), { amount: amount, blockNumber: blockNumber })];
                        }
                    });
                }); });
                return [2 /*return*/, Promise.all(tokenAmountPromises)];
        }
    });
}); };
var getBalanceFromProvider = function (walletAddress, assetId, chainId, provider) { return __awaiter(void 0, void 0, void 0, function () {
    var blockNumber, balance, contract;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, getCurrentBlockNumber(chainId)];
            case 1:
                blockNumber = _a.sent();
                if (!(0, utils_1.isZeroAddress)(assetId)) return [3 /*break*/, 3];
                return [4 /*yield*/, provider.getBalance(walletAddress, blockNumber)];
            case 2:
                balance = _a.sent();
                return [3 /*break*/, 5];
            case 3:
                contract = new ethers_1.ethers.Contract(assetId, ['function balanceOf(address owner) view returns (uint256)'], provider);
                return [4 /*yield*/, contract.balanceOf(walletAddress, {
                        blockTag: blockNumber,
                    })];
            case 4:
                balance = _a.sent();
                _a.label = 5;
            case 5: return [2 /*return*/, {
                    amount: balance,
                    blockNumber: blockNumber,
                }];
        }
    });
}); };
var getCurrentBlockNumber = function (chainId) { return __awaiter(void 0, void 0, void 0, function () {
    var rpc;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, connectors_1.getRpcProvider)(chainId)];
            case 1:
                rpc = _a.sent();
                return [2 /*return*/, rpc.getBlockNumber()];
        }
    });
}); };
exports.default = {
    getBalances: getBalances,
};
