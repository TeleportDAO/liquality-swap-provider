"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnknownError = exports.NotFoundError = exports.SlippageError = exports.TransactionError = exports.ValidationError = exports.ServerError = exports.ProviderError = exports.RPCError = exports.LifiError = exports.MetaMaskProviderErrorCode = exports.MetaMaskRPCErrorCode = exports.LifiErrorCode = void 0;
var ErrorType;
(function (ErrorType) {
    ErrorType["RPCError"] = "RPCError";
    ErrorType["ProviderError"] = "ProviderError";
    ErrorType["ServerError"] = "ServerError";
    ErrorType["TransactionError"] = "TransactionError";
    ErrorType["ValidationError"] = "ValidationError";
    ErrorType["NotFoundError"] = "NotFoundError";
    ErrorType["UnknownError"] = "UnknownError";
    ErrorType["SlippageError"] = "SlippageError";
})(ErrorType || (ErrorType = {}));
var LifiErrorCode;
(function (LifiErrorCode) {
    LifiErrorCode[LifiErrorCode["InternalError"] = 1000] = "InternalError";
    LifiErrorCode[LifiErrorCode["ValidationError"] = 1001] = "ValidationError";
    LifiErrorCode[LifiErrorCode["TransactionUnderpriced"] = 1002] = "TransactionUnderpriced";
    LifiErrorCode[LifiErrorCode["TransactionFailed"] = 1003] = "TransactionFailed";
    LifiErrorCode[LifiErrorCode["TransactionUnprepared"] = 1008] = "TransactionUnprepared";
    LifiErrorCode[LifiErrorCode["Timeout"] = 1004] = "Timeout";
    LifiErrorCode[LifiErrorCode["ProviderUnavailable"] = 1005] = "ProviderUnavailable";
    LifiErrorCode[LifiErrorCode["NotFound"] = 1006] = "NotFound";
    LifiErrorCode[LifiErrorCode["ChainSwitchError"] = 1007] = "ChainSwitchError";
    LifiErrorCode[LifiErrorCode["SlippageError"] = 1008] = "SlippageError";
})(LifiErrorCode = exports.LifiErrorCode || (exports.LifiErrorCode = {}));
var MetaMaskRPCErrorCode;
(function (MetaMaskRPCErrorCode) {
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["invalidInput"] = -32000] = "invalidInput";
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["resourceNotFound"] = -32001] = "resourceNotFound";
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["resourceUnavailable"] = -32002] = "resourceUnavailable";
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["transactionRejected"] = -32003] = "transactionRejected";
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["methodNotSupported"] = -32004] = "methodNotSupported";
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["limitExceeded"] = -32005] = "limitExceeded";
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["parse"] = -32700] = "parse";
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["invalidRequest"] = -32600] = "invalidRequest";
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["methodNotFound"] = -32601] = "methodNotFound";
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["invalidParams"] = -32602] = "invalidParams";
    MetaMaskRPCErrorCode[MetaMaskRPCErrorCode["internal"] = -32603] = "internal";
})(MetaMaskRPCErrorCode = exports.MetaMaskRPCErrorCode || (exports.MetaMaskRPCErrorCode = {}));
var MetaMaskProviderErrorCode;
(function (MetaMaskProviderErrorCode) {
    MetaMaskProviderErrorCode[MetaMaskProviderErrorCode["userRejectedRequest"] = 4001] = "userRejectedRequest";
    MetaMaskProviderErrorCode[MetaMaskProviderErrorCode["unauthorized"] = 4100] = "unauthorized";
    MetaMaskProviderErrorCode[MetaMaskProviderErrorCode["unsupportedMethod"] = 4200] = "unsupportedMethod";
    MetaMaskProviderErrorCode[MetaMaskProviderErrorCode["disconnected"] = 4900] = "disconnected";
    MetaMaskProviderErrorCode[MetaMaskProviderErrorCode["chainDisconnected"] = 4901] = "chainDisconnected";
})(MetaMaskProviderErrorCode = exports.MetaMaskProviderErrorCode || (exports.MetaMaskProviderErrorCode = {}));
var LifiError = /** @class */ (function (_super) {
    __extends(LifiError, _super);
    function LifiError(type, code, message, htmlMessage, stack) {
        var _this = _super.call(this, message) || this;
        // Set the prototype explicitly: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, LifiError.prototype);
        _this.code = code;
        // the name property is used by toString(). It is a string and we can't use our custom ErrorTypes, that's why we have to cast
        _this.name = type.toString();
        _this.htmlMessage = htmlMessage;
        // passing a stack allows us to preserve the stack from errors that we caught and just want to transform in one of our custom errors
        if (stack) {
            _this.stack = stack;
        }
        return _this;
    }
    return LifiError;
}(Error));
exports.LifiError = LifiError;
var RPCError = /** @class */ (function (_super) {
    __extends(RPCError, _super);
    function RPCError(code, message, htmlMessage, stack) {
        return _super.call(this, ErrorType.RPCError, code, message, htmlMessage, stack) || this;
    }
    return RPCError;
}(LifiError));
exports.RPCError = RPCError;
var ProviderError = /** @class */ (function (_super) {
    __extends(ProviderError, _super);
    function ProviderError(code, message, htmlMessage, stack) {
        return _super.call(this, ErrorType.ProviderError, code, message, htmlMessage, stack) || this;
    }
    return ProviderError;
}(LifiError));
exports.ProviderError = ProviderError;
var ServerError = /** @class */ (function (_super) {
    __extends(ServerError, _super);
    function ServerError(message, htmlMessage, stack) {
        return _super.call(this, ErrorType.ServerError, LifiErrorCode.InternalError, message, htmlMessage, stack) || this;
    }
    return ServerError;
}(LifiError));
exports.ServerError = ServerError;
var ValidationError = /** @class */ (function (_super) {
    __extends(ValidationError, _super);
    function ValidationError(message, htmlMessage, stack) {
        return _super.call(this, ErrorType.ValidationError, LifiErrorCode.ValidationError, message, htmlMessage, stack) || this;
    }
    return ValidationError;
}(LifiError));
exports.ValidationError = ValidationError;
var TransactionError = /** @class */ (function (_super) {
    __extends(TransactionError, _super);
    function TransactionError(code, message, htmlMessage, stack) {
        return _super.call(this, ErrorType.TransactionError, code, message, htmlMessage, stack) || this;
    }
    return TransactionError;
}(LifiError));
exports.TransactionError = TransactionError;
var SlippageError = /** @class */ (function (_super) {
    __extends(SlippageError, _super);
    function SlippageError(message, htmlMessage, stack) {
        return _super.call(this, ErrorType.SlippageError, LifiErrorCode.SlippageError, message, htmlMessage, stack) || this;
    }
    return SlippageError;
}(LifiError));
exports.SlippageError = SlippageError;
var NotFoundError = /** @class */ (function (_super) {
    __extends(NotFoundError, _super);
    function NotFoundError(message, htmlMessage, stack) {
        return _super.call(this, ErrorType.NotFoundError, LifiErrorCode.NotFound, message, htmlMessage, stack) || this;
    }
    return NotFoundError;
}(LifiError));
exports.NotFoundError = NotFoundError;
var UnknownError = /** @class */ (function (_super) {
    __extends(UnknownError, _super);
    function UnknownError(code, message, htmlMessage, stack) {
        return _super.call(this, ErrorType.UnknownError, code, message, htmlMessage, stack) || this;
    }
    return UnknownError;
}(LifiError));
exports.UnknownError = UnknownError;
