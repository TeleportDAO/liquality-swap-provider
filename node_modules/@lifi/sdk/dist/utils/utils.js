"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNativeTokenAddress = exports.isZeroAddress = exports.loadTransactionReceipt = exports.repeatUntilDone = exports.formatTokenAmountOnly = exports.splitListIntoChunks = exports.personalizeStep = exports.sleep = exports.deepClone = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var ethers_1 = require("ethers");
var connectors_1 = require("../connectors");
var deepClone = function (src) {
    return JSON.parse(JSON.stringify(src));
};
exports.deepClone = deepClone;
var sleep = function (mills) {
    return new Promise(function (resolve) {
        setTimeout(resolve, mills);
    });
};
exports.sleep = sleep;
var personalizeStep = function (signer, step) { return __awaiter(void 0, void 0, void 0, function () {
    var address, fromAddress, toAddress;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (step.action.toAddress && step.action.fromAddress) {
                    return [2 /*return*/, step];
                }
                return [4 /*yield*/, signer.getAddress()];
            case 1:
                address = _a.sent();
                fromAddress = step.action.fromAddress || address;
                toAddress = step.action.toAddress || address;
                return [2 /*return*/, __assign(__assign({}, step), { action: __assign(__assign({}, step.action), { fromAddress: fromAddress, toAddress: toAddress }) })];
        }
    });
}); };
exports.personalizeStep = personalizeStep;
var splitListIntoChunks = function (list, chunkSize) {
    return list.reduce(function (resultList, item, index) {
        var chunkIndex = Math.floor(index / chunkSize);
        if (!resultList[chunkIndex]) {
            resultList[chunkIndex] = []; // start a new chunk
        }
        resultList[chunkIndex].push(item);
        return resultList;
    }, []);
};
exports.splitListIntoChunks = splitListIntoChunks;
var formatTokenAmountOnly = function (token, amount) {
    if (!amount) {
        return '0.0';
    }
    var floated;
    if (typeof amount === 'string') {
        if (amount === '0') {
            return '0.0';
        }
        floated = new bignumber_js_1.default(amount).shiftedBy(-token.decimals);
    }
    else {
        floated = amount;
        if (floated.isZero()) {
            return '0.0';
        }
    }
    // show at least 4 decimal places and at least two non-zero digests
    var decimalPlaces = 3;
    while (floated.lt(1 / Math.pow(10, decimalPlaces))) {
        decimalPlaces++;
    }
    return floated.toFixed(decimalPlaces + 1, 1);
};
exports.formatTokenAmountOnly = formatTokenAmountOnly;
/**
 * Repeatedly calls a given asynchronous function until it resolves with a value
 * @param toRepeat The function that should be repeated
 * @param timeout The timeout in milliseconds between retries, defaults to 5000
 * @returns The result of the toRepeat function
 */
var repeatUntilDone = function (toRepeat, timeout) {
    if (timeout === void 0) { timeout = 5000; }
    return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!result) return [3 /*break*/, 4];
                    return [4 /*yield*/, toRepeat()];
                case 1:
                    result = _a.sent();
                    if (!!result) return [3 /*break*/, 3];
                    return [4 /*yield*/, (0, exports.sleep)(timeout)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3: return [3 /*break*/, 0];
                case 4: return [2 /*return*/, result];
            }
        });
    });
};
exports.repeatUntilDone = repeatUntilDone;
/**
 * Loads a transaction receipt using the rpc for the given chain id
 * @param chainId The chain id where the transaction should be loaded from
 * @param txHash The hash of the transaction
 * @returns TransactionReceipt
 */
var loadTransactionReceipt = function (chainId, txHash) { return __awaiter(void 0, void 0, void 0, function () {
    var rpc, tx;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, connectors_1.getRpcProvider)(chainId)];
            case 1:
                rpc = _a.sent();
                return [4 /*yield*/, rpc.getTransaction(txHash)];
            case 2:
                tx = _a.sent();
                return [2 /*return*/, tx.wait()];
        }
    });
}); };
exports.loadTransactionReceipt = loadTransactionReceipt;
var isZeroAddress = function (address) {
    if (address === ethers_1.constants.AddressZero ||
        address === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') {
        return true;
    }
    return false;
};
exports.isZeroAddress = isZeroAddress;
var isNativeTokenAddress = function (address) {
    if (address === ethers_1.constants.AddressZero ||
        address === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' ||
        // CELO native token
        address === '0x471ece3750da237f93b8e339c536989b8978a438') {
        return true;
    }
    return false;
};
exports.isNativeTokenAddress = isNativeTokenAddress;
