/* eslint-disable class-methods-use-this */
const { BitcoinRelayABI } = require("@sinatdt/configs").teleswap.ABI
const EthereumBase = require("../ethereum-base")

class BitcoinRelay extends EthereumBase {
  constructor(connectionConfig, contractAddress) {
    super(connectionConfig)
    this.contractAddress = contractAddress
    this.contract = new this.web3Eth.Contract(BitcoinRelayABI, contractAddress)
  }

  async firstSubmittedHeight() {
    let firstSubmittedHeight = await this.contract.methods.initialHeight().call()
    return firstSubmittedHeight
  }

  // read method
  async isBlockHashSubmitted(blockHash, blockHeight) {
    // search to see if blockHash has been submitted on the relay
    const ethBlockHash = `0x${Buffer.from(blockHash, "hex").reverse().toString("hex")}`
    let numberOfSubmittedHeaders = await this.getNumberOfSubmittedHeaders(blockHeight)
    for (let i = 0; i < numberOfSubmittedHeaders; i += 1) {
      let submittedBlockHeaderHash = await this.getSubmittedHeaderHash(blockHeight, i)
      if (ethBlockHash === submittedBlockHeaderHash) {
        return true
      }
    }
    return false
  }

  async lastSubmittedHeight() {
    let lastSubmittedHeight = await this.contract.methods.lastSubmittedHeight().call()
    return lastSubmittedHeight
  }

  async getNumberOfSubmittedHeaders(height) {
    let numberOfSubmittedHeaders = this.contract.methods.getNumberOfSubmittedHeaders(height).call()
    return numberOfSubmittedHeaders
  }

  async getSubmittedHeaderHash(height, index) {
    let blockHeaderHash = await this.contract.methods.getBlockHeaderHash(height, index).call()
    return blockHeaderHash
  }

  async getBlockHeaderFee(height, index) {
    let blockHeaderHash = await this.contract.methods.getBlockHeaderFee(height, index).call()
    return blockHeaderHash
  }

  // write method
  async submitBlockHeadersWithRetarget(oldPeriodStartHeader, oldPeriodEndHeader, newBlockHeaders) {
    const gasPrice = await this.web3Eth.getGasPrice()
    const gasAmount = await this.contract.methods
      .addHeadersWithRetarget(oldPeriodStartHeader, oldPeriodEndHeader, newBlockHeaders)
      .estimateGas({ from: this.currentAccount, gasPrice })

    let receipt = await this.contract.methods
      .addHeadersWithRetarget(oldPeriodStartHeader, oldPeriodEndHeader, newBlockHeaders)
      .send({ from: this.currentAccount, gas: gasAmount, gasPrice })
      .catch((err) => {
        if (err.receipt) return { ...err.receipt, message: err.reason }
        throw err
      })

    return {
      status: receipt.status,
      txId: receipt.transactionHash,
      gasUsed: receipt.gasUsed,
      gasPrice,
    }
  }

  async submitBlockHeaders(anchorBlockHeader, newBlockHeaders) {
    const gasPrice = await this.web3Eth.getGasPrice()
    const gasAmount = await this.contract.methods
      .addHeaders(anchorBlockHeader, newBlockHeaders)
      .estimateGas({ from: this.currentAccount, gasPrice })

    let receipt = await this.contract.methods
      .addHeaders(anchorBlockHeader, newBlockHeaders)
      .send({ from: this.currentAccount, gas: gasAmount, gasPrice })
      .catch((err) => {
        if (err.receipt) return { ...err.receipt, message: err.reason }
        throw err
      })

    return {
      status: receipt.status,
      txId: receipt.transactionHash,
      gasUsed: receipt.gasUsed,
      gasPrice,
      message: receipt.reason || "",
    }
  }

  async getNumberOfConfirmations() {
    let finalizationParameter = await this.contract.methods.finalizationParameter().call()
    return finalizationParameter
  }

  // **-----------------------------

  async getPastEventBlockHeight(fromBlock = 0) {
    let events = await this.contract.getPastEvents("BlockAdded", {
      fromBlock,
    })
    if (events.length === 0) return 0
    const lastBlockHeight = this.parseBlockAddedEvent(events[events.length - 1]).height
    return lastBlockHeight
  }

  parseBlockAddedEvent(BlockAddedEvent) {
    const txInfo = BitcoinRelay.extractEventTxInfo(BlockAddedEvent)
    const { height, selfHash, parentHash, relayer } = BlockAddedEvent.returnValues
    return {
      height,
      selfHash,
      parentHash,
      relayer,
      txInfo,
    }
  }

  async getLastBlockFee() {
    let blockHeight = await this.lastSubmittedHeight()
    let numberOfSubmittedHeaders = await this.getNumberOfSubmittedHeaders(blockHeight)
    return this.getBlockHeaderFee(blockHeight, +numberOfSubmittedHeaders - 1)
  }
}
module.exports = BitcoinRelay
