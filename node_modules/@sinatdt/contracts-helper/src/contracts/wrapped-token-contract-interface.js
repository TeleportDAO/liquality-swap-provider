/* eslint-disable class-methods-use-this */
const EthereumBase = require("../ethereum-base");
const { WrappedTokenABI } = require("@sinatdt/configs").teleswap.ABI;

class WrappedToken extends EthereumBase {
  constructor(connectionConfig, contractAddress, unit) {
    super(connectionConfig);
    this.contractAddress = contractAddress;
    this.contract = new this.web3Eth.Contract(WrappedTokenABI, contractAddress);
    this.unit = unit;
  }

  async setDecimal() {
    let decimal = await this.contract.methods.decimals().call();
    this.unit = decimal;
  }

  async getDecimal() {
    if (!this.unit) await this.setDecimal();
    return this.unit;
  }

  async mintTestToken() {
    const gasAmount = await this.contract.methods
      .mintTestToken()
      .estimateGas({ from: this.currentAccount });

    return this.contract.methods
      .mintTestToken()
      .send({ from: this.currentAccount, gas: gasAmount });
  }

  async approve(address, amount) {
    const gasAmount = await this.contract.methods
      .approve(address, amount)
      .estimateGas({ from: this.currentAccount });

    return this.contract.methods
      .approve(address, amount)
      .send({ from: this.currentAccount, gas: gasAmount });
  }

  async getBalance(address) {
    let balance = await this.contract.methods
      .balanceOf(address || this.currentAccount)
      .call();
    return balance;
  }

  async getApprovedBalanceForAddress(address) {
    let balance = await this.contract.methods
      .allowance(this.currentAccount, address)
      .call();
    return balance;
  }
}
module.exports = WrappedToken;
