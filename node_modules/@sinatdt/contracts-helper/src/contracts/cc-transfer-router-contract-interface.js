/* eslint-disable class-methods-use-this */
const EthereumBase = require("../ethereum-base");
const { CCTransferRouterABI } = require("@sinatdt/configs").teleswap.ABI;

class CcTransferRouter extends EthereumBase {
  constructor(connectionInfo, contractAddress) {
    super(connectionInfo);
    this.contractAddress = contractAddress;
    this.contract = new this.web3Eth.Contract(
      CCTransferRouterABI,
      contractAddress
    );
    this.contract.handleRevert = true;
  }

  async getNeededConfirmations() {
    let confirmations = await this.contract.methods
      .normalConfirmationParameter()
      .call();
    return confirmations;
  }

  async getProtocolPercentageFee() {
    return this.contract.methods.protocolPercentageFee().call();
  }

  async isUsed(txId) {
    let txIdWith0x = `0x${Buffer.from(txId, "hex").reverse().toString("hex")}`;
    let isUsed = await this.contract.methods.isRequestUsed(txIdWith0x).call();
    return isUsed;
  }

  async sendTransferRequest(
    lockerScript,
    parsedTx,
    merkleProof,
    blockNumber,
    blockFee,
    nonce = undefined
  ) {
    try {
      let value = blockFee ? (+blockFee * 1.3).toFixed() : "100000000000000000";

      const gasAmount = await this.contract.methods
        .ccTransfer(
          parsedTx.version,
          parsedTx.vin,
          parsedTx.vout,
          parsedTx.locktime,
          blockNumber,
          merkleProof.intermediateNodes,
          merkleProof.transactionIndex,
          `0x${lockerScript}`
        )
        .estimateGas({ from: this.currentAccount, value, nonce });

      // const data = await this.contract.methods
      //   .ccTransfer(
      //     parsedTx.version,
      //     parsedTx.vin,
      //     parsedTx.vout,
      //     parsedTx.locktime,
      //     blockNumber,
      //     merkleProof.intermediateNodes,
      //     merkleProof.transactionIndex,
      //     `0x${lockerScript}`,
      //   )
      //   .encodeABI({ from: this.currentAccount, value, nonce })

      // console.log('resid')

      // let a = await this.web3Eth.accounts.wallet[this.currentAccount].signTransaction({
      //   nonce,
      //   from: this.currentAccount,
      //   to: this.contractAddress,
      //   data,
      //   gas: gasAmount,
      //   value,
      // })

      // console.log(a)

      let response = await this.contract.methods
        .ccTransfer(
          parsedTx.version,
          parsedTx.vin,
          parsedTx.vout,
          parsedTx.locktime,
          blockNumber,
          merkleProof.intermediateNodes,
          merkleProof.transactionIndex,
          `0x${lockerScript}`
        )
        .send({ from: this.currentAccount, gas: gasAmount, value, nonce })
        .then((recipient) => ({
          success: recipient.status,
          txId: recipient.transactionHash,
        }));
      return response;
    } catch (error) {
      return {
        success: false,
        message: error.message,
      };
    }
  }
}
module.exports = CcTransferRouter;
