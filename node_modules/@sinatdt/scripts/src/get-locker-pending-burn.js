const { CcBurnRouter, BitcoinRelay } = require("@sinatdt/contracts-helper").contracts
const { BitcoinInterface } = require("@sinatdt/bitcoin")

let { contractsInfo } = require("@sinatdt/configs").teleswap

const polygonContracts = contractsInfo.polygon
const { getWeb3Eth } = require("./helper")

async function getLockerPendingBurns({
  lockerBtcAddress,
  targetNetworkConnectionInfo,
  testnet = false,
}) {
  let sourceNetworkConnection = {
    api: {
      enabled: true,
      provider: "BlockStream",
    },
  }
  let sourceNetworkName = testnet ? "bitcoin_testnet" : "bitcoin"
  let contracts = testnet ? polygonContracts.testnet : polygonContracts.mainnet
  let { connectionConfig } = getWeb3Eth(targetNetworkConnectionInfo)

  const relay = new BitcoinRelay(connectionConfig, contracts.relayAddress)
  const ccBurn = new CcBurnRouter(connectionConfig, contracts.ccBurnAddress)

  let lockerAddresses = [lockerBtcAddress]
  console.log(lockerAddresses)

  let numberOfConfirmations = await relay.getNumberOfConfirmations()
  let lastBlock = await relay.lastSubmittedHeight()
  const btcInterface = new BitcoinInterface(sourceNetworkConnection, sourceNetworkName)
  let confirmedTxs = await btcInterface.getLockersBurnTransactions(
    lockerAddresses,
    +lastBlock - 10 * +numberOfConfirmations,
  )
  let pendingTxs = await btcInterface.getLockersBurnTransactions(
    lockerAddresses,
    undefined,
    undefined,
    true,
  )

  let isUsed = []
  confirmedTxs.forEach(async (data, index) => {
    isUsed[index] = ccBurn.isUsedAsBurnProof(data.transaction.txId)
  })

  isUsed = await Promise.all(isUsed)

  confirmedTxs = confirmedTxs.filter((rs, index) => !isUsed[index])

  console.log(pendingTxs, lockerBtcAddress)
  return {
    confirmedTxs,
    pendingTxs,
    numberOfUnsubmittedTxs: pendingTxs.length + confirmedTxs.length,
    unsubmittedAmount:
      pendingTxs.reduce(
        (a, c) =>
          a +
          c.transaction.vin.reduce((s, t) => s + Number(t.value || 0), 0) -
          c.burnInfo.changes.reduce((s, t) => s + Number(t.value || 0), 0),
        0,
      ) +
      confirmedTxs.reduce(
        (a, c) =>
          a +
          c.transaction.vin.reduce((s, t) => s + Number(t.value || 0), 0) -
          c.burnInfo.changes.reduce((s, t) => s + Number(t.value || 0), 0),
        0,
      ),
  }
}

module.exports = getLockerPendingBurns
