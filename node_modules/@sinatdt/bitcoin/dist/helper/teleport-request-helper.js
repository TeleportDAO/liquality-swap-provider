"use strict";
const { requestTypes: teleportRequestsType } = require("@sinatdt/configs").teleswap;
function parseTeleportAndExchangeRequest(data) {
    let parsedData = {};
    parsedData.requestType = "transfer";
    let offset = 0;
    parsedData.chainId = Number(`0x${data.slice(offset, (offset += 2))}`);
    parsedData.appId = Number(`0x${data.slice(offset, (offset += 4))}`);
    parsedData.recipientAddress = `0x${data.slice(offset, (offset += 40))}`;
    parsedData.percentageFee =
        Number(`0x${data.slice(offset, (offset += 4))}`) / 100;
    parsedData.speed = data.slice(offset, (offset += 2)) === "01";
    if (data.length === offset)
        return parsedData;
    parsedData.requestType = "exchange";
    parsedData.exchangeTokenAddress = `0x${data.slice(offset, (offset += 40))}`;
    parsedData.outputAmount = Number(`0x${data.slice(offset, (offset += 56))}`);
    parsedData.deadline = Number(`0x${data.slice(offset, (offset += 8))}`);
    parsedData.isFixedToken = data.slice(offset, (offset += 2)) === "01";
    if (data.length === offset)
        return parsedData;
    console.error(`invalid OP Return data. data length : ${data.length} - actual length : ${offset}`);
    return null;
}
function parseLendAndBorrowRequest(data) {
    let parsedData = {};
    parsedData.requestType = "lend";
    let offset = 0;
    parsedData.chainId = Number(`0x${data.slice(offset, (offset += 2))}`);
    parsedData.appId = Number(`0x${data.slice(offset, (offset += 4))}`);
    parsedData.recipientAddress = `0x${data.slice(offset, (offset += 40))}`;
    parsedData.percentageFee =
        Number(`0x${data.slice(offset, (offset += 4))}`) / 100;
    parsedData.mode = Number(`0x${data.slice(offset, (offset += 2))}`);
    if (data.length === offset)
        return parsedData;
    parsedData.requestType = "borrow";
    parsedData.tokenAddress = `0x${data.slice(offset, (offset += 40))}`;
    parsedData.borrowAmount = Number(`0x${data.slice(offset, (offset += 56))}`);
    if (data.length === offset)
        return parsedData;
    console.error(`invalid OP Return data. data length : ${data.length} - actual length : ${offset}`);
    return null;
}
function parseRawRequest(opReturnData) {
    var _a;
    let data = opReturnData.slice(2, 4) === "4c"
        ? opReturnData.slice(6)
        : opReturnData.slice(4);
    let _chainId = Number(`0x${data.slice(0, 2)}`);
    let appId = Number(`0x${data.slice(2, 6)}`);
    let requestType = (_a = teleportRequestsType.find((rs) => appId >= rs.appIdRange[0] && appId < rs.appIdRange[1])) === null || _a === void 0 ? void 0 : _a.type;
    switch (requestType) {
        case "teleport":
        case "exchange":
            return parseTeleportAndExchangeRequest(data);
        case "lend":
            return parseLendAndBorrowRequest(data);
        default:
            console.error(`invalid request appId : ${appId}`);
    }
    return null;
}
function validateRequestAndValue(data, value) {
    let minAmount = 0;
    let validate = data &&
        +value > minAmount &&
        (data.percentageFee / 100) * +value > minAmount &&
        +data.percentageFee < 100;
    return validate;
}
function checkAndParseRequest(vouts, address) {
    var _a, _b;
    let opReturnData = ((_a = vouts.find((vout_) => vout_.script.startsWith("6a"))) === null || _a === void 0 ? void 0 : _a.script) || null;
    if (opReturnData) {
        let value = ((_b = vouts.find((vout_) => vout_.address === address)) === null || _b === void 0 ? void 0 : _b.value) || 0;
        let data = parseRawRequest(opReturnData);
        if (validateRequestAndValue(data, value))
            return { data, value };
    }
    return null;
}
module.exports = {
    checkAndParseRequest,
};
//# sourceMappingURL=teleport-request-helper.js.map