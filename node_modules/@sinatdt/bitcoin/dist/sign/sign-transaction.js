"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const bitcoin = require("bitcoinjs-lib");
// const { ECPairFactory } = require("ecpair");
// const ecc = require("tiny-secp256k1");
class BitcoinLikeSignTransaction {
    constructor(network) {
        this.network = network;
    }
    signPsbt(extendedUnsignedTransaction, privateKey) {
        // return __awaiter(this, void 0, void 0, function* () {
        //     const ECPair = ECPairFactory(ecc);
        //     const { network } = this;
        //     const keyPair = ECPair.fromPrivateKey(privateKey, {
        //         network,
        //         compressed: true,
        //     });
        //     const psbt = bitcoin.Psbt.fromBase64(extendedUnsignedTransaction.unsignedTransaction, {
        //         network,
        //     });
        //     psbt.signAllInputs(keyPair);
        //     const partialSigendPsbt = psbt.toBase64();
        //     return partialSigendPsbt;
        // });
    }
    finalizePsbts(psbtsBase64 = []) {
        // const finals = psbtsBase64.map((psbtBase64) => bitcoin.Psbt.fromBase64(psbtBase64, { network: this.network }));
        // const psbt = finals.length === 1
        //     ? finals[0]
        //     : new bitcoin.Psbt({ network: this.network }).combine(...finals);
        // psbt.finalizeAllInputs();
        // return psbt.extractTransaction().toHex();
    }
}
module.exports = BitcoinLikeSignTransaction;
//# sourceMappingURL=sign-transaction.js.map