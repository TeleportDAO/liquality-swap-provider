export = BitcoinBase;
declare class BitcoinBase {
    static checkBalanceIsSufficient({ targets, extendedUtxo, changeAddress, feeRate, fullAmount, }: {
        targets: any;
        extendedUtxo: any;
        changeAddress: any;
        feeRate: any;
        fullAmount?: boolean | undefined;
    }): boolean;
    constructor(connectionInfo: {
        api: {
            enabled: boolean;
            provider: string;
        };
    } | undefined, networkName: any);
    network: any;
    hdWalletPath: any;
    transactionBuilder: TransactionBuilder;
    btcInterface: import("./bitcoin-interface");
    signer: BitcoinSign;
    currentAccount: string | null | undefined;
    currentAccountType: string | null;
    privateKey: Buffer | null;
    publicKey: Buffer | null;
    publicKeys: any[];
    setMultiSigAccount(accountType?: string): void;
    setAccountPrivateKey(privateKeyHex: any): void;
    setAccountPublicKey(publicKeyHex: any): void;
    setAccountPrivateKeyByMnemonic({ mnemonic, mnemonicPassword, index, walletNumber, addressType, }: {
        mnemonic: any;
        mnemonicPassword?: string | undefined;
        index?: number | undefined;
        walletNumber?: number | undefined;
        addressType?: string | undefined;
    }): void;
    setAccount(accountType?: string): string | undefined;
    addressObj: import("bitcoinjs-lib").Payment | undefined;
    getExtendedUtxo({ address, addressType, publicKey, derivationPath }: {
        address: string;
        addressType: string;
        publicKey: string | null;
        derivationPath: string | null;
        privateKeyId: string | null;
    }): Promise<any>;
    send({ receiverAddress, amount, fullAmount, speed }: {
        receiverAddress: any;
        amount: any;
        fullAmount?: boolean | undefined;
        speed?: string | undefined;
    }): Promise<any>;
    sendSignedPsbt(signedPsbt: any): Promise<any>;
    sendMultiSignedPsbt(signedPsbts?: any[]): Promise<any>;
}
import TransactionBuilder = require("./transaction-builder/bitcoin-transaction-builder");
import BitcoinSign = require("./sign/sign-transaction");
//# sourceMappingURL=bitcoin-base.d.ts.map