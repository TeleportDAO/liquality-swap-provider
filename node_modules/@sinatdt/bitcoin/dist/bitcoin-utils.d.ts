export function parseRawTransaction(rawTransaction: any): {
    version: any;
    flag: any;
    vin: string;
    vout: string;
    witness: string;
    locktime: string;
};
export function calculateMerkleProof(blockTransactions: any, txId: any, blockMerkleRoot?: null): {
    intermediateNodes: any;
    transactionIndex: any;
};
export function createAddressObjectByHash({ addressType, hash }: {
    addressType: any;
    hash: any;
}, network: any): bitcoin.payments.Payment;
export function createAddressObjectByPublicKey({ addressType, publicKey }: {
    addressType: any;
    publicKey: any;
}, network: any): bitcoin.payments.Payment;
export function createAddressObjectByAddress(address: any, network: any): {
    addressObject: bitcoin.payments.Payment;
    addressType: "p2wpkh" | "p2sh" | "p2pkh";
};
export function createAddressObjectByScript({ addressType, script }: {
    addressType: any;
    script: any;
}, network: any): bitcoin.payments.Payment;
export function getAddressType(address: any, network: any): "p2wpkh" | "p2sh" | "p2pkh";
export function deriveAddressFromPubKey(pubKey: any, network: any): Promise<any>;
export function deriveAddressFromBufferPubKey(pubKey: any, network: any): Promise<any>;
export function getPubKeyFromPrivateKey(privateKey: any, network: any): Promise<Buffer>;
export function reverseBytes(hexInput: any): string;
export function parseBlockHeader(headerHex: any): {};
export function parseRawBlock(rawBlockHex: any, blockNumber?: null, network?: any): {
    blockNumber: null;
    merkleRoot: string;
    prvBlockHash: string;
    transactions: {
        txId: string;
        version: number;
        locktime: number;
        blockNumber: null;
        blockHash: string;
        vout: {
            address: string | null;
            script: string;
            value: number;
        }[];
        vin: {
            txId: string;
            index: number;
        }[];
    }[];
};
export function extractTransactionsAndBlockInfoFromRawBlock(rawBlockHex: any, blockNumber: any, addresses?: any[], inputs?: any[], network?: bitcoin.networks.Network): {
    blockInfo: {
        blockNumber: any;
        blockHash: string;
        merkleRoot: string;
        prvBlockHash: string;
    };
    withdrawTxs: any[];
    depositTxs: any[];
};
import networks = require("./utils/networks");
import bitcoin = require("bitcoinjs-lib");
export { networks };
//# sourceMappingURL=bitcoin-utils.d.ts.map