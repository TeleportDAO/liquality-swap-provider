export = BaseBitcoinLikeTransaction;
declare class BaseBitcoinLikeTransaction {
    static helperHandleInputsAndOutputs({ targets, extendedUtxo, feeRate, changeAddress, fullAmount, }: {
        targets: any;
        extendedUtxo: any;
        feeRate: any;
        changeAddress: any;
        fullAmount: any;
    }): {
        inputs: any;
        fee: any;
        outputs: any;
        change: {
            address: any;
            value: any;
        } | undefined;
    };
    constructor({ network, testnet, feeMin, dustLimit, maximumNumberOfOutputsInTransaction, }: {
        network: any;
        testnet: any;
        feeMin?: number | undefined;
        dustLimit: any;
        maximumNumberOfOutputsInTransaction?: number | undefined;
    });
    testnet: any;
    network: any;
    maximumNumberOfOutputsInTransaction: number;
    feeMin: number;
    dustLimit: any;
    createAddressObject({ addressType, publicKey }: {
        addressType: any;
        publicKey: any;
    }): bitcoin.payments.Payment;
    validateAddress(address: any): boolean;
    _getUtxo(userAddress: any): Promise<void>;
    _getTransactionHex(transactionId: any): Promise<void>;
    convertBaseInputsToInputs(baseInputs: any): Promise<void>;
    createUnsignedTransaction(baseInputs: any): Promise<void>;
    getExtendedUtxo(signerInfo: {
        address: string;
        addressType: string;
        publicKey: string | null;
        privateKeyId: string | null;
        derivationPath: string | null;
    }): Promise<any>;
    convertUtxoToInput({ extendedUtxo, targets, changeAddress, fullAmount, feeRate }: {
        hash: string;
        index: number;
        value: number;
        signerInfo: {
            address: Object;
            publicKey: Object;
            addressType: string;
            privateKeyId: number;
        };
    }): Promise<{
        inputs: void;
        outputs: any;
        change: {
            address: any;
            value: any;
        } | undefined;
        fee: any;
        feeRate: any;
    }>;
    processUnsignedTransaction({ extendedUtxo, targets, changeAddress, fullAmount, feeRate, selfTransaction, }: {
        extendedUtxo: any;
        targets?: any[] | undefined;
        changeAddress?: undefined;
        fullAmount?: boolean | undefined;
        feeRate: any;
        selfTransaction?: boolean | undefined;
    }): Promise<void>;
    getOpReturnTarget(dataHex: any): {
        script: Buffer | undefined;
        value: number;
    };
}
import bitcoin = require("bitcoinjs-lib");
//# sourceMappingURL=transaction-builder-common.d.ts.map