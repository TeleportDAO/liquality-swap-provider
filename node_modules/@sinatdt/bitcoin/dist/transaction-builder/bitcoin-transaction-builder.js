"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const BaseTransactionBuilder = require('./transaction-builder');
const BitcoinInterface = require('../bitcoin-interface');
class BitcoinTransactionBuilder extends BaseTransactionBuilder {
    constructor(connectionInfo, networkName, network) {
        super({
            network,
            testnet: networkName === null || networkName === void 0 ? void 0 : networkName.includes('_testnet'),
            dustLimit: 1000,
        });
        this.btcInterface = new BitcoinInterface(connectionInfo, networkName);
    }
    _getUtxo(userAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            let utxos = yield this.btcInterface.getAddressesUtxo([userAddress]);
            return utxos.map((tx) => ({
                hash: tx.txId,
                value: tx.value,
                index: tx.index,
            }));
        });
    }
    _getFeeRate(speed) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.btcInterface.getFeeRate(speed);
        });
    }
    _getTransactionHex(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.btcInterface.provider.getRawTransaction(transactionId);
        });
    }
    sendTx(txHex) {
        return __awaiter(this, void 0, void 0, function* () {
            let txId = yield this.btcInterface.provider.sendRawTransaction(txHex);
            return txId;
        });
    }
}
module.exports = BitcoinTransactionBuilder;
//# sourceMappingURL=bitcoin-transaction-builder.js.map