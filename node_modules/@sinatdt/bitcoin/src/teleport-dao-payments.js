const BitcoinBase = require("./bitcoin-base")

class TeleportDaoPayment extends BitcoinBase {
  // payment
  async payBurnRequest(receivers) {
    let extendedUtxo = await this.transactionBuilder.getExtendedUtxo({
      address: this.currentAccount,
      addressType: this.currentAccountType,
      publicKey: this.publicKey.toString("hex"),
    })

    // todo : fix feeRate

    let unsignedTx = await this.transactionBuilder.processUnsignedTransaction({
      extendedUtxo,
      targets: receivers,
      changeAddress: this.currentAccount,
      feeRate: 1,
      fullAmount: false,
    })
    let signedPsbt = await this.signer.signPsbt(unsignedTx, this.privateKey)
    let signedTx = this.signer.finalizePsbts([signedPsbt])
    // todo : remove
    console.log(signedTx, signedPsbt)
    let txId = await this.transactionBuilder.sendTx(signedTx)
    console.log(txId)
    return txId
  }

  // send
  async transferBitcoinToEth({
    lockerAddress,
    amount,
    //-----------
    chainId,
    appId,
    recipientAddress, // 20 bytes
    percentageFee, // 2 bytes in satoshi
    speed = 0, // 1 byte
    isExchange = false,
    exchangeTokenAddress = "0x0000000000000000000000000000000000000000", // 20 bytes
    outputAmount = 0, // 28 bytes
    deadline, // 4 bytes
    isFixedToken = false, // 1 byte
    feeSpeed = "normal",
  }) {
    let extendedUtxo = await this.getExtendedUtxo({
      address: this.currentAccount,
      addressType: this.currentAccountType,
      publicKey: this.publicKey.toString("hex"),
    })
    let unsignedTx = this.getBitcoinToEthUnsignedPsbt({
      extendedUtxo,
      lockerAddress,
      amount,
      //-----------
      chainId,
      appId,
      recipientAddress,
      percentageFee,
      speed,
      isExchange,
      exchangeTokenAddress,
      outputAmount,
      deadline,
      isFixedToken,
      feeSpeed,
    })
    let signedPsbt = await this.signer.signPsbt(unsignedTx, this.privateKey)
    let txId = await this.sendSignedPsbt(signedPsbt)
    return txId
  }

  // get
  async getBitcoinToEthTargetOutputs({
    lockerAddress,
    amount,
    //-----------
    chainId,
    appId,
    recipientAddress, // 20 bytes
    percentageFee, // 2 bytes in satoshi
    speed = 0, // 1 byte
    isExchange = false,
    exchangeTokenAddress = "0x0000000000000000000000000000000000000000", // 20 bytes
    outputAmount = 0, // 28 bytes
    deadline, // 4 bytes
    isFixedToken = false, // 1 byte
  }) {
    let dataHex = TeleportDaoPayment.getTransferOpReturnData({
      chainId,
      appId,
      recipientAddress,
      percentageFee,
      speed,
      isExchange,
      exchangeTokenAddress,
      outputAmount,
      deadline,
      isFixedToken,
    })
    let opTarget = this.transactionBuilder.getOpReturnTarget(dataHex)
    return [
      {
        address: lockerAddress,
        value: amount,
      },
      opTarget,
    ]
  }

  async getBitcoinToEthUnsignedPsbt({
    extendedUtxo,
    lockerAddress,
    amount,
    //-----------
    chainId,
    appId,
    recipientAddress, // 20 bytes
    percentageFee, // 2 bytes in satoshi
    speed = 0, // 1 byte
    isExchange = false,
    exchangeTokenAddress = "0x0000000000000000000000000000000000000000", // 20 bytes
    outputAmount = 0, // 28 bytes
    deadline, // 4 bytes
    isFixedToken = false, // 1 byte
    feeSpeed = "normal",
  }) {
    let feeRate = this.transactionBuilder._getFeeRate(feeSpeed)
    let targets = this.getBitcoinToEthTargetOutputs({
      lockerAddress,
      amount,
      chainId,
      appId,
      recipientAddress,
      percentageFee,
      speed,
      isExchange,
      exchangeTokenAddress,
      outputAmount,
      deadline,
      isFixedToken,
    })
    let unsignedTx = await this.transactionBuilder.processUnsignedTransaction({
      extendedUtxo,
      targets,
      changeAddress: this.currentAccount,
      feeRate,
      fullAmount: false,
    })
    return unsignedTx
  }

  // send
  async bitcoinToEthLend({
    lockerAddress,
    amount,
    //-----------
    chainId,
    appId,
    recipientAddress, // 20 bytes
    percentageFee, // 2 bytes in satoshi
    mode = 0, // 1 byte
    isBorrow = false,
    tokenAddress = "0x0000000000000000000000000000000000000000", // 20 bytes
    borrowAmount = 0, // 28 bytes
  }) {
    let dataHex = TeleportDaoPayment.getLendingOpReturnData({
      chainId,
      appId,
      recipientAddress,
      percentageFee,
      mode,
      isBorrow,
      tokenAddress,
      borrowAmount,
    })
    let opTarget = this.transactionBuilder.getOpReturnTarget(dataHex)

    let extendedUtxo = await this.transactionBuilder.getExtendedUtxo({
      address: this.currentAccount,
      addressType: this.currentAccountType,
      publicKey: this.publicKey.toString("hex"),
    })
    let unsignedTx = await this.transactionBuilder.processUnsignedTransaction({
      extendedUtxo,
      targets: [
        {
          address: lockerAddress,
          value: amount,
        },
        opTarget,
      ],
      changeAddress: this.currentAccount,
      feeRate: 1,
      fullAmount: false,
    })
    let signedPsbt = await this.signer.signPsbt(unsignedTx, this.privateKey)
    let signedTx = this.signer.finalizePsbts([signedPsbt])
    console.log(signedTx)
    let txId = await this.transactionBuilder.sendTx(signedTx)
    return txId
  }

  static getTransferOpReturnData({
    chainId,
    appId,
    recipientAddress, // 20 bytes
    percentageFee, // 2 bytes in satoshi
    speed = 0, // 1 byte
    isExchange = false,
    exchangeTokenAddress = "0x0000000000000000000000000000000000000000", // 20 bytes
    outputAmount = 0, // 28 bytes
    deadline, // 4 bytes
    isFixedToken = false, // 1 byte
  }) {
    let chainIdHex = Number(chainId).toString(16).padStart(2, "0")
    let appIdHex = Number(appId).toString(16).padStart(4, "0")
    let recipientAddressHex = recipientAddress.replace("0x", "").toLowerCase().padStart(40, "0")
    let percentageFeeHex = Number((percentageFee * 100).toFixed(0))
      .toString(16)
      .padStart(4, "0")
    let speedHex = speed ? "01" : "00"
    let dataHex = chainIdHex + appIdHex + recipientAddressHex + percentageFeeHex + speedHex
    if (!isExchange) {
      if (dataHex.length !== 26 * 2) throw new Error("invalid data length")
      return dataHex
    }

    let exchangeTokenAddressHex = exchangeTokenAddress
      .replace("0x", "")
      .toLowerCase()
      .padStart(40, "0")
    let outputAmountHex = Number(outputAmount).toString(16).padStart(56, "0")
    let deadlineHex = Number(deadline).toString(16).padStart(8, "0")
    let isFixedTokenHex = isFixedToken ? "01" : "00"

    dataHex = dataHex + exchangeTokenAddressHex + outputAmountHex + deadlineHex + isFixedTokenHex
    if (dataHex.length !== 79 * 2) throw new Error("invalid data length")
    return dataHex
  }

  static getLendingOpReturnData({
    chainId, // 1 byte
    appId, // 1 byte
    recipientAddress, // 20 byte
    percentageFee, // 2 byte
    mode, // 1 byte
    // ------
    isBorrow = false,
    tokenAddress = "0x0000000000000000000000000000000000000000", // 20 bytes
    borrowAmount = 0, // 28 bytes
  }) {
    let chainIdHex = Number(chainId).toString(16).padStart(2, "0")
    let appIdHex = Number(appId).toString(16).padStart(4, "0")
    let recipientAddressHex = recipientAddress.replace("0x", "").toLowerCase().padStart(40, "0")
    let percentageFeeHex = Number((percentageFee * 100).toFixed(0))
      .toString(16)
      .padStart(4, "0")
    let modeHex = Number(mode).toString(16).padStart(2, "0")
    let dataHex = chainIdHex + appIdHex + recipientAddressHex + percentageFeeHex + modeHex
    if (!isBorrow) {
      if (dataHex.length !== 26 * 2) throw new Error("invalid data length")
      return dataHex
    }

    let tokenAddressHex = tokenAddress.replace("0x", "").toLowerCase().padStart(40, "0")
    let borrowAmountHex = Number(borrowAmount).toString(16).padStart(56, "0")
    dataHex = dataHex + tokenAddressHex + borrowAmountHex
    if (dataHex.length !== 74 * 2) throw new Error("invalid data length")
    return dataHex
  }
}

module.exports = TeleportDaoPayment
