const util = require("util")
const axios = require("axios")

const sleep = util.promisify(setTimeout)

async function runWithRetries(
  action,
  config = {
    maxTries: 2,
    retrySleep: 1000,
  },
) {
  const maxTries = config.maxTries || 2
  const retrySleep = config.retrySleep || 1000 // milliseconds
  let lastError
  for (let count = 0; count < maxTries; count += 1) {
    try {
      return await action()
    } catch (error) {
      lastError = error
    }
    await sleep(retrySleep)
  }
  throw lastError || new Error("function failed after retries")
}

function getRandomInteger(min, max) {
  return Math.floor(Math.random() * (max - min)) + min
}

function getAxiosInstance({ baseUrl, timeout = 10000, headers = {}, auth }) {
  let host = baseUrl
  let instance

  instance = axios.create({
    baseURL: host,
    timeout,
    auth,
    headers: {
      ...headers,
    },
  })

  // Add a response interceptor
  instance.interceptors.response.use(
    (response) => response,
    (error) => {
      // todo : fix this part
      if (error.response) {
        const serviceError = new Error(JSON.stringify(error.response.data))
        return Promise.reject(serviceError)
      }

      if (error.request) {
        const serviceError = new Error(error.message)
        return Promise.reject(serviceError)
      }
      return Promise.reject(error)
    },
  )

  return instance
}

module.exports = {
  sleep,
  runWithRetries,
  getRandomInteger,
  getAxiosInstance,
}
