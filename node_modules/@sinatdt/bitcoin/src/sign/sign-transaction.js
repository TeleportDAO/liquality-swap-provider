const bitcoin = require("bitcoinjs-lib")
const { ECPairFactory } = require("ecpair")
const ecc = require("tiny-secp256k1")

class BitcoinLikeSignTransaction {
  constructor(network) {
    this.network = network
  }

  async signPsbt(extendedUnsignedTransaction, privateKey) {
    const ECPair = ECPairFactory(ecc)
    const { network } = this
    const keyPair = ECPair.fromPrivateKey(privateKey, {
      network,
      compressed: true,
    })
    const psbt = bitcoin.Psbt.fromBase64(extendedUnsignedTransaction.unsignedTransaction, {
      network,
    })
    psbt.signAllInputs(keyPair)

    const partialSigendPsbt = psbt.toBase64()
    return partialSigendPsbt
  }

  finalizePsbts(psbtsBase64 = []) {
    const finals = psbtsBase64.map((psbtBase64) =>
      bitcoin.Psbt.fromBase64(psbtBase64, { network: this.network }),
    )
    const psbt =
      finals.length === 1
        ? finals[0]
        : new bitcoin.Psbt({ network: this.network }).combine(...finals)
    psbt.finalizeAllInputs()
    return psbt.extractTransaction().toHex()
  }
}

module.exports = BitcoinLikeSignTransaction
