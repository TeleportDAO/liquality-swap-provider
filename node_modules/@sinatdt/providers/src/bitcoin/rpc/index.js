// not complete
const { getAxiosInstance } = require('../../utils/tools')

class BaseBitcoinLikeRpc {
  constructor({ headers, url: baseUrl, auth }) {
    this.axios = BaseBitcoinLikeRpc.getAxiosInstance({
      baseUrl,
      headers,
      auth,
      timeout: 3 * 60000,
    })
  }

  static getAxiosInstance(provider) {
    return getAxiosInstance(provider)
  }

  static getRpcBody(method, params = []) {
    return {
      jsonrpc: '2.0',
      id: 'teleport-dao',
      method,
      params,
    }
  }

  async getChainInfo() {
    let response = await this.axios.post('/', BaseBitcoinLikeRpc.getRpcBody('getblockchaininfo'))
    return response.data.result
  }

  async getLatestBlockNumber() {
    let response = await this.axios.post('/', BaseBitcoinLikeRpc.getRpcBody('getblockcount'))
    return response.data.result
  }

  async getBlockHash(blockNumber) {
    let response = await this.axios.post(
      '/',
      BaseBitcoinLikeRpc.getRpcBody('getblockhash', [Number(blockNumber)]),
    )
    return response.data.result
  }

  async getBlockByBlockHash(blockHash, verbosity = 1) {
    let response = await this.axios.post(
      '/',
      BaseBitcoinLikeRpc.getRpcBody('getblock', [blockHash, Number(verbosity)]),
    )
    return response.data.result
  }

  async getBlockHeaderByBlockHash(blockHash) {
    let response = await this.axios.post(
      '/',
      BaseBitcoinLikeRpc.getRpcBody('getblockheader', [blockHash, false]),
    )
    return response.data.result
  }

  async getBlockByBlockNumber(blockNumber, verbosity) {
    return this.getBlockByBlockHash(await this.getBlockHash(blockNumber), verbosity)
  }

  async getTransaction(txId) {
    let response = await this.axios.post(
      '/',
      BaseBitcoinLikeRpc.getRpcBody('getrawtransaction', [txId, true]),
    )
    let tx = response.data.result

    let block = await this.getBlockByBlockHash(tx.blockhash)
    return {
      txId: tx.txid,
      version: tx.version,
      locktime: tx.locktime,
      blockNumber: block.height || null,
      blockHash: tx.blockhash || null,
      vout: tx.vout.map((vo) => ({
        address: vo.scriptPubKey.address || null,
        script: vo.scriptPubKey.hex,
        value: Number((Number(vo.value) * 1e8).toFixed()),
      })),
    }
  }

  async getRawTransaction(txId) {
    let response = await this.axios.post(
      '/',
      BaseBitcoinLikeRpc.getRpcBody('getrawtransaction', [txId, true]),
    )
    return response.data.result.hex
  }

  async getTxOutProof(txId) {
    let response = await this.axios.post(
      '/',
      BaseBitcoinLikeRpc.getRpcBody('gettxoutproof', [txId, true]),
    )
    return response.data.result.hex
  }

  async getBlockTransactionIds(blockHash) {
    let block = await this.getBlockByBlockHash(blockHash)
    return block.tx
  }

  async sendRawTransaction(txHex, maxFeeRate = 0.1) {
    let response = await this.axios.post(
      '/',
      BaseBitcoinLikeRpc.getRpcBody('sendrawtransaction', [txHex, maxFeeRate]),
    )
    return response.data.result
  }

  // custom

  async getBlockHeaderHex(blockNumber) {
    const hash = await this.getBlockHash(blockNumber)
    const result = await this.getBlockHeaderByBlockHash(hash)
    return result
  }

  async getEstimateFeeByNumberOfBlock(n) {
    let response = await this.axios.post(
      '/',
      BaseBitcoinLikeRpc.getRpcBody('estimatesmartfee', [n]),
    )

    return response.data.result.feerate * 10 ** 5
  }

  async getFeeRate(speed = 'normal') {
    let fee
    switch (speed) {
      case 'slow':
        fee = this.getEstimateFeeByNumberOfBlock(6)
        break
      case 'fast':
        fee = this.getEstimateFeeByNumberOfBlock(1)
        break
      case 'normal':
      default:
        fee = this.getEstimateFeeByNumberOfBlock(3)
        break
    }

    return fee.toFixed(2)
  }
}

module.exports = BaseBitcoinLikeRpc
