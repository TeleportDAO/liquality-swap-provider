import { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface SwapUtilsInterface extends utils.Interface {
    contractName: "SwapUtils";
    functions: {
        "A_PRECISION()": FunctionFragment;
        "MAX_A()": FunctionFragment;
        "MAX_ADMIN_FEE()": FunctionFragment;
        "MAX_SWAP_FEE()": FunctionFragment;
        "MAX_WITHDRAW_FEE()": FunctionFragment;
        "POOL_PRECISION_DECIMALS()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "A_PRECISION", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_A", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_ADMIN_FEE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_SWAP_FEE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_WITHDRAW_FEE", values?: undefined): string;
    encodeFunctionData(functionFragment: "POOL_PRECISION_DECIMALS", values?: undefined): string;
    decodeFunctionResult(functionFragment: "A_PRECISION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_A", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_ADMIN_FEE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_SWAP_FEE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_WITHDRAW_FEE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "POOL_PRECISION_DECIMALS", data: BytesLike): Result;
    events: {
        "AddLiquidity(address,uint256[],uint256[],uint256,uint256)": EventFragment;
        "RemoveLiquidity(address,uint256[],uint256)": EventFragment;
        "RemoveLiquidityImbalance(address,uint256[],uint256[],uint256,uint256)": EventFragment;
        "RemoveLiquidityOne(address,uint256,uint256,uint256,uint256)": EventFragment;
        "TokenSwap(address,uint256,uint256,uint128,uint128)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoveLiquidityImbalance"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoveLiquidityOne"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenSwap"): EventFragment;
}
export declare type AddLiquidityEvent = TypedEvent<[
    string,
    BigNumber[],
    BigNumber[],
    BigNumber,
    BigNumber
], {
    provider: string;
    tokenAmounts: BigNumber[];
    fees: BigNumber[];
    invariant: BigNumber;
    lpTokenSupply: BigNumber;
}>;
export declare type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;
export declare type RemoveLiquidityEvent = TypedEvent<[
    string,
    BigNumber[],
    BigNumber
], {
    provider: string;
    tokenAmounts: BigNumber[];
    lpTokenSupply: BigNumber;
}>;
export declare type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;
export declare type RemoveLiquidityImbalanceEvent = TypedEvent<[
    string,
    BigNumber[],
    BigNumber[],
    BigNumber,
    BigNumber
], {
    provider: string;
    tokenAmounts: BigNumber[];
    fees: BigNumber[];
    invariant: BigNumber;
    lpTokenSupply: BigNumber;
}>;
export declare type RemoveLiquidityImbalanceEventFilter = TypedEventFilter<RemoveLiquidityImbalanceEvent>;
export declare type RemoveLiquidityOneEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
], {
    provider: string;
    lpTokenAmount: BigNumber;
    lpTokenSupply: BigNumber;
    boughtId: BigNumber;
    tokensBought: BigNumber;
}>;
export declare type RemoveLiquidityOneEventFilter = TypedEventFilter<RemoveLiquidityOneEvent>;
export declare type TokenSwapEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
], {
    buyer: string;
    tokensSold: BigNumber;
    tokensBought: BigNumber;
    soldId: BigNumber;
    boughtId: BigNumber;
}>;
export declare type TokenSwapEventFilter = TypedEventFilter<TokenSwapEvent>;
export interface SwapUtils extends BaseContract {
    contractName: "SwapUtils";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SwapUtilsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        A_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;
        MAX_A(overrides?: CallOverrides): Promise<[BigNumber]>;
        MAX_ADMIN_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;
        MAX_SWAP_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;
        MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;
        POOL_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<[number]>;
    };
    A_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;
    MAX_A(overrides?: CallOverrides): Promise<BigNumber>;
    MAX_ADMIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;
    MAX_SWAP_FEE(overrides?: CallOverrides): Promise<BigNumber>;
    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;
    POOL_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<number>;
    callStatic: {
        A_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_A(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_ADMIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_SWAP_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        POOL_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<number>;
    };
    filters: {
        "AddLiquidity(address,uint256[],uint256[],uint256,uint256)"(provider?: string | null, tokenAmounts?: null, fees?: null, invariant?: null, lpTokenSupply?: null): AddLiquidityEventFilter;
        AddLiquidity(provider?: string | null, tokenAmounts?: null, fees?: null, invariant?: null, lpTokenSupply?: null): AddLiquidityEventFilter;
        "RemoveLiquidity(address,uint256[],uint256)"(provider?: string | null, tokenAmounts?: null, lpTokenSupply?: null): RemoveLiquidityEventFilter;
        RemoveLiquidity(provider?: string | null, tokenAmounts?: null, lpTokenSupply?: null): RemoveLiquidityEventFilter;
        "RemoveLiquidityImbalance(address,uint256[],uint256[],uint256,uint256)"(provider?: string | null, tokenAmounts?: null, fees?: null, invariant?: null, lpTokenSupply?: null): RemoveLiquidityImbalanceEventFilter;
        RemoveLiquidityImbalance(provider?: string | null, tokenAmounts?: null, fees?: null, invariant?: null, lpTokenSupply?: null): RemoveLiquidityImbalanceEventFilter;
        "RemoveLiquidityOne(address,uint256,uint256,uint256,uint256)"(provider?: string | null, lpTokenAmount?: null, lpTokenSupply?: null, boughtId?: null, tokensBought?: null): RemoveLiquidityOneEventFilter;
        RemoveLiquidityOne(provider?: string | null, lpTokenAmount?: null, lpTokenSupply?: null, boughtId?: null, tokensBought?: null): RemoveLiquidityOneEventFilter;
        "TokenSwap(address,uint256,uint256,uint128,uint128)"(buyer?: string | null, tokensSold?: null, tokensBought?: null, soldId?: null, boughtId?: null): TokenSwapEventFilter;
        TokenSwap(buyer?: string | null, tokensSold?: null, tokensBought?: null, soldId?: null, boughtId?: null): TokenSwapEventFilter;
    };
    estimateGas: {
        A_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_A(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_ADMIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_SWAP_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        POOL_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        A_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MAX_A(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MAX_ADMIN_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MAX_SWAP_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        POOL_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=SwapUtils.d.ts.map