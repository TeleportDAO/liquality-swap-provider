import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface L1OptimismTokenBridgeInterface extends utils.Interface {
    contractName: "L1OptimismTokenBridge";
    functions: {
        "deposit(address,address,address,uint256)": FunctionFragment;
        "l1ERC20()": FunctionFragment;
        "l2ERC20Address()": FunctionFragment;
        "messenger()": FunctionFragment;
        "setL1ERC20(address)": FunctionFragment;
        "setL2ERC20(address)": FunctionFragment;
        "setMessenger(address)": FunctionFragment;
        "withdraw(address,uint256)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "deposit", values: [string, string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "l1ERC20", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2ERC20Address", values?: undefined): string;
    encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
    encodeFunctionData(functionFragment: "setL1ERC20", values: [string]): string;
    encodeFunctionData(functionFragment: "setL2ERC20", values: [string]): string;
    encodeFunctionData(functionFragment: "setMessenger", values: [string]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [string, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l1ERC20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2ERC20Address", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setL1ERC20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setL2ERC20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMessenger", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    events: {
        "Deposit(address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
}
export declare type DepositEvent = TypedEvent<[
    string,
    BigNumber
], {
    _sender: string;
    _amount: BigNumber;
}>;
export declare type DepositEventFilter = TypedEventFilter<DepositEvent>;
export interface L1OptimismTokenBridge extends BaseContract {
    contractName: "L1OptimismTokenBridge";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: L1OptimismTokenBridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        deposit(_l1TokenAddress: string, _l2TokenAddress: string, _depositor: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        l1ERC20(overrides?: CallOverrides): Promise<[string]>;
        l2ERC20Address(overrides?: CallOverrides): Promise<[string]>;
        messenger(overrides?: CallOverrides): Promise<[string]>;
        setL1ERC20(_l1erc20: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setL2ERC20(_l2erc20: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setMessenger(_messenger: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        withdraw(_withdrawer: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    deposit(_l1TokenAddress: string, _l2TokenAddress: string, _depositor: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    l1ERC20(overrides?: CallOverrides): Promise<string>;
    l2ERC20Address(overrides?: CallOverrides): Promise<string>;
    messenger(overrides?: CallOverrides): Promise<string>;
    setL1ERC20(_l1erc20: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setL2ERC20(_l2erc20: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setMessenger(_messenger: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    withdraw(_withdrawer: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        deposit(_l1TokenAddress: string, _l2TokenAddress: string, _depositor: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        l1ERC20(overrides?: CallOverrides): Promise<string>;
        l2ERC20Address(overrides?: CallOverrides): Promise<string>;
        messenger(overrides?: CallOverrides): Promise<string>;
        setL1ERC20(_l1erc20: string, overrides?: CallOverrides): Promise<void>;
        setL2ERC20(_l2erc20: string, overrides?: CallOverrides): Promise<void>;
        setMessenger(_messenger: string, overrides?: CallOverrides): Promise<void>;
        withdraw(_withdrawer: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Deposit(address,uint256)"(_sender?: string | null, _amount?: null): DepositEventFilter;
        Deposit(_sender?: string | null, _amount?: null): DepositEventFilter;
    };
    estimateGas: {
        deposit(_l1TokenAddress: string, _l2TokenAddress: string, _depositor: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        l1ERC20(overrides?: CallOverrides): Promise<BigNumber>;
        l2ERC20Address(overrides?: CallOverrides): Promise<BigNumber>;
        messenger(overrides?: CallOverrides): Promise<BigNumber>;
        setL1ERC20(_l1erc20: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setL2ERC20(_l2erc20: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setMessenger(_messenger: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        withdraw(_withdrawer: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        deposit(_l1TokenAddress: string, _l2TokenAddress: string, _depositor: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        l1ERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2ERC20Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setL1ERC20(_l1erc20: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setL2ERC20(_l2erc20: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setMessenger(_messenger: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        withdraw(_withdrawer: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=L1OptimismTokenBridge.d.ts.map