import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface L2XDaiTokenInterface extends utils.Interface {
    contractName: "L2XDaiToken";
    functions: {
        "mintingFinished()": FunctionFragment;
        "name()": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "setBridgeContract(address)": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "PERMIT_TYPEHASH()": FunctionFragment;
        "decimals()": FunctionFragment;
        "DOMAIN_SEPARATOR()": FunctionFragment;
        "increaseAllowance(address,uint256)": FunctionFragment;
        "transferAndCall(address,uint256,bytes)": FunctionFragment;
        "mint(address,uint256)": FunctionFragment;
        "burn(uint256)": FunctionFragment;
        "version()": FunctionFragment;
        "decreaseApproval(address,uint256)": FunctionFragment;
        "claimTokens(address,address)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "isBridge(address)": FunctionFragment;
        "finishMinting()": FunctionFragment;
        "nonces(address)": FunctionFragment;
        "getTokenInterfacesVersion()": FunctionFragment;
        "owner()": FunctionFragment;
        "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
        "symbol()": FunctionFragment;
        "decreaseAllowance(address,uint256)": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "push(address,uint256)": FunctionFragment;
        "move(address,address,uint256)": FunctionFragment;
        "bridgeContract()": FunctionFragment;
        "increaseApproval(address,uint256)": FunctionFragment;
        "allowance(address,address)": FunctionFragment;
        "pull(address,uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "expirations(address,address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "mintingFinished", values?: undefined): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setBridgeContract", values: [string]): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "PERMIT_TYPEHASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferAndCall", values: [string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "mint", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseApproval", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "claimTokens", values: [string, string]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "isBridge", values: [string]): string;
    encodeFunctionData(functionFragment: "finishMinting", values?: undefined): string;
    encodeFunctionData(functionFragment: "nonces", values: [string]): string;
    encodeFunctionData(functionFragment: "getTokenInterfacesVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "permit", values: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        boolean,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transfer", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "push", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "move", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "bridgeContract", values?: undefined): string;
    encodeFunctionData(functionFragment: "increaseApproval", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "allowance", values: [string, string]): string;
    encodeFunctionData(functionFragment: "pull", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "expirations", values: [string, string]): string;
    decodeFunctionResult(functionFragment: "mintingFinished", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBridgeContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PERMIT_TYPEHASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseApproval", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isBridge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finishMinting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTokenInterfacesVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseApproval", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "expirations", data: BytesLike): Result;
    events: {
        "ContractFallbackCallFailed(address,address,uint256)": EventFragment;
        "Mint(address,uint256)": EventFragment;
        "MintFinished()": EventFragment;
        "OwnershipRenounced(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "Burn(address,uint256)": EventFragment;
        "Transfer(address,address,uint256,bytes)": EventFragment;
        "Approval(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ContractFallbackCallFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MintFinished"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipRenounced"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
}
export declare type ContractFallbackCallFailedEvent = TypedEvent<[
    string,
    string,
    BigNumber
], {
    from: string;
    to: string;
    value: BigNumber;
}>;
export declare type ContractFallbackCallFailedEventFilter = TypedEventFilter<ContractFallbackCallFailedEvent>;
export declare type MintEvent = TypedEvent<[
    string,
    BigNumber
], {
    to: string;
    amount: BigNumber;
}>;
export declare type MintEventFilter = TypedEventFilter<MintEvent>;
export declare type MintFinishedEvent = TypedEvent<[], {}>;
export declare type MintFinishedEventFilter = TypedEventFilter<MintFinishedEvent>;
export declare type OwnershipRenouncedEvent = TypedEvent<[
    string
], {
    previousOwner: string;
}>;
export declare type OwnershipRenouncedEventFilter = TypedEventFilter<OwnershipRenouncedEvent>;
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], {
    previousOwner: string;
    newOwner: string;
}>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export declare type BurnEvent = TypedEvent<[
    string,
    BigNumber
], {
    burner: string;
    value: BigNumber;
}>;
export declare type BurnEventFilter = TypedEventFilter<BurnEvent>;
export declare type Transfer_address_address_uint256_bytes_Event = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], {
    from: string;
    to: string;
    value: BigNumber;
    data: string;
}>;
export declare type Transfer_address_address_uint256_bytes_EventFilter = TypedEventFilter<Transfer_address_address_uint256_bytes_Event>;
export declare type Transfer_address_address_uint256_Event = TypedEvent<[
    string,
    string,
    BigNumber
], {
    from: string;
    to: string;
    value: BigNumber;
}>;
export declare type Transfer_address_address_uint256_EventFilter = TypedEventFilter<Transfer_address_address_uint256_Event>;
export declare type ApprovalEvent = TypedEvent<[
    string,
    string,
    BigNumber
], {
    owner: string;
    spender: string;
    value: BigNumber;
}>;
export declare type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
export interface L2XDaiToken extends BaseContract {
    contractName: "L2XDaiToken";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: L2XDaiTokenInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        mintingFinished(overrides?: CallOverrides): Promise<[boolean]>;
        name(overrides?: CallOverrides): Promise<[string]>;
        approve(_spender: string, _value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setBridgeContract(_bridgeContract: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        transferFrom(_sender: string, _recipient: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;
        decimals(overrides?: CallOverrides): Promise<[number]>;
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferAndCall(_to: string, _value: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        mint(_to: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        burn(_value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[string]>;
        decreaseApproval(_spender: string, _subtractedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        claimTokens(_token: string, _to: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        balanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        isBridge(_address: string, overrides?: CallOverrides): Promise<[boolean]>;
        finishMinting(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        getTokenInterfacesVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            major: BigNumber;
            minor: BigNumber;
            patch: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        permit(_holder: string, _spender: string, _nonce: BigNumberish, _expiry: BigNumberish, _allowed: boolean, _v: BigNumberish, _r: BytesLike, _s: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        symbol(overrides?: CallOverrides): Promise<[string]>;
        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transfer(_to: string, _value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        push(_to: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        move(_from: string, _to: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        bridgeContract(overrides?: CallOverrides): Promise<[string]>;
        increaseApproval(_spender: string, _addedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        allowance(_owner: string, _spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        pull(_from: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(_newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        expirations(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    mintingFinished(overrides?: CallOverrides): Promise<boolean>;
    name(overrides?: CallOverrides): Promise<string>;
    approve(_spender: string, _value: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setBridgeContract(_bridgeContract: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    transferFrom(_sender: string, _recipient: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
    decimals(overrides?: CallOverrides): Promise<number>;
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferAndCall(_to: string, _value: BigNumberish, _data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    mint(_to: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    burn(_value: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<string>;
    decreaseApproval(_spender: string, _subtractedValue: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    claimTokens(_token: string, _to: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    isBridge(_address: string, overrides?: CallOverrides): Promise<boolean>;
    finishMinting(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    getTokenInterfacesVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    permit(_holder: string, _spender: string, _nonce: BigNumberish, _expiry: BigNumberish, _allowed: boolean, _v: BigNumberish, _r: BytesLike, _s: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    symbol(overrides?: CallOverrides): Promise<string>;
    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transfer(_to: string, _value: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    push(_to: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    move(_from: string, _to: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    bridgeContract(overrides?: CallOverrides): Promise<string>;
    increaseApproval(_spender: string, _addedValue: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    allowance(_owner: string, _spender: string, overrides?: CallOverrides): Promise<BigNumber>;
    pull(_from: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(_newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    expirations(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        mintingFinished(overrides?: CallOverrides): Promise<boolean>;
        name(overrides?: CallOverrides): Promise<string>;
        approve(_spender: string, _value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        setBridgeContract(_bridgeContract: string, overrides?: CallOverrides): Promise<void>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transferFrom(_sender: string, _recipient: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
        decimals(overrides?: CallOverrides): Promise<number>;
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        transferAndCall(_to: string, _value: BigNumberish, _data: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        mint(_to: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        burn(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<string>;
        decreaseApproval(_spender: string, _subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        claimTokens(_token: string, _to: string, overrides?: CallOverrides): Promise<void>;
        balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        isBridge(_address: string, overrides?: CallOverrides): Promise<boolean>;
        finishMinting(overrides?: CallOverrides): Promise<boolean>;
        nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        getTokenInterfacesVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            major: BigNumber;
            minor: BigNumber;
            patch: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        permit(_holder: string, _spender: string, _nonce: BigNumberish, _expiry: BigNumberish, _allowed: boolean, _v: BigNumberish, _r: BytesLike, _s: BytesLike, overrides?: CallOverrides): Promise<void>;
        symbol(overrides?: CallOverrides): Promise<string>;
        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        transfer(_to: string, _value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        push(_to: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        move(_from: string, _to: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        bridgeContract(overrides?: CallOverrides): Promise<string>;
        increaseApproval(_spender: string, _addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        allowance(_owner: string, _spender: string, overrides?: CallOverrides): Promise<BigNumber>;
        pull(_from: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        transferOwnership(_newOwner: string, overrides?: CallOverrides): Promise<void>;
        expirations(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "ContractFallbackCallFailed(address,address,uint256)"(from?: null, to?: null, value?: null): ContractFallbackCallFailedEventFilter;
        ContractFallbackCallFailed(from?: null, to?: null, value?: null): ContractFallbackCallFailedEventFilter;
        "Mint(address,uint256)"(to?: string | null, amount?: null): MintEventFilter;
        Mint(to?: string | null, amount?: null): MintEventFilter;
        "MintFinished()"(): MintFinishedEventFilter;
        MintFinished(): MintFinishedEventFilter;
        "OwnershipRenounced(address)"(previousOwner?: string | null): OwnershipRenouncedEventFilter;
        OwnershipRenounced(previousOwner?: string | null): OwnershipRenouncedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        "Burn(address,uint256)"(burner?: string | null, value?: null): BurnEventFilter;
        Burn(burner?: string | null, value?: null): BurnEventFilter;
        "Transfer(address,address,uint256,bytes)"(from?: string | null, to?: string | null, value?: null, data?: null): Transfer_address_address_uint256_bytes_EventFilter;
        "Transfer(address,address,uint256)"(from?: string | null, to?: string | null, value?: null): Transfer_address_address_uint256_EventFilter;
        "Approval(address,address,uint256)"(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;
        Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;
    };
    estimateGas: {
        mintingFinished(overrides?: CallOverrides): Promise<BigNumber>;
        name(overrides?: CallOverrides): Promise<BigNumber>;
        approve(_spender: string, _value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setBridgeContract(_bridgeContract: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transferFrom(_sender: string, _recipient: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<BigNumber>;
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferAndCall(_to: string, _value: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        mint(_to: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        burn(_value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        decreaseApproval(_spender: string, _subtractedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        claimTokens(_token: string, _to: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        isBridge(_address: string, overrides?: CallOverrides): Promise<BigNumber>;
        finishMinting(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        getTokenInterfacesVersion(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        permit(_holder: string, _spender: string, _nonce: BigNumberish, _expiry: BigNumberish, _allowed: boolean, _v: BigNumberish, _r: BytesLike, _s: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        symbol(overrides?: CallOverrides): Promise<BigNumber>;
        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transfer(_to: string, _value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        push(_to: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        move(_from: string, _to: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        bridgeContract(overrides?: CallOverrides): Promise<BigNumber>;
        increaseApproval(_spender: string, _addedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        allowance(_owner: string, _spender: string, overrides?: CallOverrides): Promise<BigNumber>;
        pull(_from: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(_newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        expirations(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        mintingFinished(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approve(_spender: string, _value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setBridgeContract(_bridgeContract: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferFrom(_sender: string, _recipient: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferAndCall(_to: string, _value: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        mint(_to: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        burn(_value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decreaseApproval(_spender: string, _subtractedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        claimTokens(_token: string, _to: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        balanceOf(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        isBridge(_address: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        finishMinting(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTokenInterfacesVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        permit(_holder: string, _spender: string, _nonce: BigNumberish, _expiry: BigNumberish, _allowed: boolean, _v: BigNumberish, _r: BytesLike, _s: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transfer(_to: string, _value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        push(_to: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        move(_from: string, _to: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        bridgeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increaseApproval(_spender: string, _addedValue: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        allowance(_owner: string, _spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pull(_from: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(_newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        expirations(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=L2XDaiToken.d.ts.map