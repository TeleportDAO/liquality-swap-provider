import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface IArbSysInterface extends utils.Interface {
    contractName: "IArbSys";
    functions: {
        "arbOSVersion()": FunctionFragment;
        "getTransactionCount(address)": FunctionFragment;
        "sendTxToL1(address,bytes)": FunctionFragment;
        "withdrawEth(address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "arbOSVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTransactionCount", values: [string]): string;
    encodeFunctionData(functionFragment: "sendTxToL1", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "withdrawEth", values: [string]): string;
    decodeFunctionResult(functionFragment: "arbOSVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTransactionCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendTxToL1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawEth", data: BytesLike): Result;
    events: {
        "ERC20Withdrawal(address,address,uint256)": EventFragment;
        "ERC721Withdrawal(address,address,uint256)": EventFragment;
        "EthWithdrawal(address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ERC20Withdrawal"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ERC721Withdrawal"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EthWithdrawal"): EventFragment;
}
export declare type ERC20WithdrawalEvent = TypedEvent<[
    string,
    string,
    BigNumber
], {
    destAddr: string;
    tokenAddr: string;
    amount: BigNumber;
}>;
export declare type ERC20WithdrawalEventFilter = TypedEventFilter<ERC20WithdrawalEvent>;
export declare type ERC721WithdrawalEvent = TypedEvent<[
    string,
    string,
    BigNumber
], {
    destAddr: string;
    tokenAddr: string;
    id: BigNumber;
}>;
export declare type ERC721WithdrawalEventFilter = TypedEventFilter<ERC721WithdrawalEvent>;
export declare type EthWithdrawalEvent = TypedEvent<[
    string,
    BigNumber
], {
    destAddr: string;
    amount: BigNumber;
}>;
export declare type EthWithdrawalEventFilter = TypedEventFilter<EthWithdrawalEvent>;
export interface IArbSys extends BaseContract {
    contractName: "IArbSys";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IArbSysInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        arbOSVersion(overrides?: CallOverrides): Promise<[BigNumber]>;
        getTransactionCount(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        sendTxToL1(destAddr: string, calldataForL1: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        withdrawEth(dest: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>;
    getTransactionCount(account: string, overrides?: CallOverrides): Promise<BigNumber>;
    sendTxToL1(destAddr: string, calldataForL1: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    withdrawEth(dest: string, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>;
        getTransactionCount(account: string, overrides?: CallOverrides): Promise<BigNumber>;
        sendTxToL1(destAddr: string, calldataForL1: BytesLike, overrides?: CallOverrides): Promise<void>;
        withdrawEth(dest: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ERC20Withdrawal(address,address,uint256)"(destAddr?: string | null, tokenAddr?: string | null, amount?: null): ERC20WithdrawalEventFilter;
        ERC20Withdrawal(destAddr?: string | null, tokenAddr?: string | null, amount?: null): ERC20WithdrawalEventFilter;
        "ERC721Withdrawal(address,address,uint256)"(destAddr?: string | null, tokenAddr?: string | null, id?: BigNumberish | null): ERC721WithdrawalEventFilter;
        ERC721Withdrawal(destAddr?: string | null, tokenAddr?: string | null, id?: BigNumberish | null): ERC721WithdrawalEventFilter;
        "EthWithdrawal(address,uint256)"(destAddr?: string | null, amount?: null): EthWithdrawalEventFilter;
        EthWithdrawal(destAddr?: string | null, amount?: null): EthWithdrawalEventFilter;
    };
    estimateGas: {
        arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>;
        getTransactionCount(account: string, overrides?: CallOverrides): Promise<BigNumber>;
        sendTxToL1(destAddr: string, calldataForL1: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        withdrawEth(dest: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        arbOSVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTransactionCount(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sendTxToL1(destAddr: string, calldataForL1: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        withdrawEth(dest: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IArbSys.d.ts.map