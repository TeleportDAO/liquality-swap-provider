import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface ArbitrumMessengerWrapperInterface extends utils.Interface {
    contractName: "ArbitrumMessengerWrapper";
    functions: {
        "arbInbox()": FunctionFragment;
        "defaultCallValue()": FunctionFragment;
        "defaultGasLimit()": FunctionFragment;
        "defaultGasPrice()": FunctionFragment;
        "l1BridgeAddress()": FunctionFragment;
        "l2BridgeAddress()": FunctionFragment;
        "sendCrossDomainMessage(bytes)": FunctionFragment;
        "verifySender(address,bytes)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "arbInbox", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultCallValue", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultGasLimit", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultGasPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "l1BridgeAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2BridgeAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "sendCrossDomainMessage", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "verifySender", values: [string, BytesLike]): string;
    decodeFunctionResult(functionFragment: "arbInbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultCallValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultGasLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultGasPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l1BridgeAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2BridgeAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCrossDomainMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifySender", data: BytesLike): Result;
    events: {};
}
export interface ArbitrumMessengerWrapper extends BaseContract {
    contractName: "ArbitrumMessengerWrapper";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ArbitrumMessengerWrapperInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        arbInbox(overrides?: CallOverrides): Promise<[string]>;
        defaultCallValue(overrides?: CallOverrides): Promise<[BigNumber]>;
        defaultGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;
        defaultGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
        l1BridgeAddress(overrides?: CallOverrides): Promise<[string]>;
        l2BridgeAddress(overrides?: CallOverrides): Promise<[string]>;
        sendCrossDomainMessage(_calldata: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        verifySender(l1BridgeCaller: string, arg1: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    arbInbox(overrides?: CallOverrides): Promise<string>;
    defaultCallValue(overrides?: CallOverrides): Promise<BigNumber>;
    defaultGasLimit(overrides?: CallOverrides): Promise<BigNumber>;
    defaultGasPrice(overrides?: CallOverrides): Promise<BigNumber>;
    l1BridgeAddress(overrides?: CallOverrides): Promise<string>;
    l2BridgeAddress(overrides?: CallOverrides): Promise<string>;
    sendCrossDomainMessage(_calldata: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    verifySender(l1BridgeCaller: string, arg1: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        arbInbox(overrides?: CallOverrides): Promise<string>;
        defaultCallValue(overrides?: CallOverrides): Promise<BigNumber>;
        defaultGasLimit(overrides?: CallOverrides): Promise<BigNumber>;
        defaultGasPrice(overrides?: CallOverrides): Promise<BigNumber>;
        l1BridgeAddress(overrides?: CallOverrides): Promise<string>;
        l2BridgeAddress(overrides?: CallOverrides): Promise<string>;
        sendCrossDomainMessage(_calldata: BytesLike, overrides?: CallOverrides): Promise<void>;
        verifySender(l1BridgeCaller: string, arg1: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        arbInbox(overrides?: CallOverrides): Promise<BigNumber>;
        defaultCallValue(overrides?: CallOverrides): Promise<BigNumber>;
        defaultGasLimit(overrides?: CallOverrides): Promise<BigNumber>;
        defaultGasPrice(overrides?: CallOverrides): Promise<BigNumber>;
        l1BridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;
        l2BridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;
        sendCrossDomainMessage(_calldata: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        verifySender(l1BridgeCaller: string, arg1: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        arbInbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultCallValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l1BridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2BridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sendCrossDomainMessage(_calldata: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        verifySender(l1BridgeCaller: string, arg1: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=ArbitrumMessengerWrapper.d.ts.map