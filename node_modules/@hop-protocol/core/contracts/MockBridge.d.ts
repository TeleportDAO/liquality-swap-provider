import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export declare namespace Bridge {
    type TransferRootStruct = {
        total: BigNumberish;
        amountWithdrawn: BigNumberish;
        createdAt: BigNumberish;
    };
    type TransferRootStructOutput = [BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        amountWithdrawn: BigNumber;
        createdAt: BigNumber;
    };
}
export interface MockBridgeInterface extends utils.Interface {
    contractName: "MockBridge";
    functions: {
        "addBonder(address)": FunctionFragment;
        "bondWithdrawal(address,uint256,bytes32,uint256)": FunctionFragment;
        "getBondedWithdrawalAmount(address,bytes32)": FunctionFragment;
        "getChainId()": FunctionFragment;
        "getCredit(address)": FunctionFragment;
        "getDebitAndAdditionalDebit(address)": FunctionFragment;
        "getIsBonder(address)": FunctionFragment;
        "getRawDebit(address)": FunctionFragment;
        "getTransferId(uint256,address,uint256,bytes32,uint256,uint256,uint256)": FunctionFragment;
        "getTransferRoot(bytes32,uint256)": FunctionFragment;
        "getTransferRootId(bytes32,uint256)": FunctionFragment;
        "isTransferIdSpent(bytes32)": FunctionFragment;
        "removeBonder(address)": FunctionFragment;
        "rescueTransferRoot(bytes32,uint256,address)": FunctionFragment;
        "settleBondedWithdrawal(address,bytes32,bytes32,uint256,uint256,bytes32[],uint256)": FunctionFragment;
        "settleBondedWithdrawals(address,bytes32[],uint256)": FunctionFragment;
        "stake(address,uint256)": FunctionFragment;
        "unstake(uint256)": FunctionFragment;
        "withdraw(address,uint256,bytes32,uint256,uint256,uint256,bytes32,uint256,uint256,bytes32[],uint256)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "addBonder", values: [string]): string;
    encodeFunctionData(functionFragment: "bondWithdrawal", values: [string, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getBondedWithdrawalAmount", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "getChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCredit", values: [string]): string;
    encodeFunctionData(functionFragment: "getDebitAndAdditionalDebit", values: [string]): string;
    encodeFunctionData(functionFragment: "getIsBonder", values: [string]): string;
    encodeFunctionData(functionFragment: "getRawDebit", values: [string]): string;
    encodeFunctionData(functionFragment: "getTransferId", values: [
        BigNumberish,
        string,
        BigNumberish,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "getTransferRoot", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTransferRootId", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isTransferIdSpent", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "removeBonder", values: [string]): string;
    encodeFunctionData(functionFragment: "rescueTransferRoot", values: [BytesLike, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "settleBondedWithdrawal", values: [
        string,
        BytesLike,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BytesLike[],
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "settleBondedWithdrawals", values: [string, BytesLike[], BigNumberish]): string;
    encodeFunctionData(functionFragment: "stake", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "unstake", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [
        string,
        BigNumberish,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BytesLike[],
        BigNumberish
    ]): string;
    decodeFunctionResult(functionFragment: "addBonder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bondWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBondedWithdrawalAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCredit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDebitAndAdditionalDebit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getIsBonder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRawDebit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTransferId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTransferRoot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTransferRootId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isTransferIdSpent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeBonder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rescueTransferRoot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "settleBondedWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "settleBondedWithdrawals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    events: {
        "BonderAdded(address)": EventFragment;
        "BonderRemoved(address)": EventFragment;
        "MultipleWithdrawalsSettled(address,bytes32,uint256)": EventFragment;
        "Stake(address,uint256)": EventFragment;
        "TransferRootSet(bytes32,uint256)": EventFragment;
        "Unstake(address,uint256)": EventFragment;
        "WithdrawalBondSettled(address,bytes32,bytes32)": EventFragment;
        "WithdrawalBonded(bytes32,uint256)": EventFragment;
        "Withdrew(bytes32,address,uint256,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "BonderAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BonderRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MultipleWithdrawalsSettled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TransferRootSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrawalBondSettled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrawalBonded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
}
export declare type BonderAddedEvent = TypedEvent<[string], {
    newBonder: string;
}>;
export declare type BonderAddedEventFilter = TypedEventFilter<BonderAddedEvent>;
export declare type BonderRemovedEvent = TypedEvent<[
    string
], {
    previousBonder: string;
}>;
export declare type BonderRemovedEventFilter = TypedEventFilter<BonderRemovedEvent>;
export declare type MultipleWithdrawalsSettledEvent = TypedEvent<[
    string,
    string,
    BigNumber
], {
    bonder: string;
    rootHash: string;
    totalBondsSettled: BigNumber;
}>;
export declare type MultipleWithdrawalsSettledEventFilter = TypedEventFilter<MultipleWithdrawalsSettledEvent>;
export declare type StakeEvent = TypedEvent<[
    string,
    BigNumber
], {
    account: string;
    amount: BigNumber;
}>;
export declare type StakeEventFilter = TypedEventFilter<StakeEvent>;
export declare type TransferRootSetEvent = TypedEvent<[
    string,
    BigNumber
], {
    rootHash: string;
    totalAmount: BigNumber;
}>;
export declare type TransferRootSetEventFilter = TypedEventFilter<TransferRootSetEvent>;
export declare type UnstakeEvent = TypedEvent<[
    string,
    BigNumber
], {
    account: string;
    amount: BigNumber;
}>;
export declare type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;
export declare type WithdrawalBondSettledEvent = TypedEvent<[
    string,
    string,
    string
], {
    bonder: string;
    transferId: string;
    rootHash: string;
}>;
export declare type WithdrawalBondSettledEventFilter = TypedEventFilter<WithdrawalBondSettledEvent>;
export declare type WithdrawalBondedEvent = TypedEvent<[
    string,
    BigNumber
], {
    transferId: string;
    amount: BigNumber;
}>;
export declare type WithdrawalBondedEventFilter = TypedEventFilter<WithdrawalBondedEvent>;
export declare type WithdrewEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], {
    transferId: string;
    recipient: string;
    amount: BigNumber;
    transferNonce: string;
}>;
export declare type WithdrewEventFilter = TypedEventFilter<WithdrewEvent>;
export interface MockBridge extends BaseContract {
    contractName: "MockBridge";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockBridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        bondWithdrawal(recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getBondedWithdrawalAmount(bonder: string, transferId: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
        getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;
        getCredit(bonder: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        getDebitAndAdditionalDebit(bonder: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<[boolean]>;
        getRawDebit(bonder: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        getTransferId(chainId: BigNumberish, recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        getTransferRoot(rootHash: BytesLike, totalAmount: BigNumberish, overrides?: CallOverrides): Promise<[Bridge.TransferRootStructOutput]>;
        getTransferRootId(rootHash: BytesLike, totalAmount: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        isTransferIdSpent(transferId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        removeBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        rescueTransferRoot(rootHash: BytesLike, originalAmount: BigNumberish, recipient: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        settleBondedWithdrawal(bonder: string, transferId: BytesLike, rootHash: BytesLike, transferRootTotalAmount: BigNumberish, transferIdTreeIndex: BigNumberish, siblings: BytesLike[], totalLeaves: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        settleBondedWithdrawals(bonder: string, transferIds: BytesLike[], totalAmount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        stake(bonder: string, amount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        unstake(amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        withdraw(recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, rootHash: BytesLike, transferRootTotalAmount: BigNumberish, transferIdTreeIndex: BigNumberish, siblings: BytesLike[], totalLeaves: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    addBonder(bonder: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    bondWithdrawal(recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getBondedWithdrawalAmount(bonder: string, transferId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    getChainId(overrides?: CallOverrides): Promise<BigNumber>;
    getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
    getDebitAndAdditionalDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
    getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<boolean>;
    getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
    getTransferId(chainId: BigNumberish, recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, overrides?: CallOverrides): Promise<string>;
    getTransferRoot(rootHash: BytesLike, totalAmount: BigNumberish, overrides?: CallOverrides): Promise<Bridge.TransferRootStructOutput>;
    getTransferRootId(rootHash: BytesLike, totalAmount: BigNumberish, overrides?: CallOverrides): Promise<string>;
    isTransferIdSpent(transferId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    removeBonder(bonder: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    rescueTransferRoot(rootHash: BytesLike, originalAmount: BigNumberish, recipient: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    settleBondedWithdrawal(bonder: string, transferId: BytesLike, rootHash: BytesLike, transferRootTotalAmount: BigNumberish, transferIdTreeIndex: BigNumberish, siblings: BytesLike[], totalLeaves: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    settleBondedWithdrawals(bonder: string, transferIds: BytesLike[], totalAmount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    stake(bonder: string, amount: BigNumberish, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    unstake(amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    withdraw(recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, rootHash: BytesLike, transferRootTotalAmount: BigNumberish, transferIdTreeIndex: BigNumberish, siblings: BytesLike[], totalLeaves: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addBonder(bonder: string, overrides?: CallOverrides): Promise<void>;
        bondWithdrawal(recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, overrides?: CallOverrides): Promise<void>;
        getBondedWithdrawalAmount(bonder: string, transferId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getChainId(overrides?: CallOverrides): Promise<BigNumber>;
        getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getDebitAndAdditionalDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<boolean>;
        getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getTransferId(chainId: BigNumberish, recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getTransferRoot(rootHash: BytesLike, totalAmount: BigNumberish, overrides?: CallOverrides): Promise<Bridge.TransferRootStructOutput>;
        getTransferRootId(rootHash: BytesLike, totalAmount: BigNumberish, overrides?: CallOverrides): Promise<string>;
        isTransferIdSpent(transferId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        removeBonder(bonder: string, overrides?: CallOverrides): Promise<void>;
        rescueTransferRoot(rootHash: BytesLike, originalAmount: BigNumberish, recipient: string, overrides?: CallOverrides): Promise<void>;
        settleBondedWithdrawal(bonder: string, transferId: BytesLike, rootHash: BytesLike, transferRootTotalAmount: BigNumberish, transferIdTreeIndex: BigNumberish, siblings: BytesLike[], totalLeaves: BigNumberish, overrides?: CallOverrides): Promise<void>;
        settleBondedWithdrawals(bonder: string, transferIds: BytesLike[], totalAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        stake(bonder: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        withdraw(recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, rootHash: BytesLike, transferRootTotalAmount: BigNumberish, transferIdTreeIndex: BigNumberish, siblings: BytesLike[], totalLeaves: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "BonderAdded(address)"(newBonder?: string | null): BonderAddedEventFilter;
        BonderAdded(newBonder?: string | null): BonderAddedEventFilter;
        "BonderRemoved(address)"(previousBonder?: string | null): BonderRemovedEventFilter;
        BonderRemoved(previousBonder?: string | null): BonderRemovedEventFilter;
        "MultipleWithdrawalsSettled(address,bytes32,uint256)"(bonder?: string | null, rootHash?: BytesLike | null, totalBondsSettled?: null): MultipleWithdrawalsSettledEventFilter;
        MultipleWithdrawalsSettled(bonder?: string | null, rootHash?: BytesLike | null, totalBondsSettled?: null): MultipleWithdrawalsSettledEventFilter;
        "Stake(address,uint256)"(account?: string | null, amount?: null): StakeEventFilter;
        Stake(account?: string | null, amount?: null): StakeEventFilter;
        "TransferRootSet(bytes32,uint256)"(rootHash?: BytesLike | null, totalAmount?: null): TransferRootSetEventFilter;
        TransferRootSet(rootHash?: BytesLike | null, totalAmount?: null): TransferRootSetEventFilter;
        "Unstake(address,uint256)"(account?: string | null, amount?: null): UnstakeEventFilter;
        Unstake(account?: string | null, amount?: null): UnstakeEventFilter;
        "WithdrawalBondSettled(address,bytes32,bytes32)"(bonder?: string | null, transferId?: BytesLike | null, rootHash?: BytesLike | null): WithdrawalBondSettledEventFilter;
        WithdrawalBondSettled(bonder?: string | null, transferId?: BytesLike | null, rootHash?: BytesLike | null): WithdrawalBondSettledEventFilter;
        "WithdrawalBonded(bytes32,uint256)"(transferId?: BytesLike | null, amount?: null): WithdrawalBondedEventFilter;
        WithdrawalBonded(transferId?: BytesLike | null, amount?: null): WithdrawalBondedEventFilter;
        "Withdrew(bytes32,address,uint256,bytes32)"(transferId?: BytesLike | null, recipient?: string | null, amount?: null, transferNonce?: null): WithdrewEventFilter;
        Withdrew(transferId?: BytesLike | null, recipient?: string | null, amount?: null, transferNonce?: null): WithdrewEventFilter;
    };
    estimateGas: {
        addBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        bondWithdrawal(recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getBondedWithdrawalAmount(bonder: string, transferId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getChainId(overrides?: CallOverrides): Promise<BigNumber>;
        getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getDebitAndAdditionalDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getTransferId(chainId: BigNumberish, recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getTransferRoot(rootHash: BytesLike, totalAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getTransferRootId(rootHash: BytesLike, totalAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isTransferIdSpent(transferId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        removeBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        rescueTransferRoot(rootHash: BytesLike, originalAmount: BigNumberish, recipient: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        settleBondedWithdrawal(bonder: string, transferId: BytesLike, rootHash: BytesLike, transferRootTotalAmount: BigNumberish, transferIdTreeIndex: BigNumberish, siblings: BytesLike[], totalLeaves: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        settleBondedWithdrawals(bonder: string, transferIds: BytesLike[], totalAmount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        stake(bonder: string, amount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        unstake(amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        withdraw(recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, rootHash: BytesLike, transferRootTotalAmount: BigNumberish, transferIdTreeIndex: BigNumberish, siblings: BytesLike[], totalLeaves: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        bondWithdrawal(recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getBondedWithdrawalAmount(bonder: string, transferId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCredit(bonder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDebitAndAdditionalDebit(bonder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRawDebit(bonder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTransferId(chainId: BigNumberish, recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTransferRoot(rootHash: BytesLike, totalAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTransferRootId(rootHash: BytesLike, totalAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isTransferIdSpent(transferId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        rescueTransferRoot(rootHash: BytesLike, originalAmount: BigNumberish, recipient: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        settleBondedWithdrawal(bonder: string, transferId: BytesLike, rootHash: BytesLike, transferRootTotalAmount: BigNumberish, transferIdTreeIndex: BigNumberish, siblings: BytesLike[], totalLeaves: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        settleBondedWithdrawals(bonder: string, transferIds: BytesLike[], totalAmount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        stake(bonder: string, amount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        unstake(amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        withdraw(recipient: string, amount: BigNumberish, transferNonce: BytesLike, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, rootHash: BytesLike, transferRootTotalAmount: BigNumberish, transferIdTreeIndex: BigNumberish, siblings: BytesLike[], totalLeaves: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MockBridge.d.ts.map