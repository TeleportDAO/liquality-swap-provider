import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface StakingRewardsFactoryInterface extends utils.Interface {
    contractName: "StakingRewardsFactory";
    functions: {
        "deploy(address,uint256)": FunctionFragment;
        "isOwner()": FunctionFragment;
        "notifyRewardAmount(address)": FunctionFragment;
        "notifyRewardAmounts()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "rewardsToken()": FunctionFragment;
        "stakingRewardsGenesis()": FunctionFragment;
        "stakingRewardsInfoByStakingToken(address)": FunctionFragment;
        "stakingTokens(uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "deploy", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "notifyRewardAmount", values: [string]): string;
    encodeFunctionData(functionFragment: "notifyRewardAmounts", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardsToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "stakingRewardsGenesis", values?: undefined): string;
    encodeFunctionData(functionFragment: "stakingRewardsInfoByStakingToken", values: [string]): string;
    encodeFunctionData(functionFragment: "stakingTokens", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "notifyRewardAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "notifyRewardAmounts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardsToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakingRewardsGenesis", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakingRewardsInfoByStakingToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakingTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], {
    previousOwner: string;
    newOwner: string;
}>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface StakingRewardsFactory extends BaseContract {
    contractName: "StakingRewardsFactory";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: StakingRewardsFactoryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        deploy(stakingToken: string, rewardAmount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        isOwner(overrides?: CallOverrides): Promise<[boolean]>;
        notifyRewardAmount(stakingToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        notifyRewardAmounts(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        rewardsToken(overrides?: CallOverrides): Promise<[string]>;
        stakingRewardsGenesis(overrides?: CallOverrides): Promise<[BigNumber]>;
        stakingRewardsInfoByStakingToken(arg0: string, overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            stakingRewards: string;
            rewardAmount: BigNumber;
        }>;
        stakingTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    deploy(stakingToken: string, rewardAmount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    isOwner(overrides?: CallOverrides): Promise<boolean>;
    notifyRewardAmount(stakingToken: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    notifyRewardAmounts(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    rewardsToken(overrides?: CallOverrides): Promise<string>;
    stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;
    stakingRewardsInfoByStakingToken(arg0: string, overrides?: CallOverrides): Promise<[
        string,
        BigNumber
    ] & {
        stakingRewards: string;
        rewardAmount: BigNumber;
    }>;
    stakingTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        deploy(stakingToken: string, rewardAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        isOwner(overrides?: CallOverrides): Promise<boolean>;
        notifyRewardAmount(stakingToken: string, overrides?: CallOverrides): Promise<void>;
        notifyRewardAmounts(overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        rewardsToken(overrides?: CallOverrides): Promise<string>;
        stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;
        stakingRewardsInfoByStakingToken(arg0: string, overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            stakingRewards: string;
            rewardAmount: BigNumber;
        }>;
        stakingTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        deploy(stakingToken: string, rewardAmount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        isOwner(overrides?: CallOverrides): Promise<BigNumber>;
        notifyRewardAmount(stakingToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        notifyRewardAmounts(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;
        stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;
        stakingRewardsInfoByStakingToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        stakingTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        deploy(stakingToken: string, rewardAmount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        notifyRewardAmount(stakingToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        notifyRewardAmounts(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        stakingRewardsGenesis(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        stakingRewardsInfoByStakingToken(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        stakingTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=StakingRewardsFactory.d.ts.map