import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface OVML1ERC20BridgeInterface extends utils.Interface {
    contractName: "OVML1ERC20Bridge";
    functions: {
        "deposit(address,address,address,uint256)": FunctionFragment;
        "messenger()": FunctionFragment;
        "withdraw(address,address,uint256)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "deposit", values: [string, string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values: [string, string, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    events: {
        "Deposit(address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
}
export declare type DepositEvent = TypedEvent<[
    string,
    BigNumber
], {
    _sender: string;
    _amount: BigNumber;
}>;
export declare type DepositEventFilter = TypedEventFilter<DepositEvent>;
export interface OVML1ERC20Bridge extends BaseContract {
    contractName: "OVML1ERC20Bridge";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OVML1ERC20BridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        deposit(_l1TokenAddress: string, _l2TokenAddress: string, _depositor: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        messenger(overrides?: CallOverrides): Promise<[string]>;
        withdraw(_l1TokenAddress: string, _withdrawer: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    deposit(_l1TokenAddress: string, _l2TokenAddress: string, _depositor: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    messenger(overrides?: CallOverrides): Promise<string>;
    withdraw(_l1TokenAddress: string, _withdrawer: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        deposit(_l1TokenAddress: string, _l2TokenAddress: string, _depositor: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        messenger(overrides?: CallOverrides): Promise<string>;
        withdraw(_l1TokenAddress: string, _withdrawer: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Deposit(address,uint256)"(_sender?: string | null, _amount?: null): DepositEventFilter;
        Deposit(_sender?: string | null, _amount?: null): DepositEventFilter;
    };
    estimateGas: {
        deposit(_l1TokenAddress: string, _l2TokenAddress: string, _depositor: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        messenger(overrides?: CallOverrides): Promise<BigNumber>;
        withdraw(_l1TokenAddress: string, _withdrawer: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        deposit(_l1TokenAddress: string, _l2TokenAddress: string, _depositor: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdraw(_l1TokenAddress: string, _withdrawer: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=OVML1ERC20Bridge.d.ts.map