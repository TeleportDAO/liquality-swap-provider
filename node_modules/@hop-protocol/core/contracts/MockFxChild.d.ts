import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface MockFxChildInterface extends utils.Interface {
    contractName: "MockFxChild";
    functions: {
        "fxRoot()": FunctionFragment;
        "l2Messenger()": FunctionFragment;
        "onStateReceive(uint256,bytes)": FunctionFragment;
        "setFxRoot(address)": FunctionFragment;
        "setL2Messenger(address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "fxRoot", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2Messenger", values?: undefined): string;
    encodeFunctionData(functionFragment: "onStateReceive", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setFxRoot", values: [string]): string;
    encodeFunctionData(functionFragment: "setL2Messenger", values: [string]): string;
    decodeFunctionResult(functionFragment: "fxRoot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2Messenger", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onStateReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFxRoot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setL2Messenger", data: BytesLike): Result;
    events: {
        "NewFxMessage(address,address,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "NewFxMessage"): EventFragment;
}
export declare type NewFxMessageEvent = TypedEvent<[
    string,
    string,
    string
], {
    rootMessageSender: string;
    receiver: string;
    data: string;
}>;
export declare type NewFxMessageEventFilter = TypedEventFilter<NewFxMessageEvent>;
export interface MockFxChild extends BaseContract {
    contractName: "MockFxChild";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockFxChildInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        fxRoot(overrides?: CallOverrides): Promise<[string]>;
        l2Messenger(overrides?: CallOverrides): Promise<[string]>;
        onStateReceive(stateId: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setFxRoot(_fxRoot: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setL2Messenger(_l2Messenger: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    fxRoot(overrides?: CallOverrides): Promise<string>;
    l2Messenger(overrides?: CallOverrides): Promise<string>;
    onStateReceive(stateId: BigNumberish, _data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setFxRoot(_fxRoot: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setL2Messenger(_l2Messenger: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        fxRoot(overrides?: CallOverrides): Promise<string>;
        l2Messenger(overrides?: CallOverrides): Promise<string>;
        onStateReceive(stateId: BigNumberish, _data: BytesLike, overrides?: CallOverrides): Promise<void>;
        setFxRoot(_fxRoot: string, overrides?: CallOverrides): Promise<void>;
        setL2Messenger(_l2Messenger: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "NewFxMessage(address,address,bytes)"(rootMessageSender?: null, receiver?: null, data?: null): NewFxMessageEventFilter;
        NewFxMessage(rootMessageSender?: null, receiver?: null, data?: null): NewFxMessageEventFilter;
    };
    estimateGas: {
        fxRoot(overrides?: CallOverrides): Promise<BigNumber>;
        l2Messenger(overrides?: CallOverrides): Promise<BigNumber>;
        onStateReceive(stateId: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setFxRoot(_fxRoot: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setL2Messenger(_l2Messenger: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        fxRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2Messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        onStateReceive(stateId: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setFxRoot(_fxRoot: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setL2Messenger(_l2Messenger: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MockFxChild.d.ts.map