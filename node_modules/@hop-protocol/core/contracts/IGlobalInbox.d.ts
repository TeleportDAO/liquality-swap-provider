import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface IGlobalInboxInterface extends utils.Interface {
    contractName: "IGlobalInbox";
    functions: {
        "deployL2ContractPair(address,uint256,uint256,uint256,bytes)": FunctionFragment;
        "getInbox(address)": FunctionFragment;
        "sendInitializationMessage(bytes)": FunctionFragment;
        "sendL2Message(address,bytes)": FunctionFragment;
        "sendMessages(bytes,uint256,uint256)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "deployL2ContractPair", values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "getInbox", values: [string]): string;
    encodeFunctionData(functionFragment: "sendInitializationMessage", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "sendL2Message", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "sendMessages", values: [BytesLike, BigNumberish, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "deployL2ContractPair", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendInitializationMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendL2Message", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessages", data: BytesLike): Result;
    events: {
        "BuddyContractDeployed(address,bytes)": EventFragment;
        "BuddyContractPair(address,address)": EventFragment;
        "MessageDelivered(address,uint8,address,uint256,bytes)": EventFragment;
        "MessageDeliveredFromOrigin(address,uint8,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "BuddyContractDeployed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BuddyContractPair"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MessageDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MessageDeliveredFromOrigin"): EventFragment;
}
export declare type BuddyContractDeployedEvent = TypedEvent<[
    string,
    string
], {
    sender: string;
    data: string;
}>;
export declare type BuddyContractDeployedEventFilter = TypedEventFilter<BuddyContractDeployedEvent>;
export declare type BuddyContractPairEvent = TypedEvent<[
    string,
    string
], {
    sender: string;
    data: string;
}>;
export declare type BuddyContractPairEventFilter = TypedEventFilter<BuddyContractPairEvent>;
export declare type MessageDeliveredEvent = TypedEvent<[
    string,
    number,
    string,
    BigNumber,
    string
], {
    chain: string;
    kind: number;
    sender: string;
    inboxSeqNum: BigNumber;
    data: string;
}>;
export declare type MessageDeliveredEventFilter = TypedEventFilter<MessageDeliveredEvent>;
export declare type MessageDeliveredFromOriginEvent = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], {
    chain: string;
    kind: number;
    sender: string;
    inboxSeqNum: BigNumber;
}>;
export declare type MessageDeliveredFromOriginEventFilter = TypedEventFilter<MessageDeliveredFromOriginEvent>;
export interface IGlobalInbox extends BaseContract {
    contractName: "IGlobalInbox";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IGlobalInboxInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        deployL2ContractPair(chain: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, payment: BigNumberish, contractData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getInbox(account: string, overrides?: CallOverrides): Promise<[string, BigNumber]>;
        sendInitializationMessage(messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        sendL2Message(chain: string, messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        sendMessages(_messages: BytesLike, initialMaxSendCount: BigNumberish, finalMaxSendCount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    deployL2ContractPair(chain: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, payment: BigNumberish, contractData: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getInbox(account: string, overrides?: CallOverrides): Promise<[string, BigNumber]>;
    sendInitializationMessage(messageData: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    sendL2Message(chain: string, messageData: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    sendMessages(_messages: BytesLike, initialMaxSendCount: BigNumberish, finalMaxSendCount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        deployL2ContractPair(chain: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, payment: BigNumberish, contractData: BytesLike, overrides?: CallOverrides): Promise<void>;
        getInbox(account: string, overrides?: CallOverrides): Promise<[string, BigNumber]>;
        sendInitializationMessage(messageData: BytesLike, overrides?: CallOverrides): Promise<void>;
        sendL2Message(chain: string, messageData: BytesLike, overrides?: CallOverrides): Promise<void>;
        sendMessages(_messages: BytesLike, initialMaxSendCount: BigNumberish, finalMaxSendCount: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "BuddyContractDeployed(address,bytes)"(sender?: string | null, data?: null): BuddyContractDeployedEventFilter;
        BuddyContractDeployed(sender?: string | null, data?: null): BuddyContractDeployedEventFilter;
        "BuddyContractPair(address,address)"(sender?: string | null, data?: null): BuddyContractPairEventFilter;
        BuddyContractPair(sender?: string | null, data?: null): BuddyContractPairEventFilter;
        "MessageDelivered(address,uint8,address,uint256,bytes)"(chain?: string | null, kind?: BigNumberish | null, sender?: string | null, inboxSeqNum?: null, data?: null): MessageDeliveredEventFilter;
        MessageDelivered(chain?: string | null, kind?: BigNumberish | null, sender?: string | null, inboxSeqNum?: null, data?: null): MessageDeliveredEventFilter;
        "MessageDeliveredFromOrigin(address,uint8,address,uint256)"(chain?: string | null, kind?: BigNumberish | null, sender?: string | null, inboxSeqNum?: null): MessageDeliveredFromOriginEventFilter;
        MessageDeliveredFromOrigin(chain?: string | null, kind?: BigNumberish | null, sender?: string | null, inboxSeqNum?: null): MessageDeliveredFromOriginEventFilter;
    };
    estimateGas: {
        deployL2ContractPair(chain: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, payment: BigNumberish, contractData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getInbox(account: string, overrides?: CallOverrides): Promise<BigNumber>;
        sendInitializationMessage(messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        sendL2Message(chain: string, messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        sendMessages(_messages: BytesLike, initialMaxSendCount: BigNumberish, finalMaxSendCount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        deployL2ContractPair(chain: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, payment: BigNumberish, contractData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getInbox(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sendInitializationMessage(messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        sendL2Message(chain: string, messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        sendMessages(_messages: BytesLike, initialMaxSendCount: BigNumberish, finalMaxSendCount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IGlobalInbox.d.ts.map