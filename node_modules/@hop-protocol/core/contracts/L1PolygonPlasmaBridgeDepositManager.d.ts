import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface L1PolygonPlasmaBridgeDepositManagerInterface extends utils.Interface {
    contractName: "L1PolygonPlasmaBridgeDepositManager";
    functions: {
        "childChain()": FunctionFragment;
        "governance()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "registry()": FunctionFragment;
        "owner()": FunctionFragment;
        "isOwner()": FunctionFragment;
        "rootChain()": FunctionFragment;
        "unlock()": FunctionFragment;
        "deposits(uint256)": FunctionFragment;
        "stateSender()": FunctionFragment;
        "locked()": FunctionFragment;
        "maxErc20Deposit()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "lock()": FunctionFragment;
        "updateMaxErc20Deposit(uint256)": FunctionFragment;
        "transferAssets(address,address,uint256)": FunctionFragment;
        "depositERC20(address,uint256)": FunctionFragment;
        "depositERC721(address,uint256)": FunctionFragment;
        "depositBulk(address[],uint256[],address)": FunctionFragment;
        "updateChildChainAndStateSender()": FunctionFragment;
        "depositERC20ForUser(address,address,uint256)": FunctionFragment;
        "depositERC721ForUser(address,address,uint256)": FunctionFragment;
        "depositEther()": FunctionFragment;
        "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
        "tokenFallback(address,uint256,bytes)": FunctionFragment;
        "updateRootChain(address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "childChain", values?: undefined): string;
    encodeFunctionData(functionFragment: "governance", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "registry", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "rootChain", values?: undefined): string;
    encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
    encodeFunctionData(functionFragment: "deposits", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "stateSender", values?: undefined): string;
    encodeFunctionData(functionFragment: "locked", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxErc20Deposit", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "lock", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateMaxErc20Deposit", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferAssets", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "depositERC20", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "depositERC721", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "depositBulk", values: [string[], BigNumberish[], string]): string;
    encodeFunctionData(functionFragment: "updateChildChainAndStateSender", values?: undefined): string;
    encodeFunctionData(functionFragment: "depositERC20ForUser", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "depositERC721ForUser", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "depositEther", values?: undefined): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [string, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "tokenFallback", values: [string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "updateRootChain", values: [string]): string;
    decodeFunctionResult(functionFragment: "childChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rootChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stateSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxErc20Deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMaxErc20Deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositERC20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositERC721", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositBulk", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateChildChainAndStateSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositERC20ForUser", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositERC721ForUser", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositEther", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenFallback", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRootChain", data: BytesLike): Result;
    events: {
        "NewDepositBlock(address,address,uint256,uint256)": EventFragment;
        "MaxErc20DepositUpdate(uint256,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "NewDepositBlock"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MaxErc20DepositUpdate"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export declare type NewDepositBlockEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber
], {
    owner: string;
    token: string;
    amountOrNFTId: BigNumber;
    depositBlockId: BigNumber;
}>;
export declare type NewDepositBlockEventFilter = TypedEventFilter<NewDepositBlockEvent>;
export declare type MaxErc20DepositUpdateEvent = TypedEvent<[
    BigNumber,
    BigNumber
], {
    oldLimit: BigNumber;
    newLimit: BigNumber;
}>;
export declare type MaxErc20DepositUpdateEventFilter = TypedEventFilter<MaxErc20DepositUpdateEvent>;
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], {
    previousOwner: string;
    newOwner: string;
}>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface L1PolygonPlasmaBridgeDepositManager extends BaseContract {
    contractName: "L1PolygonPlasmaBridgeDepositManager";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: L1PolygonPlasmaBridgeDepositManagerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        childChain(overrides?: CallOverrides): Promise<[string]>;
        governance(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        registry(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        isOwner(overrides?: CallOverrides): Promise<[boolean]>;
        rootChain(overrides?: CallOverrides): Promise<[string]>;
        unlock(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            depositHash: string;
            createdAt: BigNumber;
        }>;
        stateSender(overrides?: CallOverrides): Promise<[string]>;
        locked(overrides?: CallOverrides): Promise<[boolean]>;
        maxErc20Deposit(overrides?: CallOverrides): Promise<[BigNumber]>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        lock(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        updateMaxErc20Deposit(maxDepositAmount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferAssets(_token: string, _user: string, _amountOrNFTId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositERC20(_token: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositERC721(_token: string, _tokenId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositBulk(_tokens: string[], _amountOrTokens: BigNumberish[], _user: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        updateChildChainAndStateSender(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositERC20ForUser(_token: string, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositERC721ForUser(_token: string, _user: string, _tokenId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositEther(overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        onERC721Received(arg0: string, _user: string, _tokenId: BigNumberish, arg3: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        tokenFallback(_user: string, _amount: BigNumberish, arg2: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        updateRootChain(_rootChain: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    childChain(overrides?: CallOverrides): Promise<string>;
    governance(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    registry(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    isOwner(overrides?: CallOverrides): Promise<boolean>;
    rootChain(overrides?: CallOverrides): Promise<string>;
    unlock(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
        string,
        BigNumber
    ] & {
        depositHash: string;
        createdAt: BigNumber;
    }>;
    stateSender(overrides?: CallOverrides): Promise<string>;
    locked(overrides?: CallOverrides): Promise<boolean>;
    maxErc20Deposit(overrides?: CallOverrides): Promise<BigNumber>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    lock(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    updateMaxErc20Deposit(maxDepositAmount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferAssets(_token: string, _user: string, _amountOrNFTId: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositERC20(_token: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositERC721(_token: string, _tokenId: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositBulk(_tokens: string[], _amountOrTokens: BigNumberish[], _user: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    updateChildChainAndStateSender(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositERC20ForUser(_token: string, _user: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositERC721ForUser(_token: string, _user: string, _tokenId: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositEther(overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    onERC721Received(arg0: string, _user: string, _tokenId: BigNumberish, arg3: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    tokenFallback(_user: string, _amount: BigNumberish, arg2: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    updateRootChain(_rootChain: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        childChain(overrides?: CallOverrides): Promise<string>;
        governance(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        registry(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        isOwner(overrides?: CallOverrides): Promise<boolean>;
        rootChain(overrides?: CallOverrides): Promise<string>;
        unlock(overrides?: CallOverrides): Promise<void>;
        deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            depositHash: string;
            createdAt: BigNumber;
        }>;
        stateSender(overrides?: CallOverrides): Promise<string>;
        locked(overrides?: CallOverrides): Promise<boolean>;
        maxErc20Deposit(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        lock(overrides?: CallOverrides): Promise<void>;
        updateMaxErc20Deposit(maxDepositAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        transferAssets(_token: string, _user: string, _amountOrNFTId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        depositERC20(_token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        depositERC721(_token: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        depositBulk(_tokens: string[], _amountOrTokens: BigNumberish[], _user: string, overrides?: CallOverrides): Promise<void>;
        updateChildChainAndStateSender(overrides?: CallOverrides): Promise<void>;
        depositERC20ForUser(_token: string, _user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        depositERC721ForUser(_token: string, _user: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        depositEther(overrides?: CallOverrides): Promise<void>;
        onERC721Received(arg0: string, _user: string, _tokenId: BigNumberish, arg3: BytesLike, overrides?: CallOverrides): Promise<string>;
        tokenFallback(_user: string, _amount: BigNumberish, arg2: BytesLike, overrides?: CallOverrides): Promise<void>;
        updateRootChain(_rootChain: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "NewDepositBlock(address,address,uint256,uint256)"(owner?: string | null, token?: string | null, amountOrNFTId?: null, depositBlockId?: null): NewDepositBlockEventFilter;
        NewDepositBlock(owner?: string | null, token?: string | null, amountOrNFTId?: null, depositBlockId?: null): NewDepositBlockEventFilter;
        "MaxErc20DepositUpdate(uint256,uint256)"(oldLimit?: BigNumberish | null, newLimit?: BigNumberish | null): MaxErc20DepositUpdateEventFilter;
        MaxErc20DepositUpdate(oldLimit?: BigNumberish | null, newLimit?: BigNumberish | null): MaxErc20DepositUpdateEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        childChain(overrides?: CallOverrides): Promise<BigNumber>;
        governance(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        registry(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        isOwner(overrides?: CallOverrides): Promise<BigNumber>;
        rootChain(overrides?: CallOverrides): Promise<BigNumber>;
        unlock(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        stateSender(overrides?: CallOverrides): Promise<BigNumber>;
        locked(overrides?: CallOverrides): Promise<BigNumber>;
        maxErc20Deposit(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        lock(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        updateMaxErc20Deposit(maxDepositAmount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferAssets(_token: string, _user: string, _amountOrNFTId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositERC20(_token: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositERC721(_token: string, _tokenId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositBulk(_tokens: string[], _amountOrTokens: BigNumberish[], _user: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        updateChildChainAndStateSender(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositERC20ForUser(_token: string, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositERC721ForUser(_token: string, _user: string, _tokenId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositEther(overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        onERC721Received(arg0: string, _user: string, _tokenId: BigNumberish, arg3: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        tokenFallback(_user: string, _amount: BigNumberish, arg2: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        updateRootChain(_rootChain: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        childChain(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rootChain(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        unlock(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        stateSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        maxErc20Deposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        lock(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        updateMaxErc20Deposit(maxDepositAmount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferAssets(_token: string, _user: string, _amountOrNFTId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositERC20(_token: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositERC721(_token: string, _tokenId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositBulk(_tokens: string[], _amountOrTokens: BigNumberish[], _user: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        updateChildChainAndStateSender(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositERC20ForUser(_token: string, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositERC721ForUser(_token: string, _user: string, _tokenId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositEther(overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        onERC721Received(arg0: string, _user: string, _tokenId: BigNumberish, arg3: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        tokenFallback(_user: string, _amount: BigNumberish, arg2: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        updateRootChain(_rootChain: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=L1PolygonPlasmaBridgeDepositManager.d.ts.map