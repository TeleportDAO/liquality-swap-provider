import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface L2PolygonMessengerProxyInterface extends utils.Interface {
    contractName: "L2PolygonMessengerProxy";
    functions: {
        "DEAD_ADDRESS()": FunctionFragment;
        "fxChild()": FunctionFragment;
        "fxRootTunnel()": FunctionFragment;
        "l2Bridge()": FunctionFragment;
        "processMessageFromRoot(uint256,address,bytes)": FunctionFragment;
        "sendCrossDomainMessage(bytes)": FunctionFragment;
        "setFxRootTunnel(address)": FunctionFragment;
        "setL2Bridge(address)": FunctionFragment;
        "xDomainMessageSender()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "DEAD_ADDRESS", values?: undefined): string;
    encodeFunctionData(functionFragment: "fxChild", values?: undefined): string;
    encodeFunctionData(functionFragment: "fxRootTunnel", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2Bridge", values?: undefined): string;
    encodeFunctionData(functionFragment: "processMessageFromRoot", values: [BigNumberish, string, BytesLike]): string;
    encodeFunctionData(functionFragment: "sendCrossDomainMessage", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setFxRootTunnel", values: [string]): string;
    encodeFunctionData(functionFragment: "setL2Bridge", values: [string]): string;
    encodeFunctionData(functionFragment: "xDomainMessageSender", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEAD_ADDRESS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fxChild", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fxRootTunnel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2Bridge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "processMessageFromRoot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCrossDomainMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFxRootTunnel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setL2Bridge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xDomainMessageSender", data: BytesLike): Result;
    events: {
        "MessageSent(bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
}
export declare type MessageSentEvent = TypedEvent<[string], {
    message: string;
}>;
export declare type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;
export interface L2PolygonMessengerProxy extends BaseContract {
    contractName: "L2PolygonMessengerProxy";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: L2PolygonMessengerProxyInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEAD_ADDRESS(overrides?: CallOverrides): Promise<[string]>;
        fxChild(overrides?: CallOverrides): Promise<[string]>;
        fxRootTunnel(overrides?: CallOverrides): Promise<[string]>;
        l2Bridge(overrides?: CallOverrides): Promise<[string]>;
        processMessageFromRoot(stateId: BigNumberish, rootMessageSender: string, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        sendCrossDomainMessage(message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setFxRootTunnel(_fxRootTunnel: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setL2Bridge(_l2Bridge: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<[string]>;
    };
    DEAD_ADDRESS(overrides?: CallOverrides): Promise<string>;
    fxChild(overrides?: CallOverrides): Promise<string>;
    fxRootTunnel(overrides?: CallOverrides): Promise<string>;
    l2Bridge(overrides?: CallOverrides): Promise<string>;
    processMessageFromRoot(stateId: BigNumberish, rootMessageSender: string, data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    sendCrossDomainMessage(message: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setFxRootTunnel(_fxRootTunnel: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setL2Bridge(_l2Bridge: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEAD_ADDRESS(overrides?: CallOverrides): Promise<string>;
        fxChild(overrides?: CallOverrides): Promise<string>;
        fxRootTunnel(overrides?: CallOverrides): Promise<string>;
        l2Bridge(overrides?: CallOverrides): Promise<string>;
        processMessageFromRoot(stateId: BigNumberish, rootMessageSender: string, data: BytesLike, overrides?: CallOverrides): Promise<void>;
        sendCrossDomainMessage(message: BytesLike, overrides?: CallOverrides): Promise<void>;
        setFxRootTunnel(_fxRootTunnel: string, overrides?: CallOverrides): Promise<void>;
        setL2Bridge(_l2Bridge: string, overrides?: CallOverrides): Promise<void>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "MessageSent(bytes)"(message?: null): MessageSentEventFilter;
        MessageSent(message?: null): MessageSentEventFilter;
    };
    estimateGas: {
        DEAD_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;
        fxChild(overrides?: CallOverrides): Promise<BigNumber>;
        fxRootTunnel(overrides?: CallOverrides): Promise<BigNumber>;
        l2Bridge(overrides?: CallOverrides): Promise<BigNumber>;
        processMessageFromRoot(stateId: BigNumberish, rootMessageSender: string, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        sendCrossDomainMessage(message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setFxRootTunnel(_fxRootTunnel: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setL2Bridge(_l2Bridge: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEAD_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fxChild(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fxRootTunnel(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2Bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        processMessageFromRoot(stateId: BigNumberish, rootMessageSender: string, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        sendCrossDomainMessage(message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setFxRootTunnel(_fxRootTunnel: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setL2Bridge(_l2Bridge: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=L2PolygonMessengerProxy.d.ts.map