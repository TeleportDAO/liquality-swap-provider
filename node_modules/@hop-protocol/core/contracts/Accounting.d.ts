import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface AccountingInterface extends utils.Interface {
    contractName: "Accounting";
    functions: {
        "addBonder(address)": FunctionFragment;
        "getCredit(address)": FunctionFragment;
        "getDebitAndAdditionalDebit(address)": FunctionFragment;
        "getIsBonder(address)": FunctionFragment;
        "getRawDebit(address)": FunctionFragment;
        "removeBonder(address)": FunctionFragment;
        "stake(address,uint256)": FunctionFragment;
        "unstake(uint256)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "addBonder", values: [string]): string;
    encodeFunctionData(functionFragment: "getCredit", values: [string]): string;
    encodeFunctionData(functionFragment: "getDebitAndAdditionalDebit", values: [string]): string;
    encodeFunctionData(functionFragment: "getIsBonder", values: [string]): string;
    encodeFunctionData(functionFragment: "getRawDebit", values: [string]): string;
    encodeFunctionData(functionFragment: "removeBonder", values: [string]): string;
    encodeFunctionData(functionFragment: "stake", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "unstake", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "addBonder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCredit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDebitAndAdditionalDebit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getIsBonder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRawDebit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeBonder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
    events: {
        "BonderAdded(address)": EventFragment;
        "BonderRemoved(address)": EventFragment;
        "Stake(address,uint256)": EventFragment;
        "Unstake(address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "BonderAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BonderRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}
export declare type BonderAddedEvent = TypedEvent<[string], {
    newBonder: string;
}>;
export declare type BonderAddedEventFilter = TypedEventFilter<BonderAddedEvent>;
export declare type BonderRemovedEvent = TypedEvent<[
    string
], {
    previousBonder: string;
}>;
export declare type BonderRemovedEventFilter = TypedEventFilter<BonderRemovedEvent>;
export declare type StakeEvent = TypedEvent<[
    string,
    BigNumber
], {
    account: string;
    amount: BigNumber;
}>;
export declare type StakeEventFilter = TypedEventFilter<StakeEvent>;
export declare type UnstakeEvent = TypedEvent<[
    string,
    BigNumber
], {
    account: string;
    amount: BigNumber;
}>;
export declare type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;
export interface Accounting extends BaseContract {
    contractName: "Accounting";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AccountingInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getCredit(bonder: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        getDebitAndAdditionalDebit(bonder: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<[boolean]>;
        getRawDebit(bonder: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        removeBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        stake(bonder: string, amount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        unstake(amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    addBonder(bonder: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
    getDebitAndAdditionalDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
    getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<boolean>;
    getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
    removeBonder(bonder: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    stake(bonder: string, amount: BigNumberish, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    unstake(amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addBonder(bonder: string, overrides?: CallOverrides): Promise<void>;
        getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getDebitAndAdditionalDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<boolean>;
        getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        removeBonder(bonder: string, overrides?: CallOverrides): Promise<void>;
        stake(bonder: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "BonderAdded(address)"(newBonder?: string | null): BonderAddedEventFilter;
        BonderAdded(newBonder?: string | null): BonderAddedEventFilter;
        "BonderRemoved(address)"(previousBonder?: string | null): BonderRemovedEventFilter;
        BonderRemoved(previousBonder?: string | null): BonderRemovedEventFilter;
        "Stake(address,uint256)"(account?: string | null, amount?: null): StakeEventFilter;
        Stake(account?: string | null, amount?: null): StakeEventFilter;
        "Unstake(address,uint256)"(account?: string | null, amount?: null): UnstakeEventFilter;
        Unstake(account?: string | null, amount?: null): UnstakeEventFilter;
    };
    estimateGas: {
        addBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getDebitAndAdditionalDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;
        removeBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        stake(bonder: string, amount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        unstake(amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getCredit(bonder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDebitAndAdditionalDebit(bonder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRawDebit(bonder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeBonder(bonder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        stake(bonder: string, amount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        unstake(amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=Accounting.d.ts.map