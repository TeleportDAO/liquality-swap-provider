import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface L1XDaiPoaBridgeInterface extends utils.Interface {
    contractName: "L1XDaiPoaBridge";
    functions: {
        "relayTokens(address,uint256)": FunctionFragment;
        "invest(address)": FunctionFragment;
        "erc20token()": FunctionFragment;
        "executeSignaturesGSN(bytes,bytes,uint256)": FunctionFragment;
        "relayedMessages(bytes32)": FunctionFragment;
        "totalSpentPerDay(uint256)": FunctionFragment;
        "isInitialized()": FunctionFragment;
        "setExecutionDailyLimit(uint256)": FunctionFragment;
        "getCurrentDay()": FunctionFragment;
        "requiredBlockConfirmations()": FunctionFragment;
        "executeSignatures(bytes,bytes)": FunctionFragment;
        "getBridgeMode()": FunctionFragment;
        "executionDailyLimit()": FunctionFragment;
        "minInterestPaid(address)": FunctionFragment;
        "versionRecipient()": FunctionFragment;
        "totalExecutedPerDay(uint256)": FunctionFragment;
        "minCashThreshold(address)": FunctionFragment;
        "isTrustedForwarder(address)": FunctionFragment;
        "comptroller()": FunctionFragment;
        "compToken()": FunctionFragment;
        "dailyLimit()": FunctionFragment;
        "claimTokens(address,address)": FunctionFragment;
        "migrateTo_6_1_0(address)": FunctionFragment;
        "initialize(address,address,uint256,uint256,uint256[3],uint256[2],address,int256,address)": FunctionFragment;
        "investDai()": FunctionFragment;
        "claimCompAndPay()": FunctionFragment;
        "setPayMaster(address)": FunctionFragment;
        "withinExecutionLimit(uint256)": FunctionFragment;
        "executionMaxPerTx()": FunctionFragment;
        "requiredSignatures()": FunctionFragment;
        "owner()": FunctionFragment;
        "setInterestReceiver(address,address)": FunctionFragment;
        "maxAvailablePerTx()": FunctionFragment;
        "validatorContract()": FunctionFragment;
        "deployedAtBlock()": FunctionFragment;
        "getBridgeInterfacesVersion()": FunctionFragment;
        "setMinPerTx(uint256)": FunctionFragment;
        "setMinInterestPaid(address,uint256)": FunctionFragment;
        "setMinCashThreshold(address,uint256)": FunctionFragment;
        "interestReceiver(address)": FunctionFragment;
        "setRequiredBlockConfirmations(uint256)": FunctionFragment;
        "setDailyLimit(uint256)": FunctionFragment;
        "cDaiToken()": FunctionFragment;
        "daiToken()": FunctionFragment;
        "setGasPrice(uint256)": FunctionFragment;
        "setMaxPerTx(uint256)": FunctionFragment;
        "interestAmount(address)": FunctionFragment;
        "initializeInterest(address,uint256,uint256,address)": FunctionFragment;
        "getTrustedForwarder()": FunctionFragment;
        "investedAmount(address)": FunctionFragment;
        "payInterest(address)": FunctionFragment;
        "isInterestEnabled(address)": FunctionFragment;
        "setTrustedForwarder(address)": FunctionFragment;
        "decimalShift()": FunctionFragment;
        "minPerTx()": FunctionFragment;
        "withinLimit(uint256)": FunctionFragment;
        "setExecutionMaxPerTx(uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "disableInterest(address)": FunctionFragment;
        "maxPerTx()": FunctionFragment;
        "gasPrice()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "relayTokens", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "invest", values: [string]): string;
    encodeFunctionData(functionFragment: "erc20token", values?: undefined): string;
    encodeFunctionData(functionFragment: "executeSignaturesGSN", values: [BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "relayedMessages", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "totalSpentPerDay", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isInitialized", values?: undefined): string;
    encodeFunctionData(functionFragment: "setExecutionDailyLimit", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getCurrentDay", values?: undefined): string;
    encodeFunctionData(functionFragment: "requiredBlockConfirmations", values?: undefined): string;
    encodeFunctionData(functionFragment: "executeSignatures", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "getBridgeMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "executionDailyLimit", values?: undefined): string;
    encodeFunctionData(functionFragment: "minInterestPaid", values: [string]): string;
    encodeFunctionData(functionFragment: "versionRecipient", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalExecutedPerDay", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "minCashThreshold", values: [string]): string;
    encodeFunctionData(functionFragment: "isTrustedForwarder", values: [string]): string;
    encodeFunctionData(functionFragment: "comptroller", values?: undefined): string;
    encodeFunctionData(functionFragment: "compToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "dailyLimit", values?: undefined): string;
    encodeFunctionData(functionFragment: "claimTokens", values: [string, string]): string;
    encodeFunctionData(functionFragment: "migrateTo_6_1_0", values: [string]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        [
            BigNumberish,
            BigNumberish,
            BigNumberish
        ],
        [
            BigNumberish,
            BigNumberish
        ],
        string,
        BigNumberish,
        string
    ]): string;
    encodeFunctionData(functionFragment: "investDai", values?: undefined): string;
    encodeFunctionData(functionFragment: "claimCompAndPay", values?: undefined): string;
    encodeFunctionData(functionFragment: "setPayMaster", values: [string]): string;
    encodeFunctionData(functionFragment: "withinExecutionLimit", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "executionMaxPerTx", values?: undefined): string;
    encodeFunctionData(functionFragment: "requiredSignatures", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "setInterestReceiver", values: [string, string]): string;
    encodeFunctionData(functionFragment: "maxAvailablePerTx", values?: undefined): string;
    encodeFunctionData(functionFragment: "validatorContract", values?: undefined): string;
    encodeFunctionData(functionFragment: "deployedAtBlock", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBridgeInterfacesVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "setMinPerTx", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setMinInterestPaid", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setMinCashThreshold", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "interestReceiver", values: [string]): string;
    encodeFunctionData(functionFragment: "setRequiredBlockConfirmations", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDailyLimit", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "cDaiToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "daiToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "setGasPrice", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setMaxPerTx", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "interestAmount", values: [string]): string;
    encodeFunctionData(functionFragment: "initializeInterest", values: [string, BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getTrustedForwarder", values?: undefined): string;
    encodeFunctionData(functionFragment: "investedAmount", values: [string]): string;
    encodeFunctionData(functionFragment: "payInterest", values: [string]): string;
    encodeFunctionData(functionFragment: "isInterestEnabled", values: [string]): string;
    encodeFunctionData(functionFragment: "setTrustedForwarder", values: [string]): string;
    encodeFunctionData(functionFragment: "decimalShift", values?: undefined): string;
    encodeFunctionData(functionFragment: "minPerTx", values?: undefined): string;
    encodeFunctionData(functionFragment: "withinLimit", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setExecutionMaxPerTx", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "disableInterest", values: [string]): string;
    encodeFunctionData(functionFragment: "maxPerTx", values?: undefined): string;
    encodeFunctionData(functionFragment: "gasPrice", values?: undefined): string;
    decodeFunctionResult(functionFragment: "relayTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "erc20token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeSignaturesGSN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "relayedMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSpentPerDay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isInitialized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExecutionDailyLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentDay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requiredBlockConfirmations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeSignatures", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBridgeMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executionDailyLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minInterestPaid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "versionRecipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalExecutedPerDay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minCashThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "comptroller", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "compToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dailyLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "migrateTo_6_1_0", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "investDai", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimCompAndPay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPayMaster", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withinExecutionLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executionMaxPerTx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requiredSignatures", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInterestReceiver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxAvailablePerTx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validatorContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployedAtBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBridgeInterfacesVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinPerTx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinInterestPaid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinCashThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "interestReceiver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRequiredBlockConfirmations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDailyLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cDaiToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "daiToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGasPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxPerTx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "interestAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeInterest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "investedAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payInterest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isInterestEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimalShift", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minPerTx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withinLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExecutionMaxPerTx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "disableInterest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxPerTx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
    events: {
        "PaidInterest(address,address,uint256)": EventFragment;
        "RelayedMessage(address,uint256,bytes32)": EventFragment;
        "UserRequestForAffirmation(address,uint256)": EventFragment;
        "DailyLimitChanged(uint256)": EventFragment;
        "ExecutionDailyLimitChanged(uint256)": EventFragment;
        "GasPriceChanged(uint256)": EventFragment;
        "RequiredBlockConfirmationChanged(uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "PaidInterest"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RelayedMessage"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UserRequestForAffirmation"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DailyLimitChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutionDailyLimitChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GasPriceChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RequiredBlockConfirmationChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export declare type PaidInterestEvent = TypedEvent<[
    string,
    string,
    BigNumber
], {
    token: string;
    to: string;
    value: BigNumber;
}>;
export declare type PaidInterestEventFilter = TypedEventFilter<PaidInterestEvent>;
export declare type RelayedMessageEvent = TypedEvent<[
    string,
    BigNumber,
    string
], {
    recipient: string;
    value: BigNumber;
    transactionHash: string;
}>;
export declare type RelayedMessageEventFilter = TypedEventFilter<RelayedMessageEvent>;
export declare type UserRequestForAffirmationEvent = TypedEvent<[
    string,
    BigNumber
], {
    recipient: string;
    value: BigNumber;
}>;
export declare type UserRequestForAffirmationEventFilter = TypedEventFilter<UserRequestForAffirmationEvent>;
export declare type DailyLimitChangedEvent = TypedEvent<[
    BigNumber
], {
    newLimit: BigNumber;
}>;
export declare type DailyLimitChangedEventFilter = TypedEventFilter<DailyLimitChangedEvent>;
export declare type ExecutionDailyLimitChangedEvent = TypedEvent<[
    BigNumber
], {
    newLimit: BigNumber;
}>;
export declare type ExecutionDailyLimitChangedEventFilter = TypedEventFilter<ExecutionDailyLimitChangedEvent>;
export declare type GasPriceChangedEvent = TypedEvent<[
    BigNumber
], {
    gasPrice: BigNumber;
}>;
export declare type GasPriceChangedEventFilter = TypedEventFilter<GasPriceChangedEvent>;
export declare type RequiredBlockConfirmationChangedEvent = TypedEvent<[
    BigNumber
], {
    requiredBlockConfirmations: BigNumber;
}>;
export declare type RequiredBlockConfirmationChangedEventFilter = TypedEventFilter<RequiredBlockConfirmationChangedEvent>;
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], {
    previousOwner: string;
    newOwner: string;
}>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface L1XDaiPoaBridge extends BaseContract {
    contractName: "L1XDaiPoaBridge";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: L1XDaiPoaBridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        relayTokens(_receiver: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        invest(_token: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        erc20token(overrides?: CallOverrides): Promise<[string]>;
        executeSignaturesGSN(message: BytesLike, signatures: BytesLike, maxTokensFee: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        relayedMessages(_txHash: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        totalSpentPerDay(_day: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        isInitialized(overrides?: CallOverrides): Promise<[boolean]>;
        setExecutionDailyLimit(_dailyLimit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getCurrentDay(overrides?: CallOverrides): Promise<[BigNumber]>;
        requiredBlockConfirmations(overrides?: CallOverrides): Promise<[BigNumber]>;
        executeSignatures(message: BytesLike, signatures: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getBridgeMode(overrides?: CallOverrides): Promise<[string] & {
            _data: string;
        }>;
        executionDailyLimit(overrides?: CallOverrides): Promise<[BigNumber]>;
        minInterestPaid(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        versionRecipient(overrides?: CallOverrides): Promise<[string]>;
        totalExecutedPerDay(_day: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        minCashThreshold(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<[boolean]>;
        comptroller(overrides?: CallOverrides): Promise<[string]>;
        compToken(overrides?: CallOverrides): Promise<[string]>;
        dailyLimit(overrides?: CallOverrides): Promise<[BigNumber]>;
        claimTokens(_token: string, _to: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        migrateTo_6_1_0(_interestReceiver: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        initialize(_validatorContract: string, _erc20token: string, _requiredBlockConfirmations: BigNumberish, _gasPrice: BigNumberish, _dailyLimitMaxPerTxMinPerTxArray: [
            BigNumberish,
            BigNumberish,
            BigNumberish
        ], _homeDailyLimitHomeMaxPerTxArray: [BigNumberish, BigNumberish], _owner: string, _decimalShift: BigNumberish, _bridgeOnOtherSide: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        investDai(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        claimCompAndPay(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setPayMaster(_paymaster: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        withinExecutionLimit(_amount: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
        executionMaxPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;
        requiredSignatures(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        setInterestReceiver(_token: string, _receiver: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        maxAvailablePerTx(overrides?: CallOverrides): Promise<[BigNumber]>;
        validatorContract(overrides?: CallOverrides): Promise<[string]>;
        deployedAtBlock(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            major: BigNumber;
            minor: BigNumber;
            patch: BigNumber;
        }>;
        setMinPerTx(_minPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setMinInterestPaid(_token: string, _minInterestPaid: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setMinCashThreshold(_token: string, _minCashThreshold: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        interestReceiver(_token: string, overrides?: CallOverrides): Promise<[string]>;
        setRequiredBlockConfirmations(_blockConfirmations: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setDailyLimit(_dailyLimit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        cDaiToken(overrides?: CallOverrides): Promise<[string]>;
        daiToken(overrides?: CallOverrides): Promise<[string]>;
        setGasPrice(_gasPrice: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setMaxPerTx(_maxPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        interestAmount(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        initializeInterest(_token: string, _minCashThreshold: BigNumberish, _minInterestPaid: BigNumberish, _interestReceiver: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getTrustedForwarder(overrides?: CallOverrides): Promise<[string]>;
        investedAmount(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        payInterest(_token: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        isInterestEnabled(_token: string, overrides?: CallOverrides): Promise<[boolean]>;
        setTrustedForwarder(_trustedForwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        decimalShift(overrides?: CallOverrides): Promise<[BigNumber]>;
        minPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;
        withinLimit(_amount: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
        setExecutionMaxPerTx(_maxPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        disableInterest(_token: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        maxPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;
        gasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    relayTokens(_receiver: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    invest(_token: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    erc20token(overrides?: CallOverrides): Promise<string>;
    executeSignaturesGSN(message: BytesLike, signatures: BytesLike, maxTokensFee: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    relayedMessages(_txHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    totalSpentPerDay(_day: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    isInitialized(overrides?: CallOverrides): Promise<boolean>;
    setExecutionDailyLimit(_dailyLimit: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getCurrentDay(overrides?: CallOverrides): Promise<BigNumber>;
    requiredBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;
    executeSignatures(message: BytesLike, signatures: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getBridgeMode(overrides?: CallOverrides): Promise<string>;
    executionDailyLimit(overrides?: CallOverrides): Promise<BigNumber>;
    minInterestPaid(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
    versionRecipient(overrides?: CallOverrides): Promise<string>;
    totalExecutedPerDay(_day: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    minCashThreshold(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
    isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<boolean>;
    comptroller(overrides?: CallOverrides): Promise<string>;
    compToken(overrides?: CallOverrides): Promise<string>;
    dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;
    claimTokens(_token: string, _to: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    migrateTo_6_1_0(_interestReceiver: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    initialize(_validatorContract: string, _erc20token: string, _requiredBlockConfirmations: BigNumberish, _gasPrice: BigNumberish, _dailyLimitMaxPerTxMinPerTxArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish
    ], _homeDailyLimitHomeMaxPerTxArray: [BigNumberish, BigNumberish], _owner: string, _decimalShift: BigNumberish, _bridgeOnOtherSide: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    investDai(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    claimCompAndPay(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setPayMaster(_paymaster: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    withinExecutionLimit(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    executionMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;
    requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    setInterestReceiver(_token: string, _receiver: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    maxAvailablePerTx(overrides?: CallOverrides): Promise<BigNumber>;
    validatorContract(overrides?: CallOverrides): Promise<string>;
    deployedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;
    getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
    }>;
    setMinPerTx(_minPerTx: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setMinInterestPaid(_token: string, _minInterestPaid: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setMinCashThreshold(_token: string, _minCashThreshold: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    interestReceiver(_token: string, overrides?: CallOverrides): Promise<string>;
    setRequiredBlockConfirmations(_blockConfirmations: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setDailyLimit(_dailyLimit: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    cDaiToken(overrides?: CallOverrides): Promise<string>;
    daiToken(overrides?: CallOverrides): Promise<string>;
    setGasPrice(_gasPrice: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setMaxPerTx(_maxPerTx: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    interestAmount(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
    initializeInterest(_token: string, _minCashThreshold: BigNumberish, _minInterestPaid: BigNumberish, _interestReceiver: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;
    investedAmount(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
    payInterest(_token: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    isInterestEnabled(_token: string, overrides?: CallOverrides): Promise<boolean>;
    setTrustedForwarder(_trustedForwarder: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    decimalShift(overrides?: CallOverrides): Promise<BigNumber>;
    minPerTx(overrides?: CallOverrides): Promise<BigNumber>;
    withinLimit(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    setExecutionMaxPerTx(_maxPerTx: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    disableInterest(_token: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    maxPerTx(overrides?: CallOverrides): Promise<BigNumber>;
    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        relayTokens(_receiver: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        invest(_token: string, overrides?: CallOverrides): Promise<void>;
        erc20token(overrides?: CallOverrides): Promise<string>;
        executeSignaturesGSN(message: BytesLike, signatures: BytesLike, maxTokensFee: BigNumberish, overrides?: CallOverrides): Promise<void>;
        relayedMessages(_txHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        totalSpentPerDay(_day: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isInitialized(overrides?: CallOverrides): Promise<boolean>;
        setExecutionDailyLimit(_dailyLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;
        getCurrentDay(overrides?: CallOverrides): Promise<BigNumber>;
        requiredBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;
        executeSignatures(message: BytesLike, signatures: BytesLike, overrides?: CallOverrides): Promise<void>;
        getBridgeMode(overrides?: CallOverrides): Promise<string>;
        executionDailyLimit(overrides?: CallOverrides): Promise<BigNumber>;
        minInterestPaid(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        versionRecipient(overrides?: CallOverrides): Promise<string>;
        totalExecutedPerDay(_day: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        minCashThreshold(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<boolean>;
        comptroller(overrides?: CallOverrides): Promise<string>;
        compToken(overrides?: CallOverrides): Promise<string>;
        dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;
        claimTokens(_token: string, _to: string, overrides?: CallOverrides): Promise<void>;
        migrateTo_6_1_0(_interestReceiver: string, overrides?: CallOverrides): Promise<void>;
        initialize(_validatorContract: string, _erc20token: string, _requiredBlockConfirmations: BigNumberish, _gasPrice: BigNumberish, _dailyLimitMaxPerTxMinPerTxArray: [
            BigNumberish,
            BigNumberish,
            BigNumberish
        ], _homeDailyLimitHomeMaxPerTxArray: [BigNumberish, BigNumberish], _owner: string, _decimalShift: BigNumberish, _bridgeOnOtherSide: string, overrides?: CallOverrides): Promise<boolean>;
        investDai(overrides?: CallOverrides): Promise<void>;
        claimCompAndPay(overrides?: CallOverrides): Promise<void>;
        setPayMaster(_paymaster: string, overrides?: CallOverrides): Promise<void>;
        withinExecutionLimit(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        executionMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;
        requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        setInterestReceiver(_token: string, _receiver: string, overrides?: CallOverrides): Promise<void>;
        maxAvailablePerTx(overrides?: CallOverrides): Promise<BigNumber>;
        validatorContract(overrides?: CallOverrides): Promise<string>;
        deployedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;
        getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            major: BigNumber;
            minor: BigNumber;
            patch: BigNumber;
        }>;
        setMinPerTx(_minPerTx: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setMinInterestPaid(_token: string, _minInterestPaid: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setMinCashThreshold(_token: string, _minCashThreshold: BigNumberish, overrides?: CallOverrides): Promise<void>;
        interestReceiver(_token: string, overrides?: CallOverrides): Promise<string>;
        setRequiredBlockConfirmations(_blockConfirmations: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setDailyLimit(_dailyLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;
        cDaiToken(overrides?: CallOverrides): Promise<string>;
        daiToken(overrides?: CallOverrides): Promise<string>;
        setGasPrice(_gasPrice: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setMaxPerTx(_maxPerTx: BigNumberish, overrides?: CallOverrides): Promise<void>;
        interestAmount(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        initializeInterest(_token: string, _minCashThreshold: BigNumberish, _minInterestPaid: BigNumberish, _interestReceiver: string, overrides?: CallOverrides): Promise<void>;
        getTrustedForwarder(overrides?: CallOverrides): Promise<string>;
        investedAmount(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        payInterest(_token: string, overrides?: CallOverrides): Promise<void>;
        isInterestEnabled(_token: string, overrides?: CallOverrides): Promise<boolean>;
        setTrustedForwarder(_trustedForwarder: string, overrides?: CallOverrides): Promise<void>;
        decimalShift(overrides?: CallOverrides): Promise<BigNumber>;
        minPerTx(overrides?: CallOverrides): Promise<BigNumber>;
        withinLimit(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        setExecutionMaxPerTx(_maxPerTx: BigNumberish, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        disableInterest(_token: string, overrides?: CallOverrides): Promise<void>;
        maxPerTx(overrides?: CallOverrides): Promise<BigNumber>;
        gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "PaidInterest(address,address,uint256)"(token?: string | null, to?: null, value?: null): PaidInterestEventFilter;
        PaidInterest(token?: string | null, to?: null, value?: null): PaidInterestEventFilter;
        "RelayedMessage(address,uint256,bytes32)"(recipient?: null, value?: null, transactionHash?: null): RelayedMessageEventFilter;
        RelayedMessage(recipient?: null, value?: null, transactionHash?: null): RelayedMessageEventFilter;
        "UserRequestForAffirmation(address,uint256)"(recipient?: null, value?: null): UserRequestForAffirmationEventFilter;
        UserRequestForAffirmation(recipient?: null, value?: null): UserRequestForAffirmationEventFilter;
        "DailyLimitChanged(uint256)"(newLimit?: null): DailyLimitChangedEventFilter;
        DailyLimitChanged(newLimit?: null): DailyLimitChangedEventFilter;
        "ExecutionDailyLimitChanged(uint256)"(newLimit?: null): ExecutionDailyLimitChangedEventFilter;
        ExecutionDailyLimitChanged(newLimit?: null): ExecutionDailyLimitChangedEventFilter;
        "GasPriceChanged(uint256)"(gasPrice?: null): GasPriceChangedEventFilter;
        GasPriceChanged(gasPrice?: null): GasPriceChangedEventFilter;
        "RequiredBlockConfirmationChanged(uint256)"(requiredBlockConfirmations?: null): RequiredBlockConfirmationChangedEventFilter;
        RequiredBlockConfirmationChanged(requiredBlockConfirmations?: null): RequiredBlockConfirmationChangedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        relayTokens(_receiver: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        invest(_token: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        erc20token(overrides?: CallOverrides): Promise<BigNumber>;
        executeSignaturesGSN(message: BytesLike, signatures: BytesLike, maxTokensFee: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        relayedMessages(_txHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        totalSpentPerDay(_day: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isInitialized(overrides?: CallOverrides): Promise<BigNumber>;
        setExecutionDailyLimit(_dailyLimit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getCurrentDay(overrides?: CallOverrides): Promise<BigNumber>;
        requiredBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;
        executeSignatures(message: BytesLike, signatures: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getBridgeMode(overrides?: CallOverrides): Promise<BigNumber>;
        executionDailyLimit(overrides?: CallOverrides): Promise<BigNumber>;
        minInterestPaid(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;
        totalExecutedPerDay(_day: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        minCashThreshold(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<BigNumber>;
        comptroller(overrides?: CallOverrides): Promise<BigNumber>;
        compToken(overrides?: CallOverrides): Promise<BigNumber>;
        dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;
        claimTokens(_token: string, _to: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        migrateTo_6_1_0(_interestReceiver: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        initialize(_validatorContract: string, _erc20token: string, _requiredBlockConfirmations: BigNumberish, _gasPrice: BigNumberish, _dailyLimitMaxPerTxMinPerTxArray: [
            BigNumberish,
            BigNumberish,
            BigNumberish
        ], _homeDailyLimitHomeMaxPerTxArray: [BigNumberish, BigNumberish], _owner: string, _decimalShift: BigNumberish, _bridgeOnOtherSide: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        investDai(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        claimCompAndPay(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setPayMaster(_paymaster: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        withinExecutionLimit(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        executionMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;
        requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        setInterestReceiver(_token: string, _receiver: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        maxAvailablePerTx(overrides?: CallOverrides): Promise<BigNumber>;
        validatorContract(overrides?: CallOverrides): Promise<BigNumber>;
        deployedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;
        getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<BigNumber>;
        setMinPerTx(_minPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setMinInterestPaid(_token: string, _minInterestPaid: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setMinCashThreshold(_token: string, _minCashThreshold: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        interestReceiver(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        setRequiredBlockConfirmations(_blockConfirmations: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setDailyLimit(_dailyLimit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        cDaiToken(overrides?: CallOverrides): Promise<BigNumber>;
        daiToken(overrides?: CallOverrides): Promise<BigNumber>;
        setGasPrice(_gasPrice: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setMaxPerTx(_maxPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        interestAmount(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        initializeInterest(_token: string, _minCashThreshold: BigNumberish, _minInterestPaid: BigNumberish, _interestReceiver: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;
        investedAmount(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        payInterest(_token: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        isInterestEnabled(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        setTrustedForwarder(_trustedForwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        decimalShift(overrides?: CallOverrides): Promise<BigNumber>;
        minPerTx(overrides?: CallOverrides): Promise<BigNumber>;
        withinLimit(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        setExecutionMaxPerTx(_maxPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        disableInterest(_token: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        maxPerTx(overrides?: CallOverrides): Promise<BigNumber>;
        gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        relayTokens(_receiver: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        invest(_token: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        erc20token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executeSignaturesGSN(message: BytesLike, signatures: BytesLike, maxTokensFee: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        relayedMessages(_txHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSpentPerDay(_day: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setExecutionDailyLimit(_dailyLimit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getCurrentDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        requiredBlockConfirmations(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executeSignatures(message: BytesLike, signatures: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getBridgeMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executionDailyLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        minInterestPaid(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalExecutedPerDay(_day: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        minCashThreshold(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        compToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dailyLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        claimTokens(_token: string, _to: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        migrateTo_6_1_0(_interestReceiver: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        initialize(_validatorContract: string, _erc20token: string, _requiredBlockConfirmations: BigNumberish, _gasPrice: BigNumberish, _dailyLimitMaxPerTxMinPerTxArray: [
            BigNumberish,
            BigNumberish,
            BigNumberish
        ], _homeDailyLimitHomeMaxPerTxArray: [BigNumberish, BigNumberish], _owner: string, _decimalShift: BigNumberish, _bridgeOnOtherSide: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        investDai(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        claimCompAndPay(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setPayMaster(_paymaster: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        withinExecutionLimit(_amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executionMaxPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        requiredSignatures(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setInterestReceiver(_token: string, _receiver: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        maxAvailablePerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        validatorContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deployedAtBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setMinPerTx(_minPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setMinInterestPaid(_token: string, _minInterestPaid: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setMinCashThreshold(_token: string, _minCashThreshold: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        interestReceiver(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setRequiredBlockConfirmations(_blockConfirmations: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setDailyLimit(_dailyLimit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        cDaiToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        daiToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setGasPrice(_gasPrice: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setMaxPerTx(_maxPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        interestAmount(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initializeInterest(_token: string, _minCashThreshold: BigNumberish, _minInterestPaid: BigNumberish, _interestReceiver: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getTrustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        investedAmount(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        payInterest(_token: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        isInterestEnabled(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setTrustedForwarder(_trustedForwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        decimalShift(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        minPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withinLimit(_amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setExecutionMaxPerTx(_maxPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        disableInterest(_token: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        maxPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        gasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=L1XDaiPoaBridge.d.ts.map