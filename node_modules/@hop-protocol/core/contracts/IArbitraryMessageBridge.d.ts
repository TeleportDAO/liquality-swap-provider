import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface IArbitraryMessageBridgeInterface extends utils.Interface {
    contractName: "IArbitraryMessageBridge";
    functions: {
        "failedMessageDataHash(bytes32)": FunctionFragment;
        "failedMessageReceiver(bytes32)": FunctionFragment;
        "failedMessageSender(bytes32)": FunctionFragment;
        "maxGasPerTx()": FunctionFragment;
        "messageCallStatus(bytes32)": FunctionFragment;
        "messageId()": FunctionFragment;
        "messageSender()": FunctionFragment;
        "messageSourceChainId()": FunctionFragment;
        "requireToPassMessage(address,bytes,uint256)": FunctionFragment;
        "transactionHash()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "failedMessageDataHash", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "failedMessageReceiver", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "failedMessageSender", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "maxGasPerTx", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageCallStatus", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "messageId", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageSender", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageSourceChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "requireToPassMessage", values: [string, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transactionHash", values?: undefined): string;
    decodeFunctionResult(functionFragment: "failedMessageDataHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failedMessageReceiver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failedMessageSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxGasPerTx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageCallStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageSourceChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requireToPassMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transactionHash", data: BytesLike): Result;
    events: {};
}
export interface IArbitraryMessageBridge extends BaseContract {
    contractName: "IArbitraryMessageBridge";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IArbitraryMessageBridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        failedMessageDataHash(_messageId: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        failedMessageReceiver(_messageId: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        failedMessageSender(_messageId: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        maxGasPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;
        messageCallStatus(_messageId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        messageId(overrides?: CallOverrides): Promise<[string]>;
        messageSender(overrides?: CallOverrides): Promise<[string]>;
        messageSourceChainId(overrides?: CallOverrides): Promise<[string]>;
        requireToPassMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transactionHash(overrides?: CallOverrides): Promise<[string]>;
    };
    failedMessageDataHash(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
    failedMessageReceiver(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
    failedMessageSender(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
    maxGasPerTx(overrides?: CallOverrides): Promise<BigNumber>;
    messageCallStatus(_messageId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    messageId(overrides?: CallOverrides): Promise<string>;
    messageSender(overrides?: CallOverrides): Promise<string>;
    messageSourceChainId(overrides?: CallOverrides): Promise<string>;
    requireToPassMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transactionHash(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        failedMessageDataHash(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
        failedMessageReceiver(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
        failedMessageSender(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
        maxGasPerTx(overrides?: CallOverrides): Promise<BigNumber>;
        messageCallStatus(_messageId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        messageId(overrides?: CallOverrides): Promise<string>;
        messageSender(overrides?: CallOverrides): Promise<string>;
        messageSourceChainId(overrides?: CallOverrides): Promise<string>;
        requireToPassMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: CallOverrides): Promise<string>;
        transactionHash(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        failedMessageDataHash(_messageId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        failedMessageReceiver(_messageId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        failedMessageSender(_messageId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        maxGasPerTx(overrides?: CallOverrides): Promise<BigNumber>;
        messageCallStatus(_messageId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        messageId(overrides?: CallOverrides): Promise<BigNumber>;
        messageSender(overrides?: CallOverrides): Promise<BigNumber>;
        messageSourceChainId(overrides?: CallOverrides): Promise<BigNumber>;
        requireToPassMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transactionHash(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        failedMessageDataHash(_messageId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        failedMessageReceiver(_messageId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        failedMessageSender(_messageId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        maxGasPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageCallStatus(_messageId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageSourceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        requireToPassMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transactionHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IArbitraryMessageBridge.d.ts.map