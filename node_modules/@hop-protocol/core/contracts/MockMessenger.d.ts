import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface MockMessengerInterface extends utils.Interface {
    contractName: "MockMessenger";
    functions: {
        "canonicalToken()": FunctionFragment;
        "messageSender()": FunctionFragment;
        "messageSourceChainId()": FunctionFragment;
        "nextMessage()": FunctionFragment;
        "receiveMessage(address,bytes,address)": FunctionFragment;
        "relayNextMessage()": FunctionFragment;
        "xDomainMessageSender()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "canonicalToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageSender", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageSourceChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveMessage", values: [string, BytesLike, string]): string;
    encodeFunctionData(functionFragment: "relayNextMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "xDomainMessageSender", values?: undefined): string;
    decodeFunctionResult(functionFragment: "canonicalToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageSourceChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "relayNextMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xDomainMessageSender", data: BytesLike): Result;
    events: {};
}
export interface MockMessenger extends BaseContract {
    contractName: "MockMessenger";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockMessengerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        canonicalToken(overrides?: CallOverrides): Promise<[string]>;
        messageSender(overrides?: CallOverrides): Promise<[string]>;
        messageSourceChainId(overrides?: CallOverrides): Promise<[string]>;
        nextMessage(overrides?: CallOverrides): Promise<[
            string,
            string,
            string
        ] & {
            target: string;
            message: string;
            sender: string;
        }>;
        receiveMessage(_target: string, _message: BytesLike, _sender: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        relayNextMessage(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<[string]>;
    };
    canonicalToken(overrides?: CallOverrides): Promise<string>;
    messageSender(overrides?: CallOverrides): Promise<string>;
    messageSourceChainId(overrides?: CallOverrides): Promise<string>;
    nextMessage(overrides?: CallOverrides): Promise<[
        string,
        string,
        string
    ] & {
        target: string;
        message: string;
        sender: string;
    }>;
    receiveMessage(_target: string, _message: BytesLike, _sender: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    relayNextMessage(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        canonicalToken(overrides?: CallOverrides): Promise<string>;
        messageSender(overrides?: CallOverrides): Promise<string>;
        messageSourceChainId(overrides?: CallOverrides): Promise<string>;
        nextMessage(overrides?: CallOverrides): Promise<[
            string,
            string,
            string
        ] & {
            target: string;
            message: string;
            sender: string;
        }>;
        receiveMessage(_target: string, _message: BytesLike, _sender: string, overrides?: CallOverrides): Promise<void>;
        relayNextMessage(overrides?: CallOverrides): Promise<void>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        canonicalToken(overrides?: CallOverrides): Promise<BigNumber>;
        messageSender(overrides?: CallOverrides): Promise<BigNumber>;
        messageSourceChainId(overrides?: CallOverrides): Promise<BigNumber>;
        nextMessage(overrides?: CallOverrides): Promise<BigNumber>;
        receiveMessage(_target: string, _message: BytesLike, _sender: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        relayNextMessage(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        canonicalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageSourceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveMessage(_target: string, _message: BytesLike, _sender: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        relayNextMessage(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MockMessenger.d.ts.map