import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface L2AmmWrapperInterface extends utils.Interface {
    contractName: "L2AmmWrapper";
    functions: {
        "attemptSwap(address,uint256,uint256,uint256)": FunctionFragment;
        "bridge()": FunctionFragment;
        "exchangeAddress()": FunctionFragment;
        "hToken()": FunctionFragment;
        "l2CanonicalToken()": FunctionFragment;
        "l2CanonicalTokenIsEth()": FunctionFragment;
        "swapAndSend(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "attemptSwap", values: [string, BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
    encodeFunctionData(functionFragment: "exchangeAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "hToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2CanonicalToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2CanonicalTokenIsEth", values?: undefined): string;
    encodeFunctionData(functionFragment: "swapAndSend", values: [
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
    ]): string;
    decodeFunctionResult(functionFragment: "attemptSwap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "exchangeAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2CanonicalToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2CanonicalTokenIsEth", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapAndSend", data: BytesLike): Result;
    events: {};
}
export interface L2AmmWrapper extends BaseContract {
    contractName: "L2AmmWrapper";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: L2AmmWrapperInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        attemptSwap(recipient: string, amount: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        bridge(overrides?: CallOverrides): Promise<[string]>;
        exchangeAddress(overrides?: CallOverrides): Promise<[string]>;
        hToken(overrides?: CallOverrides): Promise<[string]>;
        l2CanonicalToken(overrides?: CallOverrides): Promise<[string]>;
        l2CanonicalTokenIsEth(overrides?: CallOverrides): Promise<[boolean]>;
        swapAndSend(chainId: BigNumberish, recipient: string, amount: BigNumberish, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, destinationAmountOutMin: BigNumberish, destinationDeadline: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    attemptSwap(recipient: string, amount: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    bridge(overrides?: CallOverrides): Promise<string>;
    exchangeAddress(overrides?: CallOverrides): Promise<string>;
    hToken(overrides?: CallOverrides): Promise<string>;
    l2CanonicalToken(overrides?: CallOverrides): Promise<string>;
    l2CanonicalTokenIsEth(overrides?: CallOverrides): Promise<boolean>;
    swapAndSend(chainId: BigNumberish, recipient: string, amount: BigNumberish, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, destinationAmountOutMin: BigNumberish, destinationDeadline: BigNumberish, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        attemptSwap(recipient: string, amount: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, overrides?: CallOverrides): Promise<void>;
        bridge(overrides?: CallOverrides): Promise<string>;
        exchangeAddress(overrides?: CallOverrides): Promise<string>;
        hToken(overrides?: CallOverrides): Promise<string>;
        l2CanonicalToken(overrides?: CallOverrides): Promise<string>;
        l2CanonicalTokenIsEth(overrides?: CallOverrides): Promise<boolean>;
        swapAndSend(chainId: BigNumberish, recipient: string, amount: BigNumberish, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, destinationAmountOutMin: BigNumberish, destinationDeadline: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        attemptSwap(recipient: string, amount: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        bridge(overrides?: CallOverrides): Promise<BigNumber>;
        exchangeAddress(overrides?: CallOverrides): Promise<BigNumber>;
        hToken(overrides?: CallOverrides): Promise<BigNumber>;
        l2CanonicalToken(overrides?: CallOverrides): Promise<BigNumber>;
        l2CanonicalTokenIsEth(overrides?: CallOverrides): Promise<BigNumber>;
        swapAndSend(chainId: BigNumberish, recipient: string, amount: BigNumberish, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, destinationAmountOutMin: BigNumberish, destinationDeadline: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        attemptSwap(recipient: string, amount: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        exchangeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2CanonicalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2CanonicalTokenIsEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        swapAndSend(chainId: BigNumberish, recipient: string, amount: BigNumberish, bonderFee: BigNumberish, amountOutMin: BigNumberish, deadline: BigNumberish, destinationAmountOutMin: BigNumberish, destinationDeadline: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=L2AmmWrapper.d.ts.map