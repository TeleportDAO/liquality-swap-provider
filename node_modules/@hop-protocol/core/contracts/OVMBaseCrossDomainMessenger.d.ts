import { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface OVMBaseCrossDomainMessengerInterface extends utils.Interface {
    contractName: "OVMBaseCrossDomainMessenger";
    functions: {
        "messageNonce()": FunctionFragment;
        "relayedMessages(bytes32)": FunctionFragment;
        "sentMessages(bytes32)": FunctionFragment;
        "successfulMessages(bytes32)": FunctionFragment;
        "xDomainMessageSender()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "messageNonce", values?: undefined): string;
    encodeFunctionData(functionFragment: "relayedMessages", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "sentMessages", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "successfulMessages", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "xDomainMessageSender", values?: undefined): string;
    decodeFunctionResult(functionFragment: "messageNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "relayedMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sentMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "successfulMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xDomainMessageSender", data: BytesLike): Result;
    events: {};
}
export interface OVMBaseCrossDomainMessenger extends BaseContract {
    contractName: "OVMBaseCrossDomainMessenger";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OVMBaseCrossDomainMessengerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        messageNonce(overrides?: CallOverrides): Promise<[BigNumber]>;
        relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        successfulMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<[string]>;
    };
    messageNonce(overrides?: CallOverrides): Promise<BigNumber>;
    relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    successfulMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        messageNonce(overrides?: CallOverrides): Promise<BigNumber>;
        relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        successfulMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        messageNonce(overrides?: CallOverrides): Promise<BigNumber>;
        relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        successfulMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        messageNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        successfulMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=OVMBaseCrossDomainMessenger.d.ts.map