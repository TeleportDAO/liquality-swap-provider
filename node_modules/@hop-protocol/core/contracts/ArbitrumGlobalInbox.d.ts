import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface ArbitrumGlobalInboxInterface extends utils.Interface {
    contractName: "ArbitrumGlobalInbox";
    functions: {
        "FAILED_TRANSFER()": FunctionFragment;
        "deployL2ContractPair(address,uint256,uint256,uint256,bytes)": FunctionFragment;
        "depositERC20Message(address,address,address,uint256)": FunctionFragment;
        "depositERC721Message(address,address,address,uint256)": FunctionFragment;
        "depositEthMessage(address,address)": FunctionFragment;
        "getERC20Balance(address,address)": FunctionFragment;
        "getERC721Tokens(address,address)": FunctionFragment;
        "getEthBalance(address)": FunctionFragment;
        "getInbox(address)": FunctionFragment;
        "getPaymentOwner(address,uint256)": FunctionFragment;
        "hasERC721(address,address,uint256)": FunctionFragment;
        "isPairedContract(address,address)": FunctionFragment;
        "ownedERC20s(address)": FunctionFragment;
        "ownedERC721s(address)": FunctionFragment;
        "sendInitializationMessage(bytes)": FunctionFragment;
        "sendL2Message(address,bytes)": FunctionFragment;
        "sendL2MessageFromOrigin(address,bytes)": FunctionFragment;
        "sendMessages(bytes,uint256,uint256)": FunctionFragment;
        "transferPayment(address,address,uint256)": FunctionFragment;
        "withdrawERC20(address)": FunctionFragment;
        "withdrawERC721(address,uint256)": FunctionFragment;
        "withdrawEth()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "FAILED_TRANSFER", values?: undefined): string;
    encodeFunctionData(functionFragment: "deployL2ContractPair", values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "depositERC20Message", values: [string, string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "depositERC721Message", values: [string, string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "depositEthMessage", values: [string, string]): string;
    encodeFunctionData(functionFragment: "getERC20Balance", values: [string, string]): string;
    encodeFunctionData(functionFragment: "getERC721Tokens", values: [string, string]): string;
    encodeFunctionData(functionFragment: "getEthBalance", values: [string]): string;
    encodeFunctionData(functionFragment: "getInbox", values: [string]): string;
    encodeFunctionData(functionFragment: "getPaymentOwner", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "hasERC721", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isPairedContract", values: [string, string]): string;
    encodeFunctionData(functionFragment: "ownedERC20s", values: [string]): string;
    encodeFunctionData(functionFragment: "ownedERC721s", values: [string]): string;
    encodeFunctionData(functionFragment: "sendInitializationMessage", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "sendL2Message", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "sendL2MessageFromOrigin", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "sendMessages", values: [BytesLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferPayment", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawERC20", values: [string]): string;
    encodeFunctionData(functionFragment: "withdrawERC721", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawEth", values?: undefined): string;
    decodeFunctionResult(functionFragment: "FAILED_TRANSFER", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployL2ContractPair", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositERC20Message", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositERC721Message", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositEthMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getERC20Balance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getERC721Tokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getEthBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPaymentOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasERC721", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPairedContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownedERC20s", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownedERC721s", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendInitializationMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendL2Message", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendL2MessageFromOrigin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferPayment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawERC20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawERC721", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawEth", data: BytesLike): Result;
    events: {
        "BuddyContractDeployed(address,bytes)": EventFragment;
        "BuddyContractPair(address,address)": EventFragment;
        "MessageDelivered(address,uint8,address,uint256,bytes)": EventFragment;
        "MessageDeliveredFromOrigin(address,uint8,address,uint256)": EventFragment;
        "PaymentTransfer(uint256,address,address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "BuddyContractDeployed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BuddyContractPair"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MessageDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MessageDeliveredFromOrigin"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentTransfer"): EventFragment;
}
export declare type BuddyContractDeployedEvent = TypedEvent<[
    string,
    string
], {
    sender: string;
    data: string;
}>;
export declare type BuddyContractDeployedEventFilter = TypedEventFilter<BuddyContractDeployedEvent>;
export declare type BuddyContractPairEvent = TypedEvent<[
    string,
    string
], {
    sender: string;
    data: string;
}>;
export declare type BuddyContractPairEventFilter = TypedEventFilter<BuddyContractPairEvent>;
export declare type MessageDeliveredEvent = TypedEvent<[
    string,
    number,
    string,
    BigNumber,
    string
], {
    chain: string;
    kind: number;
    sender: string;
    inboxSeqNum: BigNumber;
    data: string;
}>;
export declare type MessageDeliveredEventFilter = TypedEventFilter<MessageDeliveredEvent>;
export declare type MessageDeliveredFromOriginEvent = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], {
    chain: string;
    kind: number;
    sender: string;
    inboxSeqNum: BigNumber;
}>;
export declare type MessageDeliveredFromOriginEventFilter = TypedEventFilter<MessageDeliveredFromOriginEvent>;
export declare type PaymentTransferEvent = TypedEvent<[
    BigNumber,
    string,
    string,
    string
], {
    messageIndex: BigNumber;
    originalOwner: string;
    prevOwner: string;
    newOwner: string;
}>;
export declare type PaymentTransferEventFilter = TypedEventFilter<PaymentTransferEvent>;
export interface ArbitrumGlobalInbox extends BaseContract {
    contractName: "ArbitrumGlobalInbox";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ArbitrumGlobalInboxInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        FAILED_TRANSFER(overrides?: CallOverrides): Promise<[string]>;
        deployL2ContractPair(chain: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, payment: BigNumberish, contractData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositERC20Message(chain: string, erc20: string, to: string, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositERC721Message(chain: string, erc721: string, to: string, id: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositEthMessage(chain: string, to: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getERC20Balance(_tokenContract: string, _owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        getERC721Tokens(_erc721: string, _owner: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;
        getEthBalance(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        getInbox(account: string, overrides?: CallOverrides): Promise<[string, BigNumber]>;
        getPaymentOwner(originalOwner: string, messageIndex: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        hasERC721(_erc721: string, _owner: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
        isPairedContract(_tokenContract: string, _chain: string, overrides?: CallOverrides): Promise<[number]>;
        ownedERC20s(_owner: string, overrides?: CallOverrides): Promise<[string[]]>;
        ownedERC721s(_owner: string, overrides?: CallOverrides): Promise<[string[]]>;
        sendInitializationMessage(messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        sendL2Message(chain: string, messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        sendL2MessageFromOrigin(chain: string, messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        sendMessages(messages: BytesLike, initialMaxSendCount: BigNumberish, finalMaxSendCount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferPayment(originalOwner: string, newOwner: string, messageIndex: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        withdrawERC20(_tokenContract: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        withdrawERC721(_erc721: string, _tokenId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        withdrawEth(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    FAILED_TRANSFER(overrides?: CallOverrides): Promise<string>;
    deployL2ContractPair(chain: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, payment: BigNumberish, contractData: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositERC20Message(chain: string, erc20: string, to: string, value: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositERC721Message(chain: string, erc721: string, to: string, id: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositEthMessage(chain: string, to: string, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getERC20Balance(_tokenContract: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;
    getERC721Tokens(_erc721: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;
    getEthBalance(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
    getInbox(account: string, overrides?: CallOverrides): Promise<[string, BigNumber]>;
    getPaymentOwner(originalOwner: string, messageIndex: BigNumberish, overrides?: CallOverrides): Promise<string>;
    hasERC721(_erc721: string, _owner: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    isPairedContract(_tokenContract: string, _chain: string, overrides?: CallOverrides): Promise<number>;
    ownedERC20s(_owner: string, overrides?: CallOverrides): Promise<string[]>;
    ownedERC721s(_owner: string, overrides?: CallOverrides): Promise<string[]>;
    sendInitializationMessage(messageData: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    sendL2Message(chain: string, messageData: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    sendL2MessageFromOrigin(chain: string, messageData: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    sendMessages(messages: BytesLike, initialMaxSendCount: BigNumberish, finalMaxSendCount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferPayment(originalOwner: string, newOwner: string, messageIndex: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    withdrawERC20(_tokenContract: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    withdrawERC721(_erc721: string, _tokenId: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    withdrawEth(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        FAILED_TRANSFER(overrides?: CallOverrides): Promise<string>;
        deployL2ContractPair(chain: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, payment: BigNumberish, contractData: BytesLike, overrides?: CallOverrides): Promise<void>;
        depositERC20Message(chain: string, erc20: string, to: string, value: BigNumberish, overrides?: CallOverrides): Promise<void>;
        depositERC721Message(chain: string, erc721: string, to: string, id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        depositEthMessage(chain: string, to: string, overrides?: CallOverrides): Promise<void>;
        getERC20Balance(_tokenContract: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;
        getERC721Tokens(_erc721: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;
        getEthBalance(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
        getInbox(account: string, overrides?: CallOverrides): Promise<[string, BigNumber]>;
        getPaymentOwner(originalOwner: string, messageIndex: BigNumberish, overrides?: CallOverrides): Promise<string>;
        hasERC721(_erc721: string, _owner: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        isPairedContract(_tokenContract: string, _chain: string, overrides?: CallOverrides): Promise<number>;
        ownedERC20s(_owner: string, overrides?: CallOverrides): Promise<string[]>;
        ownedERC721s(_owner: string, overrides?: CallOverrides): Promise<string[]>;
        sendInitializationMessage(messageData: BytesLike, overrides?: CallOverrides): Promise<void>;
        sendL2Message(chain: string, messageData: BytesLike, overrides?: CallOverrides): Promise<void>;
        sendL2MessageFromOrigin(chain: string, messageData: BytesLike, overrides?: CallOverrides): Promise<void>;
        sendMessages(messages: BytesLike, initialMaxSendCount: BigNumberish, finalMaxSendCount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        transferPayment(originalOwner: string, newOwner: string, messageIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;
        withdrawERC20(_tokenContract: string, overrides?: CallOverrides): Promise<void>;
        withdrawERC721(_erc721: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        withdrawEth(overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "BuddyContractDeployed(address,bytes)"(sender?: string | null, data?: null): BuddyContractDeployedEventFilter;
        BuddyContractDeployed(sender?: string | null, data?: null): BuddyContractDeployedEventFilter;
        "BuddyContractPair(address,address)"(sender?: string | null, data?: null): BuddyContractPairEventFilter;
        BuddyContractPair(sender?: string | null, data?: null): BuddyContractPairEventFilter;
        "MessageDelivered(address,uint8,address,uint256,bytes)"(chain?: string | null, kind?: BigNumberish | null, sender?: string | null, inboxSeqNum?: null, data?: null): MessageDeliveredEventFilter;
        MessageDelivered(chain?: string | null, kind?: BigNumberish | null, sender?: string | null, inboxSeqNum?: null, data?: null): MessageDeliveredEventFilter;
        "MessageDeliveredFromOrigin(address,uint8,address,uint256)"(chain?: string | null, kind?: BigNumberish | null, sender?: string | null, inboxSeqNum?: null): MessageDeliveredFromOriginEventFilter;
        MessageDeliveredFromOrigin(chain?: string | null, kind?: BigNumberish | null, sender?: string | null, inboxSeqNum?: null): MessageDeliveredFromOriginEventFilter;
        "PaymentTransfer(uint256,address,address,address)"(messageIndex?: null, originalOwner?: null, prevOwner?: null, newOwner?: null): PaymentTransferEventFilter;
        PaymentTransfer(messageIndex?: null, originalOwner?: null, prevOwner?: null, newOwner?: null): PaymentTransferEventFilter;
    };
    estimateGas: {
        FAILED_TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;
        deployL2ContractPair(chain: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, payment: BigNumberish, contractData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositERC20Message(chain: string, erc20: string, to: string, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositERC721Message(chain: string, erc721: string, to: string, id: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositEthMessage(chain: string, to: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getERC20Balance(_tokenContract: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;
        getERC721Tokens(_erc721: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;
        getEthBalance(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
        getInbox(account: string, overrides?: CallOverrides): Promise<BigNumber>;
        getPaymentOwner(originalOwner: string, messageIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        hasERC721(_erc721: string, _owner: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isPairedContract(_tokenContract: string, _chain: string, overrides?: CallOverrides): Promise<BigNumber>;
        ownedERC20s(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
        ownedERC721s(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
        sendInitializationMessage(messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        sendL2Message(chain: string, messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        sendL2MessageFromOrigin(chain: string, messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        sendMessages(messages: BytesLike, initialMaxSendCount: BigNumberish, finalMaxSendCount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferPayment(originalOwner: string, newOwner: string, messageIndex: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        withdrawERC20(_tokenContract: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        withdrawERC721(_erc721: string, _tokenId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        withdrawEth(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        FAILED_TRANSFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deployL2ContractPair(chain: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, payment: BigNumberish, contractData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositERC20Message(chain: string, erc20: string, to: string, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositERC721Message(chain: string, erc721: string, to: string, id: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositEthMessage(chain: string, to: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getERC20Balance(_tokenContract: string, _owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getERC721Tokens(_erc721: string, _owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getEthBalance(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getInbox(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPaymentOwner(originalOwner: string, messageIndex: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasERC721(_erc721: string, _owner: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isPairedContract(_tokenContract: string, _chain: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ownedERC20s(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ownedERC721s(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sendInitializationMessage(messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        sendL2Message(chain: string, messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        sendL2MessageFromOrigin(chain: string, messageData: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        sendMessages(messages: BytesLike, initialMaxSendCount: BigNumberish, finalMaxSendCount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferPayment(originalOwner: string, newOwner: string, messageIndex: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        withdrawERC20(_tokenContract: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        withdrawERC721(_erc721: string, _tokenId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        withdrawEth(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=ArbitrumGlobalInbox.d.ts.map