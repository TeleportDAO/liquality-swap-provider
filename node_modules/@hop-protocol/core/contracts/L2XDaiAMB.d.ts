import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface L2XDaiAMBInterface extends utils.Interface {
    contractName: "L2XDaiAMB";
    functions: {
        "transactionHash()": FunctionFragment;
        "numMessagesSigned(bytes32)": FunctionFragment;
        "sourceChainId()": FunctionFragment;
        "_sendMessage(address,bytes,uint256,uint256)": FunctionFragment;
        "signature(bytes32,uint256)": FunctionFragment;
        "initialize(uint256,uint256,address,uint256,uint256,uint256,address)": FunctionFragment;
        "isInitialized()": FunctionFragment;
        "requiredBlockConfirmations()": FunctionFragment;
        "getMinimumGasUsage(bytes)": FunctionFragment;
        "failedMessageReceiver(bytes32)": FunctionFragment;
        "getBridgeMode()": FunctionFragment;
        "setChainIds(uint256,uint256)": FunctionFragment;
        "message(bytes32)": FunctionFragment;
        "failedMessageSender(bytes32)": FunctionFragment;
        "submitSignature(bytes,bytes)": FunctionFragment;
        "messageId()": FunctionFragment;
        "numAffirmationsSigned(bytes32)": FunctionFragment;
        "affirmationsSigned(bytes32)": FunctionFragment;
        "setMaxGasPerTx(uint256)": FunctionFragment;
        "requiredSignatures()": FunctionFragment;
        "owner()": FunctionFragment;
        "messagesSigned(bytes32)": FunctionFragment;
        "requireToConfirmMessage(address,bytes,uint256)": FunctionFragment;
        "validatorContract()": FunctionFragment;
        "deployedAtBlock()": FunctionFragment;
        "getBridgeInterfacesVersion()": FunctionFragment;
        "messageSourceChainId()": FunctionFragment;
        "setRequiredBlockConfirmations(uint256)": FunctionFragment;
        "destinationChainId()": FunctionFragment;
        "setGasPrice(uint256)": FunctionFragment;
        "messageCallStatus(bytes32)": FunctionFragment;
        "messageSender()": FunctionFragment;
        "decimalShift()": FunctionFragment;
        "requireToPassMessage(address,bytes,uint256)": FunctionFragment;
        "failedMessageDataHash(bytes32)": FunctionFragment;
        "maxGasPerTx()": FunctionFragment;
        "executeAffirmation(bytes)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "gasPrice()": FunctionFragment;
        "isAlreadyProcessed(uint256)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "transactionHash", values?: undefined): string;
    encodeFunctionData(functionFragment: "numMessagesSigned", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "sourceChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "_sendMessage", values: [string, BytesLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "signature", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
    ]): string;
    encodeFunctionData(functionFragment: "isInitialized", values?: undefined): string;
    encodeFunctionData(functionFragment: "requiredBlockConfirmations", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMinimumGasUsage", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "failedMessageReceiver", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getBridgeMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "setChainIds", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "message", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "failedMessageSender", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "submitSignature", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "messageId", values?: undefined): string;
    encodeFunctionData(functionFragment: "numAffirmationsSigned", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "affirmationsSigned", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setMaxGasPerTx", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "requiredSignatures", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "messagesSigned", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "requireToConfirmMessage", values: [string, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "validatorContract", values?: undefined): string;
    encodeFunctionData(functionFragment: "deployedAtBlock", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBridgeInterfacesVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageSourceChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "setRequiredBlockConfirmations", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "destinationChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "setGasPrice", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "messageCallStatus", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "messageSender", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimalShift", values?: undefined): string;
    encodeFunctionData(functionFragment: "requireToPassMessage", values: [string, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "failedMessageDataHash", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "maxGasPerTx", values?: undefined): string;
    encodeFunctionData(functionFragment: "executeAffirmation", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "gasPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "isAlreadyProcessed", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "transactionHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "numMessagesSigned", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sourceChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_sendMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isInitialized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requiredBlockConfirmations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMinimumGasUsage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failedMessageReceiver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBridgeMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setChainIds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "message", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failedMessageSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "submitSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "numAffirmationsSigned", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "affirmationsSigned", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxGasPerTx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requiredSignatures", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messagesSigned", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requireToConfirmMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validatorContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployedAtBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBridgeInterfacesVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageSourceChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRequiredBlockConfirmations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "destinationChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGasPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageCallStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimalShift", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requireToPassMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failedMessageDataHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxGasPerTx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeAffirmation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAlreadyProcessed", data: BytesLike): Result;
    events: {
        "UserRequestForSignature(bytes32,bytes)": EventFragment;
        "AffirmationCompleted(address,address,bytes32,bool)": EventFragment;
        "SignedForUserRequest(address,bytes32)": EventFragment;
        "SignedForAffirmation(address,bytes32)": EventFragment;
        "CollectedSignatures(address,bytes32,uint256)": EventFragment;
        "GasPriceChanged(uint256)": EventFragment;
        "RequiredBlockConfirmationChanged(uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "UserRequestForSignature"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AffirmationCompleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SignedForUserRequest"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SignedForAffirmation"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CollectedSignatures"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GasPriceChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RequiredBlockConfirmationChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export declare type UserRequestForSignatureEvent = TypedEvent<[
    string,
    string
], {
    messageId: string;
    encodedData: string;
}>;
export declare type UserRequestForSignatureEventFilter = TypedEventFilter<UserRequestForSignatureEvent>;
export declare type AffirmationCompletedEvent = TypedEvent<[
    string,
    string,
    string,
    boolean
], {
    sender: string;
    executor: string;
    messageId: string;
    status: boolean;
}>;
export declare type AffirmationCompletedEventFilter = TypedEventFilter<AffirmationCompletedEvent>;
export declare type SignedForUserRequestEvent = TypedEvent<[
    string,
    string
], {
    signer: string;
    messageHash: string;
}>;
export declare type SignedForUserRequestEventFilter = TypedEventFilter<SignedForUserRequestEvent>;
export declare type SignedForAffirmationEvent = TypedEvent<[
    string,
    string
], {
    signer: string;
    messageHash: string;
}>;
export declare type SignedForAffirmationEventFilter = TypedEventFilter<SignedForAffirmationEvent>;
export declare type CollectedSignaturesEvent = TypedEvent<[
    string,
    string,
    BigNumber
], {
    authorityResponsibleForRelay: string;
    messageHash: string;
    NumberOfCollectedSignatures: BigNumber;
}>;
export declare type CollectedSignaturesEventFilter = TypedEventFilter<CollectedSignaturesEvent>;
export declare type GasPriceChangedEvent = TypedEvent<[
    BigNumber
], {
    gasPrice: BigNumber;
}>;
export declare type GasPriceChangedEventFilter = TypedEventFilter<GasPriceChangedEvent>;
export declare type RequiredBlockConfirmationChangedEvent = TypedEvent<[
    BigNumber
], {
    requiredBlockConfirmations: BigNumber;
}>;
export declare type RequiredBlockConfirmationChangedEventFilter = TypedEventFilter<RequiredBlockConfirmationChangedEvent>;
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], {
    previousOwner: string;
    newOwner: string;
}>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface L2XDaiAMB extends BaseContract {
    contractName: "L2XDaiAMB";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: L2XDaiAMBInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        transactionHash(overrides?: CallOverrides): Promise<[string]>;
        numMessagesSigned(_message: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
        sourceChainId(overrides?: CallOverrides): Promise<[BigNumber]>;
        _sendMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, _dataType: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        signature(_hash: BytesLike, _index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        initialize(_sourceChainId: BigNumberish, _destinationChainId: BigNumberish, _validatorContract: string, _maxGasPerTx: BigNumberish, _gasPrice: BigNumberish, _requiredBlockConfirmations: BigNumberish, _owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        isInitialized(overrides?: CallOverrides): Promise<[boolean]>;
        requiredBlockConfirmations(overrides?: CallOverrides): Promise<[BigNumber]>;
        getMinimumGasUsage(_data: BytesLike, overrides?: CallOverrides): Promise<[BigNumber] & {
            gas: BigNumber;
        }>;
        failedMessageReceiver(_messageId: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        getBridgeMode(overrides?: CallOverrides): Promise<[string] & {
            _data: string;
        }>;
        setChainIds(_sourceChainId: BigNumberish, _destinationChainId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        message(_hash: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        failedMessageSender(_messageId: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        submitSignature(signature: BytesLike, message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        messageId(overrides?: CallOverrides): Promise<[string] & {
            id: string;
        }>;
        numAffirmationsSigned(_hash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
        affirmationsSigned(_hash: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        setMaxGasPerTx(_maxGasPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        requiredSignatures(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        messagesSigned(_message: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        requireToConfirmMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        validatorContract(overrides?: CallOverrides): Promise<[string]>;
        deployedAtBlock(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            major: BigNumber;
            minor: BigNumber;
            patch: BigNumber;
        }>;
        messageSourceChainId(overrides?: CallOverrides): Promise<[BigNumber] & {
            id: BigNumber;
        }>;
        setRequiredBlockConfirmations(_blockConfirmations: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        destinationChainId(overrides?: CallOverrides): Promise<[BigNumber]>;
        setGasPrice(_gasPrice: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        messageCallStatus(_messageId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        messageSender(overrides?: CallOverrides): Promise<[string] & {
            sender: string;
        }>;
        decimalShift(overrides?: CallOverrides): Promise<[BigNumber]>;
        requireToPassMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        failedMessageDataHash(_messageId: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        maxGasPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;
        executeAffirmation(message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        gasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
        isAlreadyProcessed(_number: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
    };
    transactionHash(overrides?: CallOverrides): Promise<string>;
    numMessagesSigned(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    sourceChainId(overrides?: CallOverrides): Promise<BigNumber>;
    _sendMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, _dataType: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    signature(_hash: BytesLike, _index: BigNumberish, overrides?: CallOverrides): Promise<string>;
    initialize(_sourceChainId: BigNumberish, _destinationChainId: BigNumberish, _validatorContract: string, _maxGasPerTx: BigNumberish, _gasPrice: BigNumberish, _requiredBlockConfirmations: BigNumberish, _owner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    isInitialized(overrides?: CallOverrides): Promise<boolean>;
    requiredBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;
    getMinimumGasUsage(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    failedMessageReceiver(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
    getBridgeMode(overrides?: CallOverrides): Promise<string>;
    setChainIds(_sourceChainId: BigNumberish, _destinationChainId: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    message(_hash: BytesLike, overrides?: CallOverrides): Promise<string>;
    failedMessageSender(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
    submitSignature(signature: BytesLike, message: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    messageId(overrides?: CallOverrides): Promise<string>;
    numAffirmationsSigned(_hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    affirmationsSigned(_hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    setMaxGasPerTx(_maxGasPerTx: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    messagesSigned(_message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    requireToConfirmMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    validatorContract(overrides?: CallOverrides): Promise<string>;
    deployedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;
    getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
    }>;
    messageSourceChainId(overrides?: CallOverrides): Promise<BigNumber>;
    setRequiredBlockConfirmations(_blockConfirmations: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    destinationChainId(overrides?: CallOverrides): Promise<BigNumber>;
    setGasPrice(_gasPrice: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    messageCallStatus(_messageId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    messageSender(overrides?: CallOverrides): Promise<string>;
    decimalShift(overrides?: CallOverrides): Promise<BigNumber>;
    requireToPassMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    failedMessageDataHash(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
    maxGasPerTx(overrides?: CallOverrides): Promise<BigNumber>;
    executeAffirmation(message: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
    isAlreadyProcessed(_number: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        transactionHash(overrides?: CallOverrides): Promise<string>;
        numMessagesSigned(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        sourceChainId(overrides?: CallOverrides): Promise<BigNumber>;
        _sendMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, _dataType: BigNumberish, overrides?: CallOverrides): Promise<string>;
        signature(_hash: BytesLike, _index: BigNumberish, overrides?: CallOverrides): Promise<string>;
        initialize(_sourceChainId: BigNumberish, _destinationChainId: BigNumberish, _validatorContract: string, _maxGasPerTx: BigNumberish, _gasPrice: BigNumberish, _requiredBlockConfirmations: BigNumberish, _owner: string, overrides?: CallOverrides): Promise<boolean>;
        isInitialized(overrides?: CallOverrides): Promise<boolean>;
        requiredBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;
        getMinimumGasUsage(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        failedMessageReceiver(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
        getBridgeMode(overrides?: CallOverrides): Promise<string>;
        setChainIds(_sourceChainId: BigNumberish, _destinationChainId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        message(_hash: BytesLike, overrides?: CallOverrides): Promise<string>;
        failedMessageSender(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
        submitSignature(signature: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<void>;
        messageId(overrides?: CallOverrides): Promise<string>;
        numAffirmationsSigned(_hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        affirmationsSigned(_hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        setMaxGasPerTx(_maxGasPerTx: BigNumberish, overrides?: CallOverrides): Promise<void>;
        requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        messagesSigned(_message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        requireToConfirmMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: CallOverrides): Promise<string>;
        validatorContract(overrides?: CallOverrides): Promise<string>;
        deployedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;
        getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            major: BigNumber;
            minor: BigNumber;
            patch: BigNumber;
        }>;
        messageSourceChainId(overrides?: CallOverrides): Promise<BigNumber>;
        setRequiredBlockConfirmations(_blockConfirmations: BigNumberish, overrides?: CallOverrides): Promise<void>;
        destinationChainId(overrides?: CallOverrides): Promise<BigNumber>;
        setGasPrice(_gasPrice: BigNumberish, overrides?: CallOverrides): Promise<void>;
        messageCallStatus(_messageId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        messageSender(overrides?: CallOverrides): Promise<string>;
        decimalShift(overrides?: CallOverrides): Promise<BigNumber>;
        requireToPassMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: CallOverrides): Promise<string>;
        failedMessageDataHash(_messageId: BytesLike, overrides?: CallOverrides): Promise<string>;
        maxGasPerTx(overrides?: CallOverrides): Promise<BigNumber>;
        executeAffirmation(message: BytesLike, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
        isAlreadyProcessed(_number: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "UserRequestForSignature(bytes32,bytes)"(messageId?: BytesLike | null, encodedData?: null): UserRequestForSignatureEventFilter;
        UserRequestForSignature(messageId?: BytesLike | null, encodedData?: null): UserRequestForSignatureEventFilter;
        "AffirmationCompleted(address,address,bytes32,bool)"(sender?: string | null, executor?: string | null, messageId?: BytesLike | null, status?: null): AffirmationCompletedEventFilter;
        AffirmationCompleted(sender?: string | null, executor?: string | null, messageId?: BytesLike | null, status?: null): AffirmationCompletedEventFilter;
        "SignedForUserRequest(address,bytes32)"(signer?: string | null, messageHash?: null): SignedForUserRequestEventFilter;
        SignedForUserRequest(signer?: string | null, messageHash?: null): SignedForUserRequestEventFilter;
        "SignedForAffirmation(address,bytes32)"(signer?: string | null, messageHash?: null): SignedForAffirmationEventFilter;
        SignedForAffirmation(signer?: string | null, messageHash?: null): SignedForAffirmationEventFilter;
        "CollectedSignatures(address,bytes32,uint256)"(authorityResponsibleForRelay?: null, messageHash?: null, NumberOfCollectedSignatures?: null): CollectedSignaturesEventFilter;
        CollectedSignatures(authorityResponsibleForRelay?: null, messageHash?: null, NumberOfCollectedSignatures?: null): CollectedSignaturesEventFilter;
        "GasPriceChanged(uint256)"(gasPrice?: null): GasPriceChangedEventFilter;
        GasPriceChanged(gasPrice?: null): GasPriceChangedEventFilter;
        "RequiredBlockConfirmationChanged(uint256)"(requiredBlockConfirmations?: null): RequiredBlockConfirmationChangedEventFilter;
        RequiredBlockConfirmationChanged(requiredBlockConfirmations?: null): RequiredBlockConfirmationChangedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        transactionHash(overrides?: CallOverrides): Promise<BigNumber>;
        numMessagesSigned(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        sourceChainId(overrides?: CallOverrides): Promise<BigNumber>;
        _sendMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, _dataType: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        signature(_hash: BytesLike, _index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_sourceChainId: BigNumberish, _destinationChainId: BigNumberish, _validatorContract: string, _maxGasPerTx: BigNumberish, _gasPrice: BigNumberish, _requiredBlockConfirmations: BigNumberish, _owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        isInitialized(overrides?: CallOverrides): Promise<BigNumber>;
        requiredBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;
        getMinimumGasUsage(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        failedMessageReceiver(_messageId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getBridgeMode(overrides?: CallOverrides): Promise<BigNumber>;
        setChainIds(_sourceChainId: BigNumberish, _destinationChainId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        message(_hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        failedMessageSender(_messageId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        submitSignature(signature: BytesLike, message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        messageId(overrides?: CallOverrides): Promise<BigNumber>;
        numAffirmationsSigned(_hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        affirmationsSigned(_hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        setMaxGasPerTx(_maxGasPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        messagesSigned(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        requireToConfirmMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        validatorContract(overrides?: CallOverrides): Promise<BigNumber>;
        deployedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;
        getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<BigNumber>;
        messageSourceChainId(overrides?: CallOverrides): Promise<BigNumber>;
        setRequiredBlockConfirmations(_blockConfirmations: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        destinationChainId(overrides?: CallOverrides): Promise<BigNumber>;
        setGasPrice(_gasPrice: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        messageCallStatus(_messageId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        messageSender(overrides?: CallOverrides): Promise<BigNumber>;
        decimalShift(overrides?: CallOverrides): Promise<BigNumber>;
        requireToPassMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        failedMessageDataHash(_messageId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        maxGasPerTx(overrides?: CallOverrides): Promise<BigNumber>;
        executeAffirmation(message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
        isAlreadyProcessed(_number: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        transactionHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        numMessagesSigned(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sourceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        _sendMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, _dataType: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        signature(_hash: BytesLike, _index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_sourceChainId: BigNumberish, _destinationChainId: BigNumberish, _validatorContract: string, _maxGasPerTx: BigNumberish, _gasPrice: BigNumberish, _requiredBlockConfirmations: BigNumberish, _owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        requiredBlockConfirmations(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMinimumGasUsage(_data: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        failedMessageReceiver(_messageId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBridgeMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setChainIds(_sourceChainId: BigNumberish, _destinationChainId: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        message(_hash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        failedMessageSender(_messageId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        submitSignature(signature: BytesLike, message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        messageId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        numAffirmationsSigned(_hash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        affirmationsSigned(_hash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setMaxGasPerTx(_maxGasPerTx: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        requiredSignatures(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messagesSigned(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        requireToConfirmMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        validatorContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deployedAtBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageSourceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setRequiredBlockConfirmations(_blockConfirmations: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        destinationChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setGasPrice(_gasPrice: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        messageCallStatus(_messageId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimalShift(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        requireToPassMessage(_contract: string, _data: BytesLike, _gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        failedMessageDataHash(_messageId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        maxGasPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executeAffirmation(message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        gasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAlreadyProcessed(_number: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=L2XDaiAMB.d.ts.map