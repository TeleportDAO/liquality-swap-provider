import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface L1OptimismDaiTokenBridgeInterface extends utils.Interface {
    contractName: "L1OptimismDaiTokenBridge";
    functions: {
        "close()": FunctionFragment;
        "deny(address)": FunctionFragment;
        "depositERC20(address,address,uint256,uint32,bytes)": FunctionFragment;
        "depositERC20To(address,address,address,uint256,uint32,bytes)": FunctionFragment;
        "escrow()": FunctionFragment;
        "finalizeERC20Withdrawal(address,address,address,address,uint256,bytes)": FunctionFragment;
        "isOpen()": FunctionFragment;
        "l1Token()": FunctionFragment;
        "l2DAITokenBridge()": FunctionFragment;
        "l2Token()": FunctionFragment;
        "messenger()": FunctionFragment;
        "rely(address)": FunctionFragment;
        "wards(address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "close", values?: undefined): string;
    encodeFunctionData(functionFragment: "deny", values: [string]): string;
    encodeFunctionData(functionFragment: "depositERC20", values: [string, string, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "depositERC20To", values: [string, string, string, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "escrow", values?: undefined): string;
    encodeFunctionData(functionFragment: "finalizeERC20Withdrawal", values: [string, string, string, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
    encodeFunctionData(functionFragment: "l1Token", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2DAITokenBridge", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2Token", values?: undefined): string;
    encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
    encodeFunctionData(functionFragment: "rely", values: [string]): string;
    encodeFunctionData(functionFragment: "wards", values: [string]): string;
    decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositERC20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositERC20To", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeERC20Withdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l1Token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2DAITokenBridge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2Token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
    events: {
        "Closed()": EventFragment;
        "Deny(address)": EventFragment;
        "ERC20DepositInitiated(address,address,address,address,uint256,bytes)": EventFragment;
        "ERC20WithdrawalFinalized(address,address,address,address,uint256,bytes)": EventFragment;
        "Rely(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Closed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deny"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ERC20DepositInitiated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ERC20WithdrawalFinalized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Rely"): EventFragment;
}
export declare type ClosedEvent = TypedEvent<[], {}>;
export declare type ClosedEventFilter = TypedEventFilter<ClosedEvent>;
export declare type DenyEvent = TypedEvent<[string], {
    usr: string;
}>;
export declare type DenyEventFilter = TypedEventFilter<DenyEvent>;
export declare type ERC20DepositInitiatedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber,
    string
], {
    _l1Token: string;
    _l2Token: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
}>;
export declare type ERC20DepositInitiatedEventFilter = TypedEventFilter<ERC20DepositInitiatedEvent>;
export declare type ERC20WithdrawalFinalizedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber,
    string
], {
    _l1Token: string;
    _l2Token: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
}>;
export declare type ERC20WithdrawalFinalizedEventFilter = TypedEventFilter<ERC20WithdrawalFinalizedEvent>;
export declare type RelyEvent = TypedEvent<[string], {
    usr: string;
}>;
export declare type RelyEventFilter = TypedEventFilter<RelyEvent>;
export interface L1OptimismDaiTokenBridge extends BaseContract {
    contractName: "L1OptimismDaiTokenBridge";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: L1OptimismDaiTokenBridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        close(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        deny(usr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositERC20(_l1Token: string, _l2Token: string, _amount: BigNumberish, _l2Gas: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        depositERC20To(_l1Token: string, _l2Token: string, _to: string, _amount: BigNumberish, _l2Gas: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        escrow(overrides?: CallOverrides): Promise<[string]>;
        finalizeERC20Withdrawal(_l1Token: string, _l2Token: string, _from: string, _to: string, _amount: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        isOpen(overrides?: CallOverrides): Promise<[BigNumber]>;
        l1Token(overrides?: CallOverrides): Promise<[string]>;
        l2DAITokenBridge(overrides?: CallOverrides): Promise<[string]>;
        l2Token(overrides?: CallOverrides): Promise<[string]>;
        messenger(overrides?: CallOverrides): Promise<[string]>;
        rely(usr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    close(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    deny(usr: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositERC20(_l1Token: string, _l2Token: string, _amount: BigNumberish, _l2Gas: BigNumberish, _data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    depositERC20To(_l1Token: string, _l2Token: string, _to: string, _amount: BigNumberish, _l2Gas: BigNumberish, _data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    escrow(overrides?: CallOverrides): Promise<string>;
    finalizeERC20Withdrawal(_l1Token: string, _l2Token: string, _from: string, _to: string, _amount: BigNumberish, _data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    isOpen(overrides?: CallOverrides): Promise<BigNumber>;
    l1Token(overrides?: CallOverrides): Promise<string>;
    l2DAITokenBridge(overrides?: CallOverrides): Promise<string>;
    l2Token(overrides?: CallOverrides): Promise<string>;
    messenger(overrides?: CallOverrides): Promise<string>;
    rely(usr: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        close(overrides?: CallOverrides): Promise<void>;
        deny(usr: string, overrides?: CallOverrides): Promise<void>;
        depositERC20(_l1Token: string, _l2Token: string, _amount: BigNumberish, _l2Gas: BigNumberish, _data: BytesLike, overrides?: CallOverrides): Promise<void>;
        depositERC20To(_l1Token: string, _l2Token: string, _to: string, _amount: BigNumberish, _l2Gas: BigNumberish, _data: BytesLike, overrides?: CallOverrides): Promise<void>;
        escrow(overrides?: CallOverrides): Promise<string>;
        finalizeERC20Withdrawal(_l1Token: string, _l2Token: string, _from: string, _to: string, _amount: BigNumberish, _data: BytesLike, overrides?: CallOverrides): Promise<void>;
        isOpen(overrides?: CallOverrides): Promise<BigNumber>;
        l1Token(overrides?: CallOverrides): Promise<string>;
        l2DAITokenBridge(overrides?: CallOverrides): Promise<string>;
        l2Token(overrides?: CallOverrides): Promise<string>;
        messenger(overrides?: CallOverrides): Promise<string>;
        rely(usr: string, overrides?: CallOverrides): Promise<void>;
        wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "Closed()"(): ClosedEventFilter;
        Closed(): ClosedEventFilter;
        "Deny(address)"(usr?: string | null): DenyEventFilter;
        Deny(usr?: string | null): DenyEventFilter;
        "ERC20DepositInitiated(address,address,address,address,uint256,bytes)"(_l1Token?: string | null, _l2Token?: string | null, _from?: string | null, _to?: null, _amount?: null, _data?: null): ERC20DepositInitiatedEventFilter;
        ERC20DepositInitiated(_l1Token?: string | null, _l2Token?: string | null, _from?: string | null, _to?: null, _amount?: null, _data?: null): ERC20DepositInitiatedEventFilter;
        "ERC20WithdrawalFinalized(address,address,address,address,uint256,bytes)"(_l1Token?: string | null, _l2Token?: string | null, _from?: string | null, _to?: null, _amount?: null, _data?: null): ERC20WithdrawalFinalizedEventFilter;
        ERC20WithdrawalFinalized(_l1Token?: string | null, _l2Token?: string | null, _from?: string | null, _to?: null, _amount?: null, _data?: null): ERC20WithdrawalFinalizedEventFilter;
        "Rely(address)"(usr?: string | null): RelyEventFilter;
        Rely(usr?: string | null): RelyEventFilter;
    };
    estimateGas: {
        close(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        deny(usr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositERC20(_l1Token: string, _l2Token: string, _amount: BigNumberish, _l2Gas: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        depositERC20To(_l1Token: string, _l2Token: string, _to: string, _amount: BigNumberish, _l2Gas: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        escrow(overrides?: CallOverrides): Promise<BigNumber>;
        finalizeERC20Withdrawal(_l1Token: string, _l2Token: string, _from: string, _to: string, _amount: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        isOpen(overrides?: CallOverrides): Promise<BigNumber>;
        l1Token(overrides?: CallOverrides): Promise<BigNumber>;
        l2DAITokenBridge(overrides?: CallOverrides): Promise<BigNumber>;
        l2Token(overrides?: CallOverrides): Promise<BigNumber>;
        messenger(overrides?: CallOverrides): Promise<BigNumber>;
        rely(usr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        close(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        deny(usr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositERC20(_l1Token: string, _l2Token: string, _amount: BigNumberish, _l2Gas: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        depositERC20To(_l1Token: string, _l2Token: string, _to: string, _amount: BigNumberish, _l2Gas: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        finalizeERC20Withdrawal(_l1Token: string, _l2Token: string, _from: string, _to: string, _amount: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l1Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2DAITokenBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rely(usr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        wards(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=L1OptimismDaiTokenBridge.d.ts.map