import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export declare namespace MockOVMCrossDomainMessenger {
    type ReceivedMessageStruct = {
        timestamp: BigNumberish;
        target: string;
        sender: string;
        message: BytesLike;
        messageNonce: BigNumberish;
        gasLimit: BigNumberish;
    };
    type ReceivedMessageStructOutput = [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber
    ] & {
        timestamp: BigNumber;
        target: string;
        sender: string;
        message: string;
        messageNonce: BigNumber;
        gasLimit: BigNumber;
    };
}
export interface MockOVMCrossDomainMessengerInterface extends utils.Interface {
    contractName: "MockOVMCrossDomainMessenger";
    functions: {
        "delay()": FunctionFragment;
        "fullReceivedMessages(uint256)": FunctionFragment;
        "hasNextMessage()": FunctionFragment;
        "lastRelayedMessage()": FunctionFragment;
        "messageNonce()": FunctionFragment;
        "receiveMessage((uint256,address,address,bytes,uint256,uint256))": FunctionFragment;
        "relayNextMessage()": FunctionFragment;
        "relayedMessages(bytes32)": FunctionFragment;
        "sendMessage(address,bytes,uint32)": FunctionFragment;
        "sentMessages(bytes32)": FunctionFragment;
        "setTargetMessengerAddress(address)": FunctionFragment;
        "successfulMessages(bytes32)": FunctionFragment;
        "targetMessengerAddress()": FunctionFragment;
        "xDomainMessageSender()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "delay", values?: undefined): string;
    encodeFunctionData(functionFragment: "fullReceivedMessages", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "hasNextMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "lastRelayedMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageNonce", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveMessage", values: [MockOVMCrossDomainMessenger.ReceivedMessageStruct]): string;
    encodeFunctionData(functionFragment: "relayNextMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "relayedMessages", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "sendMessage", values: [string, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "sentMessages", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setTargetMessengerAddress", values: [string]): string;
    encodeFunctionData(functionFragment: "successfulMessages", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "targetMessengerAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "xDomainMessageSender", values?: undefined): string;
    decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fullReceivedMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasNextMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastRelayedMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "relayNextMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "relayedMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sentMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTargetMessengerAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "successfulMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetMessengerAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xDomainMessageSender", data: BytesLike): Result;
    events: {};
}
export interface MockOVMCrossDomainMessenger extends BaseContract {
    contractName: "MockOVMCrossDomainMessenger";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockOVMCrossDomainMessengerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        delay(overrides?: CallOverrides): Promise<[BigNumber]>;
        fullReceivedMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            string,
            string,
            string,
            BigNumber,
            BigNumber
        ] & {
            timestamp: BigNumber;
            target: string;
            sender: string;
            message: string;
            messageNonce: BigNumber;
            gasLimit: BigNumber;
        }>;
        hasNextMessage(overrides?: CallOverrides): Promise<[boolean] & {
            _exists: boolean;
        }>;
        lastRelayedMessage(overrides?: CallOverrides): Promise<[BigNumber]>;
        messageNonce(overrides?: CallOverrides): Promise<[BigNumber]>;
        receiveMessage(_message: MockOVMCrossDomainMessenger.ReceivedMessageStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        relayNextMessage(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        sendMessage(_target: string, _message: BytesLike, _gasLimit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        setTargetMessengerAddress(_targetMessengerAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        successfulMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        targetMessengerAddress(overrides?: CallOverrides): Promise<[string]>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<[string]>;
    };
    delay(overrides?: CallOverrides): Promise<BigNumber>;
    fullReceivedMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber
    ] & {
        timestamp: BigNumber;
        target: string;
        sender: string;
        message: string;
        messageNonce: BigNumber;
        gasLimit: BigNumber;
    }>;
    hasNextMessage(overrides?: CallOverrides): Promise<boolean>;
    lastRelayedMessage(overrides?: CallOverrides): Promise<BigNumber>;
    messageNonce(overrides?: CallOverrides): Promise<BigNumber>;
    receiveMessage(_message: MockOVMCrossDomainMessenger.ReceivedMessageStruct, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    relayNextMessage(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    sendMessage(_target: string, _message: BytesLike, _gasLimit: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    setTargetMessengerAddress(_targetMessengerAddress: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    successfulMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    targetMessengerAddress(overrides?: CallOverrides): Promise<string>;
    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        delay(overrides?: CallOverrides): Promise<BigNumber>;
        fullReceivedMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            string,
            string,
            string,
            BigNumber,
            BigNumber
        ] & {
            timestamp: BigNumber;
            target: string;
            sender: string;
            message: string;
            messageNonce: BigNumber;
            gasLimit: BigNumber;
        }>;
        hasNextMessage(overrides?: CallOverrides): Promise<boolean>;
        lastRelayedMessage(overrides?: CallOverrides): Promise<BigNumber>;
        messageNonce(overrides?: CallOverrides): Promise<BigNumber>;
        receiveMessage(_message: MockOVMCrossDomainMessenger.ReceivedMessageStruct, overrides?: CallOverrides): Promise<void>;
        relayNextMessage(overrides?: CallOverrides): Promise<void>;
        relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        sendMessage(_target: string, _message: BytesLike, _gasLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;
        sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        setTargetMessengerAddress(_targetMessengerAddress: string, overrides?: CallOverrides): Promise<void>;
        successfulMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        targetMessengerAddress(overrides?: CallOverrides): Promise<string>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        delay(overrides?: CallOverrides): Promise<BigNumber>;
        fullReceivedMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        hasNextMessage(overrides?: CallOverrides): Promise<BigNumber>;
        lastRelayedMessage(overrides?: CallOverrides): Promise<BigNumber>;
        messageNonce(overrides?: CallOverrides): Promise<BigNumber>;
        receiveMessage(_message: MockOVMCrossDomainMessenger.ReceivedMessageStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        relayNextMessage(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        sendMessage(_target: string, _message: BytesLike, _gasLimit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        setTargetMessengerAddress(_targetMessengerAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        successfulMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        targetMessengerAddress(overrides?: CallOverrides): Promise<BigNumber>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fullReceivedMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasNextMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lastRelayedMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveMessage(_message: MockOVMCrossDomainMessenger.ReceivedMessageStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        relayNextMessage(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sendMessage(_target: string, _message: BytesLike, _gasLimit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setTargetMessengerAddress(_targetMessengerAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        successfulMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetMessengerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        xDomainMessageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MockOVMCrossDomainMessenger.d.ts.map