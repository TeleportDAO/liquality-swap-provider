"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseWatcher_1 = __importDefault(require("./BaseWatcher"));
const makeRequest_1 = require("./makeRequest");
const eventTopics_1 = require("../constants/eventTopics");
class L2ToL1Watcher extends BaseWatcher_1.default {
    watch() {
        this.start().catch((err) => this.ee.emit('error', err));
        return this.ee;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startBase();
            return this.poll(yield this.pollFn());
        });
    }
    pollFn() {
        return __awaiter(this, void 0, void 0, function* () {
            const l1Bridge = yield this.bridge.getL1Bridge();
            let transferHash = '';
            for (const log of this.sourceReceipt.logs) {
                if (log.topics[0] === eventTopics_1.transferSentTopic) {
                    transferHash = log.topics[1];
                    break;
                }
            }
            if (!transferHash) {
                return false;
            }
            let startBlock;
            let endBlock;
            const filter = l1Bridge.filters.WithdrawalBonded();
            const handleEvent = (...args) => __awaiter(this, void 0, void 0, function* () {
                const event = args[args.length - 1];
                if (event.topics[1] === transferHash) {
                    const destTx = yield event.getTransaction();
                    if (yield this.emitDestTxEvent(destTx)) {
                        l1Bridge.off(filter, handleEvent);
                        return true;
                    }
                }
                return false;
            });
            l1Bridge.on(filter, handleEvent);
            return () => __awaiter(this, void 0, void 0, function* () {
                let transferId = '';
                for (const log of this.sourceReceipt.logs) {
                    if (log.topics[0] === eventTopics_1.transferSentTopic) {
                        transferId = log.topics[1];
                    }
                }
                if (!transferId) {
                    return;
                }
                const events = yield getWithdrawalBondedEvents(this.destinationChain.slug, transferId);
                if (events.length) {
                    const event = events[0];
                    const destTx = yield this.destinationChain.provider.getTransaction(event.transactionHash);
                    return this.emitDestTxEvent(destTx);
                }
                return false;
            });
        });
    }
}
function getWithdrawalBondedEvents(chain, transferId) {
    return __awaiter(this, void 0, void 0, function* () {
        const query = `
    query WithdrawalBonded($transferId: String) {
      events: withdrawalBondeds(
        where: {
          transferId: $transferId
        }
      ) {
        transferId
        transactionHash
        timestamp
        token
        from
      }
    }
  `;
        const data = yield (0, makeRequest_1.makeRequest)(chain, query, {
            transferId
        });
        return data.events || [];
    });
}
exports.default = L2ToL1Watcher;
