"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseWatcher_1 = __importDefault(require("./BaseWatcher"));
const ethers_1 = require("ethers");
const luxon_1 = require("luxon");
const constants_1 = require("../constants");
const makeRequest_1 = require("./makeRequest");
const eventTopics_1 = require("../constants/eventTopics");
class L1ToL2Watcher extends BaseWatcher_1.default {
    watch() {
        this.start().catch((err) => this.ee.emit('error', err));
        return this.ee;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startBase();
            return this.poll(yield this.pollFn());
        });
    }
    pollFn() {
        return __awaiter(this, void 0, void 0, function* () {
            const destWrapper = yield this.bridge.getAmmWrapper(this.destinationChain);
            const l1Bridge = yield this.bridge.getL1Bridge();
            const sourceTimestamp = this.sourceBlock.timestamp;
            let attemptedSwap = false;
            let amount = ethers_1.BigNumber.from(0);
            for (const log of this.sourceReceipt.logs) {
                if (log.topics[0] === eventTopics_1.transferSentToL2Topic) {
                    const decodedLog = l1Bridge.interface.decodeEventLog(constants_1.EventNames.TransferSentToL2, log.data);
                    const amountOutMin = Number(decodedLog.amountOutMin.toString());
                    const deadline = Number(decodedLog.deadline.toString());
                    amount = decodedLog.amount;
                    attemptedSwap = deadline > 0 || amountOutMin > 0;
                }
            }
            const recipient = this.sourceTx.from;
            const handleDestTx = (destTx, data = {}) => __awaiter(this, void 0, void 0, function* () {
                if (!sourceTimestamp) {
                    return false;
                }
                if (!destTx) {
                    return false;
                }
                const destBlock = yield this.destinationChain.provider.getBlock(destTx.blockNumber);
                if (!destBlock) {
                    return false;
                }
                const withinAnHour = 60 * 60;
                if (destBlock.timestamp - sourceTimestamp < withinAnHour) {
                    if (yield this.emitDestTxEvent(destTx, data)) {
                        return true;
                    }
                }
                return false;
            });
            return () => __awaiter(this, void 0, void 0, function* () {
                const dateTime = luxon_1.DateTime.fromSeconds(this.sourceBlock.timestamp);
                const startTime = Math.floor(dateTime.minus({ hour: 1 }).toSeconds());
                const endTime = Math.floor(dateTime.plus({ hour: 24 }).toSeconds());
                const events = yield getTransferFromL1CompletedEvents(this.destinationChain.slug, startTime, endTime);
                for (const event of events) {
                    if (event.recipient.toLowerCase() === recipient.toLowerCase()) {
                        if (event.amount.toString() === amount.toString()) {
                            const destTx = yield this.destinationChain.provider.getTransaction(event.transactionHash);
                            console.log(destTx.hash);
                            return handleDestTx(destTx);
                        }
                    }
                }
                return false;
            });
        });
    }
}
function getTransferFromL1CompletedEvents(chain, startTime, endTime) {
    return __awaiter(this, void 0, void 0, function* () {
        const query = `
    query TransferFromL1Completed($startTime: Int, $endTime: Int) {
      events: transferFromL1Completeds(
        where: {
          timestamp_gte: $startTime,
          timestamp_lte: $endTime
        },
        first: 1000,
        orderBy: timestamp,
        orderDirection: desc
      ) {
        recipient
        amount
        amountOutMin
        deadline
        transactionHash
        from
        timestamp
      }
    }
  `;
        const data = yield (0, makeRequest_1.makeRequest)(chain, query, {
            startTime,
            endTime
        });
        return data.events || [];
    });
}
exports.default = L1ToL2Watcher;
