"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const networks_1 = require("@hop-protocol/core/networks");
const config_1 = require("../config");
class Chain {
    constructor(name, chainId, provider) {
        this.name = '';
        this.slug = '';
        this.provider = null;
        this.isL1 = false;
        this.name = name;
        this.slug = (name || '').trim().toLowerCase();
        if (this.slug === constants_1.NetworkSlug.Kovan ||
            this.slug === constants_1.NetworkSlug.Goerli ||
            this.slug === constants_1.NetworkSlug.Mainnet ||
            this.slug === constants_1.NetworkSlug.Staging ||
            this.slug === constants_1.ChainSlug.Ethereum) {
            this.isL1 = true;
            this.slug = constants_1.ChainSlug.Ethereum;
        }
        if (chainId) {
            this.chainId = chainId;
        }
        if (provider) {
            this.provider = provider;
        }
        this.nativeTokenSymbol = config_1.metadata.networks[this.slug].nativeTokenSymbol;
    }
    static fromSlug(slug) {
        if (slug === 'xdai') {
            console.warn(constants_1.Errors.xDaiRebrand);
            slug = 'gnosis';
        }
        return newChain(slug);
    }
    equals(other) {
        return this.slug === other.slug;
    }
    get rpcUrl() {
        var _a, _b;
        return (_b = (_a = this.provider) === null || _a === void 0 ? void 0 : _a.connection) === null || _b === void 0 ? void 0 : _b.url;
    }
}
Chain.Ethereum = newChain(constants_1.ChainSlug.Ethereum, networks_1.mainnet.ethereum.networkId);
Chain.Optimism = newChain(constants_1.ChainSlug.Optimism, networks_1.mainnet.optimism.networkId);
Chain.Arbitrum = newChain(constants_1.ChainSlug.Arbitrum, networks_1.mainnet.arbitrum.networkId);
Chain.Gnosis = newChain(constants_1.ChainSlug.Gnosis, networks_1.mainnet.gnosis.networkId);
Chain.Polygon = newChain(constants_1.ChainSlug.Polygon, networks_1.mainnet.polygon.networkId);
function newChain(chain, chainId) {
    if (chain === constants_1.NetworkSlug.Mainnet ||
        chain === constants_1.NetworkSlug.Staging ||
        chain === constants_1.NetworkSlug.Goerli ||
        chain === constants_1.NetworkSlug.Kovan) {
        chain = constants_1.ChainSlug.Ethereum;
    }
    if (!config_1.metadata.networks[chain]) {
        throw new Error(`unsupported chain "${chain}"`);
    }
    return new Chain(config_1.metadata.networks[chain].name, chainId);
}
exports.default = Chain;
