"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
class Coinbase {
    constructor() {
        this._baseUrl = 'https://api.pro.coinbase.com';
        this.getPriceByTokenSymbol = (symbol, base = 'USD') => __awaiter(this, void 0, void 0, function* () {
            // pair "USDC-USD" doesn't exist so just return $1
            if (symbol === 'USDC') {
                return 1;
            }
            const url = `${this._baseUrl}/products/${symbol}-${base}/ticker`;
            const res = yield (0, isomorphic_fetch_1.default)(url);
            const json = yield res.json();
            const value = json.price;
            if (!value) {
                throw new Error('coinbase: invalid price response');
            }
            const price = Number(value);
            if (Number.isNaN(price)) {
                throw new Error('coinbase: invalid price (not a number)');
            }
            return price;
        });
    }
}
exports.default = Coinbase;
