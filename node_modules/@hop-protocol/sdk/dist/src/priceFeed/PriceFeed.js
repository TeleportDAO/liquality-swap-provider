"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CoinGecko_1 = __importDefault(require("./CoinGecko"));
const Coinbase_1 = __importDefault(require("./Coinbase"));
class PriceFeed {
    constructor() {
        this.services = [new CoinGecko_1.default(), new Coinbase_1.default()];
        this.cacheTimeMs = 5 * 60 * 1000;
        this.cache = {};
        this.aliases = {
            WETH: 'ETH',
            WMATIC: 'MATIC',
            XDAI: 'DAI',
            WXDAI: 'DAI'
        };
    }
    getPriceByTokenSymbol(tokenSymbol) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.aliases[tokenSymbol]) {
                tokenSymbol = this.aliases[tokenSymbol];
            }
            const cached = this.cache[tokenSymbol];
            if (cached) {
                const isRecent = cached.timestamp > Date.now() - this.cacheTimeMs;
                if (isRecent) {
                    return cached.price;
                }
            }
            const errors = [];
            for (const service of this.services) {
                try {
                    const price = yield service.getPriceByTokenSymbol(tokenSymbol);
                    if (price === null) {
                        throw new Error(`null price for ${tokenSymbol}`);
                    }
                    this.cache[tokenSymbol] = {
                        timestamp: Date.now(),
                        price
                    };
                    return price;
                }
                catch (err) {
                    const isLastService = this.services.indexOf(service) === this.services.length - 1;
                    errors.push(err.message);
                    if (isLastService) {
                        throw new Error(`PriceFeed error(s): ${errors.join(' ')}`);
                    }
                }
            }
        });
    }
}
exports.default = PriceFeed;
