export = Teleport;
declare class Teleport {
    constructor({ sourceNetwork, targetNetwork, mnemonic, bitcoinRelayContractAddress, ccTransferContractAddress, ccExchangeContractAddress, lendingContractAddress, lockerContractAddress, isLendingActivated, }: {
        sourceNetwork: any;
        targetNetwork: any;
        mnemonic: any;
        bitcoinRelayContractAddress: any;
        ccTransferContractAddress: any;
        ccExchangeContractAddress: any;
        lendingContractAddress: any;
        lockerContractAddress: any;
        isLendingActivated: any;
    });
    workId: string;
    lockerAddresses: any;
    mnemonic: any;
    baseEthWeb3: any;
    btcInterface: any;
    pendingRequests: any[];
    pendingTx: any[];
    numberOfConfirmations: number;
    lastReceivedBitcoinBlock: number;
    isLendingActivated: any;
    setContractsInterfaces({ bitcoinRelayContractAddress, ccTransferContractAddress, ccExchangeContractAddress, lendingContractAddress, lockerContractAddress, }: {
        bitcoinRelayContractAddress: any;
        ccTransferContractAddress: any;
        ccExchangeContractAddress: any;
        lendingContractAddress: any;
        lockerContractAddress: any;
    }): void;
    btcRelayInterface: any;
    ccTransferInterface: any;
    ccExchangeInterface: any;
    lockerInterface: any;
    lendingInterface: any;
    setAccount(index?: number): any;
    ethClientAddress: any;
    init(): Promise<void>;
    setValidLockerAddresses(validAddresses: any): void;
    validateAndSetLockerAddresses(allLockerAddresses?: any[]): Promise<any[]>;
    checkPendingTxAndResetNonce(): Promise<boolean>;
    startNonce: any;
    addNewRequestsToQueue(requests: any): Promise<void>;
    handleTeleportRequests(): Promise<void>;
    submittingRequests: boolean | undefined;
    sendTeleportRequest(data: any, txProof: any, nonce: any): Promise<any>;
    getNewTeleportRequest(blockHeight: any): Promise<void>;
    processOldTeleportRequests(latestBlockNumber: any): Promise<void>;
    newBlockReceived(blockEvent: any): Promise<void>;
}
