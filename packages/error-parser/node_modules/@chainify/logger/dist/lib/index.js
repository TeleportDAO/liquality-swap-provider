"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogLevel = void 0;
const LogLevels = { debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5 };
let _logLevel = LogLevels['default'];
let _globalLogger = null;
var LogLevel;
(function (LogLevel) {
    LogLevel["DEBUG"] = "DEBUG";
    LogLevel["INFO"] = "INFO";
    LogLevel["WARNING"] = "WARNING";
    LogLevel["ERROR"] = "ERROR";
    LogLevel["OFF"] = "OFF";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
class Logger {
    constructor(version) {
        this.version = version;
    }
    debug(...args) {
        this._log(Logger.levels.DEBUG, args);
    }
    info(...args) {
        this._log(Logger.levels.INFO, args);
    }
    warn(...args) {
        this._log(Logger.levels.WARNING, args);
    }
    error(...args) {
        this._log(Logger.levels.ERROR, args);
    }
    static globalLogger() {
        if (!_globalLogger) {
            _globalLogger = new Logger('global');
        }
        return _globalLogger;
    }
    static setLogLevel(logLevel) {
        const level = LogLevels[logLevel.toLowerCase()];
        if (level == null) {
            Logger.globalLogger().warn('invalid log level - ' + logLevel);
            return;
        }
        _logLevel = level;
    }
    static from(version) {
        return new Logger(version);
    }
    _log(logLevel, args) {
        const level = logLevel.toLowerCase();
        if (LogLevels[level] == null) {
            Logger.globalLogger().debug('invalid log level name', 'logLevel', logLevel);
        }
        if (_logLevel > LogLevels[level]) {
            return;
        }
        // eslint-disable-next-line prefer-spread
        console.log.apply(console, [`${logLevel}: ${this.version}: `, ...args]);
    }
}
exports.Logger = Logger;
Logger.levels = LogLevel;
//# sourceMappingURL=index.js.map