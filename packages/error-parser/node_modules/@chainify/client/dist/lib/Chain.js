"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("@chainify/errors");
/**
 * Represents a connection to a specific blockchain.
 * Used to fetch chain specific data like blocks, transactions, balances and fees.
 * @public
 * @typeParam T - type of the internal provider, e.g. {@link https://docs.ethers.io/v5/api/providers/jsonrpc-provider/ | JsonRpcProvider} for EVM chains
 * @typeParam N - type of the network. The default value of the type is {@link Network}
 */
class Chain {
    constructor(network, provider, feeProvider) {
        this.network = network;
        this.provider = provider;
        this.feeProvider = feeProvider;
    }
    /**
     * Sets the network
     */
    setNetwork(network) {
        this.network = network;
    }
    /**
     * Gets the connected network
     */
    getNetwork() {
        return this.network;
    }
    /**
     * Gets the chain specific provider
     */
    getProvider() {
        return this.provider;
    }
    /**
     * Sets the chain specific provider
     */
    setProvider(provider) {
        this.provider = provider;
    }
    /**
     * Sets the fee provider
     */
    setFeeProvider(feeProvider) {
        this.feeProvider = feeProvider;
    }
    /**
     * Gets the fee provider
     */
    getFeeProvider() {
        return this.feeProvider;
    }
    /**
     * Use to fetch the decimals, name & symbol of a token
     */
    getTokenDetails(_asset) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new errors_1.UnsupportedMethodError(`${this.network.name} does not support getTokenDetails.`);
        });
    }
}
exports.default = Chain;
//# sourceMappingURL=Chain.js.map