"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("@chainify/errors");
const logger_1 = require("@chainify/logger");
const axios_1 = __importDefault(require("axios"));
const logger = new logger_1.Logger('HttpClient');
class HttpClient {
    constructor(config) {
        this._node = axios_1.default.create(config);
    }
    static post(url, data, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = axios_1.default
                .post(url, data, config)
                .then((response) => response.data)
                .catch(HttpClient.handleError);
            return response;
        });
    }
    static get(url, params = {}, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield axios_1.default
                .get(url, Object.assign(Object.assign({}, config), { params }))
                .then((response) => response.data)
                .catch(HttpClient.handleError);
            return response;
        });
    }
    nodeGet(url, params = {}, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._node
                .get(url, Object.assign(Object.assign({}, config), { params }))
                .then((response) => response.data)
                .catch(HttpClient.handleError);
            return response;
        });
    }
    nodePost(url, data, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this._node
                .post(url, data, config)
                .then((response) => response.data)
                .catch(HttpClient.handleError);
            return response;
        });
    }
    setConfig(config) {
        this._node = axios_1.default.create(config);
    }
    static handleError(error) {
        var _a;
        const { message } = error, attrs = __rest(error, ["message"]);
        const errorMessage = ((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) || message;
        if (error.response) {
            // The request was made and the server responded with a status code
            // that falls out of the range of 2xx
            logger.debug('error.response');
            logger.debug(error.response.data);
            logger.debug(error.response.status);
            logger.debug(error.response.headers);
        }
        else if (error.request) {
            // The request was made but no response was received
            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
            // http.ClientRequest in node.js
            logger.debug('error.request');
            logger.debug(error.request);
        }
        else {
            // Something happened in setting up the request that triggered an Error
            logger.debug('error.message');
            logger.debug(error.message);
        }
        throw new errors_1.NodeError(errorMessage, Object.assign({}, attrs));
    }
}
exports.default = HttpClient;
//# sourceMappingURL=Http.js.map