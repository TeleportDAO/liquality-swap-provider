"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Chain_1 = __importDefault(require("./Chain"));
const Nft_1 = __importDefault(require("./Nft"));
const Swap_1 = __importDefault(require("./Swap"));
const Wallet_1 = __importDefault(require("./Wallet"));
class Client {
    constructor(chain, wallet, swap, nft) {
        this._chain = chain;
        this._wallet = wallet;
        this._swap = swap;
        this._nft = nft;
    }
    connect(provider) {
        switch (true) {
            case provider instanceof Chain_1.default: {
                this.chain = provider;
                if (this.wallet) {
                    this.wallet.setChainProvider(this.chain);
                }
                break;
            }
            case provider instanceof Wallet_1.default: {
                this.wallet = provider;
                this.connectChain();
                if (this.swap) {
                    this.swap.setWallet(this.wallet);
                }
                if (this.nft) {
                    this.nft.setWallet(this.wallet);
                }
                break;
            }
            case provider instanceof Swap_1.default: {
                this.swap = provider;
                this.connectWallet(this.swap);
                if (this.nft) {
                    this.nft.setWallet(this.wallet);
                }
                this.connectChain();
                break;
            }
            case provider instanceof Nft_1.default: {
                this._nft = provider;
                this.connectWallet(this.nft);
                if (this.swap) {
                    this.swap.setWallet(this.wallet);
                }
                this.connectChain();
                break;
            }
        }
        return this;
    }
    get chain() {
        return this._chain;
    }
    set chain(chain) {
        this._chain = chain;
    }
    get wallet() {
        return this._wallet;
    }
    set wallet(wallet) {
        this._wallet = wallet;
    }
    get swap() {
        return this._swap;
    }
    set swap(swap) {
        this._swap = swap;
    }
    get nft() {
        return this._nft;
    }
    set nft(nft) {
        this._nft = nft;
    }
    connectChain() {
        var _a;
        const chain = (_a = this.wallet) === null || _a === void 0 ? void 0 : _a.getChainProvider();
        if (chain) {
            this.chain = chain;
        }
    }
    connectWallet(source) {
        const wallet = source === null || source === void 0 ? void 0 : source.getWallet();
        if (wallet) {
            this.wallet = wallet;
        }
    }
}
exports.default = Client;
//# sourceMappingURL=Client.js.map