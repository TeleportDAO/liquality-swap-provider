import { AddressType, BigNumber, FeeType, NFTAsset, Transaction } from '@chainify/types';
import Wallet from './Wallet';
export default abstract class Nft<T, S> {
    protected walletProvider: Wallet<T, S>;
    constructor(walletProvider?: Wallet<T, S>);
    setWallet(wallet: Wallet<T, S>): void;
    getWallet(): Wallet<T, S>;
    abstract transfer(contract: AddressType, receiver: AddressType, tokenIDs: string[], values?: number[], data?: string, fee?: FeeType): Promise<Transaction>;
    abstract balanceOf(contractAddress: AddressType, owners: AddressType[], tokenIDs: number[]): Promise<BigNumber | BigNumber[]>;
    abstract approve(contract: AddressType, operator: AddressType, tokenID: number): Promise<Transaction>;
    abstract approveAll(contract: AddressType, operator: AddressType, state: boolean): Promise<Transaction>;
    abstract isApprovedForAll(contract: AddressType, operator: AddressType): Promise<boolean>;
    estimateTransfer(_contractAddress: AddressType, _receiver: AddressType, _tokenIDs: string[], _amounts?: number[], _data?: string): Promise<BigNumber>;
    estimateApprove(_contract: AddressType, _operator: AddressType, _tokenID: number): Promise<BigNumber>;
    estimateApproveAll(_contract: AddressType, _operator: AddressType, _state: boolean): Promise<BigNumber>;
    abstract fetch(): Promise<NFTAsset[]>;
}
